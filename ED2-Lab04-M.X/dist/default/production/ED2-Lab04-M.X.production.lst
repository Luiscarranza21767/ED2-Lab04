

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Feb 15 21:17:03 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og9 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=3
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2
    41                           	psect	text30,local,class=CODE,merge=1,delta=2
    42                           	psect	text31,local,class=CODE,merge=1,delta=2
    43                           	psect	text32,local,class=CODE,merge=1,delta=2
    44                           	psect	text33,local,class=CODE,merge=1,delta=2
    45                           	psect	text34,local,class=CODE,merge=1,delta=2
    46                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text36,local,class=CODE,merge=1,delta=2
    48                           	psect	text37,local,class=CODE,merge=1,delta=2
    49                           	psect	text38,local,class=CODE,merge=1,delta=2
    50                           	psect	text39,local,class=CODE,merge=1,delta=2
    51                           	psect	text40,local,class=CODE,merge=1,delta=2
    52                           	psect	text41,local,class=CODE,merge=1,delta=2
    53                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text44,local,class=CODE,merge=1,delta=2
    56                           	psect	text45,local,class=CODE,merge=1,delta=2
    57                           	psect	text46,local,class=CODE,merge=1,delta=2
    58                           	psect	text47,local,class=CODE,merge=1,delta=2
    59                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    61                           	dabs	1,0x7E,2
    62     0000                     
    63                           ; Version 2.40
    64                           ; Generated 17/11/2021 GMT
    65                           ; 
    66                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution. Publication is not required when
    80                           ;        this file is used in an embedded application.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC16F887 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98     0000                     	;# 
    99     0001                     	;# 
   100     0002                     	;# 
   101     0003                     	;# 
   102     0004                     	;# 
   103     0005                     	;# 
   104     0006                     	;# 
   105     0007                     	;# 
   106     0008                     	;# 
   107     0009                     	;# 
   108     000A                     	;# 
   109     000B                     	;# 
   110     000C                     	;# 
   111     000D                     	;# 
   112     000E                     	;# 
   113     000E                     	;# 
   114     000F                     	;# 
   115     0010                     	;# 
   116     0011                     	;# 
   117     0012                     	;# 
   118     0013                     	;# 
   119     0014                     	;# 
   120     0015                     	;# 
   121     0015                     	;# 
   122     0016                     	;# 
   123     0017                     	;# 
   124     0018                     	;# 
   125     0019                     	;# 
   126     001A                     	;# 
   127     001B                     	;# 
   128     001B                     	;# 
   129     001C                     	;# 
   130     001D                     	;# 
   131     001E                     	;# 
   132     001F                     	;# 
   133     0081                     	;# 
   134     0085                     	;# 
   135     0086                     	;# 
   136     0087                     	;# 
   137     0088                     	;# 
   138     0089                     	;# 
   139     008C                     	;# 
   140     008D                     	;# 
   141     008E                     	;# 
   142     008F                     	;# 
   143     0090                     	;# 
   144     0091                     	;# 
   145     0092                     	;# 
   146     0093                     	;# 
   147     0093                     	;# 
   148     0093                     	;# 
   149     0094                     	;# 
   150     0095                     	;# 
   151     0096                     	;# 
   152     0097                     	;# 
   153     0098                     	;# 
   154     0099                     	;# 
   155     009A                     	;# 
   156     009B                     	;# 
   157     009C                     	;# 
   158     009D                     	;# 
   159     009E                     	;# 
   160     009F                     	;# 
   161     0105                     	;# 
   162     0107                     	;# 
   163     0108                     	;# 
   164     0109                     	;# 
   165     010C                     	;# 
   166     010C                     	;# 
   167     010D                     	;# 
   168     010E                     	;# 
   169     010F                     	;# 
   170     0185                     	;# 
   171     0187                     	;# 
   172     0188                     	;# 
   173     0189                     	;# 
   174     018C                     	;# 
   175     018D                     	;# 
   176     0000                     	;# 
   177     0001                     	;# 
   178     0002                     	;# 
   179     0003                     	;# 
   180     0004                     	;# 
   181     0005                     	;# 
   182     0006                     	;# 
   183     0007                     	;# 
   184     0008                     	;# 
   185     0009                     	;# 
   186     000A                     	;# 
   187     000B                     	;# 
   188     000C                     	;# 
   189     000D                     	;# 
   190     000E                     	;# 
   191     000E                     	;# 
   192     000F                     	;# 
   193     0010                     	;# 
   194     0011                     	;# 
   195     0012                     	;# 
   196     0013                     	;# 
   197     0014                     	;# 
   198     0015                     	;# 
   199     0015                     	;# 
   200     0016                     	;# 
   201     0017                     	;# 
   202     0018                     	;# 
   203     0019                     	;# 
   204     001A                     	;# 
   205     001B                     	;# 
   206     001B                     	;# 
   207     001C                     	;# 
   208     001D                     	;# 
   209     001E                     	;# 
   210     001F                     	;# 
   211     0081                     	;# 
   212     0085                     	;# 
   213     0086                     	;# 
   214     0087                     	;# 
   215     0088                     	;# 
   216     0089                     	;# 
   217     008C                     	;# 
   218     008D                     	;# 
   219     008E                     	;# 
   220     008F                     	;# 
   221     0090                     	;# 
   222     0091                     	;# 
   223     0092                     	;# 
   224     0093                     	;# 
   225     0093                     	;# 
   226     0093                     	;# 
   227     0094                     	;# 
   228     0095                     	;# 
   229     0096                     	;# 
   230     0097                     	;# 
   231     0098                     	;# 
   232     0099                     	;# 
   233     009A                     	;# 
   234     009B                     	;# 
   235     009C                     	;# 
   236     009D                     	;# 
   237     009E                     	;# 
   238     009F                     	;# 
   239     0105                     	;# 
   240     0107                     	;# 
   241     0108                     	;# 
   242     0109                     	;# 
   243     010C                     	;# 
   244     010C                     	;# 
   245     010D                     	;# 
   246     010E                     	;# 
   247     010F                     	;# 
   248     0185                     	;# 
   249     0187                     	;# 
   250     0188                     	;# 
   251     0189                     	;# 
   252     018C                     	;# 
   253     018D                     	;# 
   254     0000                     	;# 
   255     0001                     	;# 
   256     0002                     	;# 
   257     0003                     	;# 
   258     0004                     	;# 
   259     0005                     	;# 
   260     0006                     	;# 
   261     0007                     	;# 
   262     0008                     	;# 
   263     0009                     	;# 
   264     000A                     	;# 
   265     000B                     	;# 
   266     000C                     	;# 
   267     000D                     	;# 
   268     000E                     	;# 
   269     000E                     	;# 
   270     000F                     	;# 
   271     0010                     	;# 
   272     0011                     	;# 
   273     0012                     	;# 
   274     0013                     	;# 
   275     0014                     	;# 
   276     0015                     	;# 
   277     0015                     	;# 
   278     0016                     	;# 
   279     0017                     	;# 
   280     0018                     	;# 
   281     0019                     	;# 
   282     001A                     	;# 
   283     001B                     	;# 
   284     001B                     	;# 
   285     001C                     	;# 
   286     001D                     	;# 
   287     001E                     	;# 
   288     001F                     	;# 
   289     0081                     	;# 
   290     0085                     	;# 
   291     0086                     	;# 
   292     0087                     	;# 
   293     0088                     	;# 
   294     0089                     	;# 
   295     008C                     	;# 
   296     008D                     	;# 
   297     008E                     	;# 
   298     008F                     	;# 
   299     0090                     	;# 
   300     0091                     	;# 
   301     0092                     	;# 
   302     0093                     	;# 
   303     0093                     	;# 
   304     0093                     	;# 
   305     0094                     	;# 
   306     0095                     	;# 
   307     0096                     	;# 
   308     0097                     	;# 
   309     0098                     	;# 
   310     0099                     	;# 
   311     009A                     	;# 
   312     009B                     	;# 
   313     009C                     	;# 
   314     009D                     	;# 
   315     009E                     	;# 
   316     009F                     	;# 
   317     0105                     	;# 
   318     0107                     	;# 
   319     0108                     	;# 
   320     0109                     	;# 
   321     010C                     	;# 
   322     010C                     	;# 
   323     010D                     	;# 
   324     010E                     	;# 
   325     010F                     	;# 
   326     0185                     	;# 
   327     0187                     	;# 
   328     0188                     	;# 
   329     0189                     	;# 
   330     018C                     	;# 
   331     018D                     	;# 
   332     0000                     	;# 
   333     0001                     	;# 
   334     0002                     	;# 
   335     0003                     	;# 
   336     0004                     	;# 
   337     0005                     	;# 
   338     0006                     	;# 
   339     0007                     	;# 
   340     0008                     	;# 
   341     0009                     	;# 
   342     000A                     	;# 
   343     000B                     	;# 
   344     000C                     	;# 
   345     000D                     	;# 
   346     000E                     	;# 
   347     000E                     	;# 
   348     000F                     	;# 
   349     0010                     	;# 
   350     0011                     	;# 
   351     0012                     	;# 
   352     0013                     	;# 
   353     0014                     	;# 
   354     0015                     	;# 
   355     0015                     	;# 
   356     0016                     	;# 
   357     0017                     	;# 
   358     0018                     	;# 
   359     0019                     	;# 
   360     001A                     	;# 
   361     001B                     	;# 
   362     001B                     	;# 
   363     001C                     	;# 
   364     001D                     	;# 
   365     001E                     	;# 
   366     001F                     	;# 
   367     0081                     	;# 
   368     0085                     	;# 
   369     0086                     	;# 
   370     0087                     	;# 
   371     0088                     	;# 
   372     0089                     	;# 
   373     008C                     	;# 
   374     008D                     	;# 
   375     008E                     	;# 
   376     008F                     	;# 
   377     0090                     	;# 
   378     0091                     	;# 
   379     0092                     	;# 
   380     0093                     	;# 
   381     0093                     	;# 
   382     0093                     	;# 
   383     0094                     	;# 
   384     0095                     	;# 
   385     0096                     	;# 
   386     0097                     	;# 
   387     0098                     	;# 
   388     0099                     	;# 
   389     009A                     	;# 
   390     009B                     	;# 
   391     009C                     	;# 
   392     009D                     	;# 
   393     009E                     	;# 
   394     009F                     	;# 
   395     0105                     	;# 
   396     0107                     	;# 
   397     0108                     	;# 
   398     0109                     	;# 
   399     010C                     	;# 
   400     010C                     	;# 
   401     010D                     	;# 
   402     010E                     	;# 
   403     010F                     	;# 
   404     0185                     	;# 
   405     0187                     	;# 
   406     0188                     	;# 
   407     0189                     	;# 
   408     018C                     	;# 
   409     018D                     	;# 
   410     0000                     	;# 
   411     0001                     	;# 
   412     0002                     	;# 
   413     0003                     	;# 
   414     0004                     	;# 
   415     0005                     	;# 
   416     0006                     	;# 
   417     0007                     	;# 
   418     0008                     	;# 
   419     0009                     	;# 
   420     000A                     	;# 
   421     000B                     	;# 
   422     000C                     	;# 
   423     000D                     	;# 
   424     000E                     	;# 
   425     000E                     	;# 
   426     000F                     	;# 
   427     0010                     	;# 
   428     0011                     	;# 
   429     0012                     	;# 
   430     0013                     	;# 
   431     0014                     	;# 
   432     0015                     	;# 
   433     0015                     	;# 
   434     0016                     	;# 
   435     0017                     	;# 
   436     0018                     	;# 
   437     0019                     	;# 
   438     001A                     	;# 
   439     001B                     	;# 
   440     001B                     	;# 
   441     001C                     	;# 
   442     001D                     	;# 
   443     001E                     	;# 
   444     001F                     	;# 
   445     0081                     	;# 
   446     0085                     	;# 
   447     0086                     	;# 
   448     0087                     	;# 
   449     0088                     	;# 
   450     0089                     	;# 
   451     008C                     	;# 
   452     008D                     	;# 
   453     008E                     	;# 
   454     008F                     	;# 
   455     0090                     	;# 
   456     0091                     	;# 
   457     0092                     	;# 
   458     0093                     	;# 
   459     0093                     	;# 
   460     0093                     	;# 
   461     0094                     	;# 
   462     0095                     	;# 
   463     0096                     	;# 
   464     0097                     	;# 
   465     0098                     	;# 
   466     0099                     	;# 
   467     009A                     	;# 
   468     009B                     	;# 
   469     009C                     	;# 
   470     009D                     	;# 
   471     009E                     	;# 
   472     009F                     	;# 
   473     0105                     	;# 
   474     0107                     	;# 
   475     0108                     	;# 
   476     0109                     	;# 
   477     010C                     	;# 
   478     010C                     	;# 
   479     010D                     	;# 
   480     010E                     	;# 
   481     010F                     	;# 
   482     0185                     	;# 
   483     0187                     	;# 
   484     0188                     	;# 
   485     0189                     	;# 
   486     018C                     	;# 
   487     018D                     	;# 
   488     0000                     	;# 
   489     0001                     	;# 
   490     0002                     	;# 
   491     0003                     	;# 
   492     0004                     	;# 
   493     0005                     	;# 
   494     0006                     	;# 
   495     0007                     	;# 
   496     0008                     	;# 
   497     0009                     	;# 
   498     000A                     	;# 
   499     000B                     	;# 
   500     000C                     	;# 
   501     000D                     	;# 
   502     000E                     	;# 
   503     000E                     	;# 
   504     000F                     	;# 
   505     0010                     	;# 
   506     0011                     	;# 
   507     0012                     	;# 
   508     0013                     	;# 
   509     0014                     	;# 
   510     0015                     	;# 
   511     0015                     	;# 
   512     0016                     	;# 
   513     0017                     	;# 
   514     0018                     	;# 
   515     0019                     	;# 
   516     001A                     	;# 
   517     001B                     	;# 
   518     001B                     	;# 
   519     001C                     	;# 
   520     001D                     	;# 
   521     001E                     	;# 
   522     001F                     	;# 
   523     0081                     	;# 
   524     0085                     	;# 
   525     0086                     	;# 
   526     0087                     	;# 
   527     0088                     	;# 
   528     0089                     	;# 
   529     008C                     	;# 
   530     008D                     	;# 
   531     008E                     	;# 
   532     008F                     	;# 
   533     0090                     	;# 
   534     0091                     	;# 
   535     0092                     	;# 
   536     0093                     	;# 
   537     0093                     	;# 
   538     0093                     	;# 
   539     0094                     	;# 
   540     0095                     	;# 
   541     0096                     	;# 
   542     0097                     	;# 
   543     0098                     	;# 
   544     0099                     	;# 
   545     009A                     	;# 
   546     009B                     	;# 
   547     009C                     	;# 
   548     009D                     	;# 
   549     009E                     	;# 
   550     009F                     	;# 
   551     0105                     	;# 
   552     0107                     	;# 
   553     0108                     	;# 
   554     0109                     	;# 
   555     010C                     	;# 
   556     010C                     	;# 
   557     010D                     	;# 
   558     010E                     	;# 
   559     010F                     	;# 
   560     0185                     	;# 
   561     0187                     	;# 
   562     0188                     	;# 
   563     0189                     	;# 
   564     018C                     	;# 
   565     018D                     	;# 
   566     0000                     	;# 
   567     0001                     	;# 
   568     0002                     	;# 
   569     0003                     	;# 
   570     0004                     	;# 
   571     0005                     	;# 
   572     0006                     	;# 
   573     0007                     	;# 
   574     0008                     	;# 
   575     0009                     	;# 
   576     000A                     	;# 
   577     000B                     	;# 
   578     000C                     	;# 
   579     000D                     	;# 
   580     000E                     	;# 
   581     000E                     	;# 
   582     000F                     	;# 
   583     0010                     	;# 
   584     0011                     	;# 
   585     0012                     	;# 
   586     0013                     	;# 
   587     0014                     	;# 
   588     0015                     	;# 
   589     0015                     	;# 
   590     0016                     	;# 
   591     0017                     	;# 
   592     0018                     	;# 
   593     0019                     	;# 
   594     001A                     	;# 
   595     001B                     	;# 
   596     001B                     	;# 
   597     001C                     	;# 
   598     001D                     	;# 
   599     001E                     	;# 
   600     001F                     	;# 
   601     0081                     	;# 
   602     0085                     	;# 
   603     0086                     	;# 
   604     0087                     	;# 
   605     0088                     	;# 
   606     0089                     	;# 
   607     008C                     	;# 
   608     008D                     	;# 
   609     008E                     	;# 
   610     008F                     	;# 
   611     0090                     	;# 
   612     0091                     	;# 
   613     0092                     	;# 
   614     0093                     	;# 
   615     0093                     	;# 
   616     0093                     	;# 
   617     0094                     	;# 
   618     0095                     	;# 
   619     0096                     	;# 
   620     0097                     	;# 
   621     0098                     	;# 
   622     0099                     	;# 
   623     009A                     	;# 
   624     009B                     	;# 
   625     009C                     	;# 
   626     009D                     	;# 
   627     009E                     	;# 
   628     009F                     	;# 
   629     0105                     	;# 
   630     0107                     	;# 
   631     0108                     	;# 
   632     0109                     	;# 
   633     010C                     	;# 
   634     010C                     	;# 
   635     010D                     	;# 
   636     010E                     	;# 
   637     010F                     	;# 
   638     0185                     	;# 
   639     0187                     	;# 
   640     0188                     	;# 
   641     0189                     	;# 
   642     018C                     	;# 
   643     018D                     	;# 
   644                           
   645                           	psect	strings
   646     0003                     __pstrings:
   647     0003                     stringtab:
   648     0003                     __stringtab:
   649                           
   650                           ;	String table - string pointers are 1 byte each
   651     0003  1BFF               	btfsc	btemp+1,7
   652     0004  280D               	ljmp	stringcode
   653     0005  1383               	bcf	3,7
   654     0006  187F               	btfsc	btemp+1,0
   655     0007  1783               	bsf	3,7
   656     0008  0800               	movf	0,w
   657     0009  0A84               	incf	4,f
   658     000A  1903               	skipnz
   659     000B  0AFF               	incf	btemp+1,f
   660     000C  0008               	return
   661     000D                     stringcode:
   662     000D                     stringdir:
   663     000D  3000               	movlw	high stringdir
   664     000E  008A               	movwf	10
   665     000F  0804               	movf	4,w
   666     0010  0A84               	incf	4,f
   667     0011  0782               	addwf	2,f
   668     0012                     __stringbase:
   669     0012  3400               	retlw	0
   670     0013                     __end_of__stringtab:
   671     0013                     __powers_:
   672     0013  3400               	retlw	0
   673     0014  3400               	retlw	0
   674     0015  3480               	retlw	128
   675     0016  343F               	retlw	63
   676     0017  3400               	retlw	0
   677     0018  3400               	retlw	0
   678     0019  3420               	retlw	32
   679     001A  3441               	retlw	65
   680     001B  3400               	retlw	0
   681     001C  3400               	retlw	0
   682     001D  34C8               	retlw	200
   683     001E  3442               	retlw	66
   684     001F  3400               	retlw	0
   685     0020  3400               	retlw	0
   686     0021  347A               	retlw	122
   687     0022  3444               	retlw	68
   688     0023  3400               	retlw	0
   689     0024  3440               	retlw	64
   690     0025  341C               	retlw	28
   691     0026  3446               	retlw	70
   692     0027  3400               	retlw	0
   693     0028  3450               	retlw	80
   694     0029  34C3               	retlw	195
   695     002A  3447               	retlw	71
   696     002B  3400               	retlw	0
   697     002C  3424               	retlw	36
   698     002D  3474               	retlw	116
   699     002E  3449               	retlw	73
   700     002F  3480               	retlw	128
   701     0030  3496               	retlw	150
   702     0031  3418               	retlw	24
   703     0032  344B               	retlw	75
   704     0033  3420               	retlw	32
   705     0034  34BC               	retlw	188
   706     0035  34BE               	retlw	190
   707     0036  344C               	retlw	76
   708     0037  3428               	retlw	40
   709     0038  346B               	retlw	107
   710     0039  346E               	retlw	110
   711     003A  344E               	retlw	78
   712     003B  34F9               	retlw	249
   713     003C  3402               	retlw	2
   714     003D  3415               	retlw	21
   715     003E  3450               	retlw	80
   716     003F  34EC               	retlw	236
   717     0040  3478               	retlw	120
   718     0041  34AD               	retlw	173
   719     0042  3460               	retlw	96
   720     0043  34CA               	retlw	202
   721     0044  34F2               	retlw	242
   722     0045  3449               	retlw	73
   723     0046  3471               	retlw	113
   724     0047                     __end_of__powers_:
   725     0047                     __npowers_:
   726     0047  3400               	retlw	0
   727     0048  3400               	retlw	0
   728     0049  3480               	retlw	128
   729     004A  343F               	retlw	63
   730     004B  34CD               	retlw	205
   731     004C  34CC               	retlw	204
   732     004D  34CC               	retlw	204
   733     004E  343D               	retlw	61
   734     004F  340A               	retlw	10
   735     0050  34D7               	retlw	215
   736     0051  3423               	retlw	35
   737     0052  343C               	retlw	60
   738     0053  346F               	retlw	111
   739     0054  3412               	retlw	18
   740     0055  3483               	retlw	131
   741     0056  343A               	retlw	58
   742     0057  3417               	retlw	23
   743     0058  34B7               	retlw	183
   744     0059  34D1               	retlw	209
   745     005A  3438               	retlw	56
   746     005B  34AC               	retlw	172
   747     005C  34C5               	retlw	197
   748     005D  3427               	retlw	39
   749     005E  3437               	retlw	55
   750     005F  34BD               	retlw	189
   751     0060  3437               	retlw	55
   752     0061  3486               	retlw	134
   753     0062  3435               	retlw	53
   754     0063  3495               	retlw	149
   755     0064  34BF               	retlw	191
   756     0065  34D6               	retlw	214
   757     0066  3433               	retlw	51
   758     0067  3477               	retlw	119
   759     0068  34CC               	retlw	204
   760     0069  342B               	retlw	43
   761     006A  3432               	retlw	50
   762     006B  345F               	retlw	95
   763     006C  3470               	retlw	112
   764     006D  3489               	retlw	137
   765     006E  3430               	retlw	48
   766     006F  34FF               	retlw	255
   767     0070  34E6               	retlw	230
   768     0071  34DB               	retlw	219
   769     0072  342E               	retlw	46
   770     0073  3408               	retlw	8
   771     0074  34E5               	retlw	229
   772     0075  343C               	retlw	60
   773     0076  341E               	retlw	30
   774     0077  3460               	retlw	96
   775     0078  3442               	retlw	66
   776     0079  34A2               	retlw	162
   777     007A  340D               	retlw	13
   778     007B                     __end_of__npowers_:
   779     007B                     _dpowers:
   780     007B  3401               	retlw	1
   781     007C  3400               	retlw	0
   782     007D  3400               	retlw	0
   783     007E  3400               	retlw	0
   784     007F  340A               	retlw	10
   785     0080  3400               	retlw	0
   786     0081  3400               	retlw	0
   787     0082  3400               	retlw	0
   788     0083  3464               	retlw	100
   789     0084  3400               	retlw	0
   790     0085  3400               	retlw	0
   791     0086  3400               	retlw	0
   792     0087  34E8               	retlw	232
   793     0088  3403               	retlw	3
   794     0089  3400               	retlw	0
   795     008A  3400               	retlw	0
   796     008B  3410               	retlw	16
   797     008C  3427               	retlw	39
   798     008D  3400               	retlw	0
   799     008E  3400               	retlw	0
   800     008F  34A0               	retlw	160
   801     0090  3486               	retlw	134
   802     0091  3401               	retlw	1
   803     0092  3400               	retlw	0
   804     0093  3440               	retlw	64
   805     0094  3442               	retlw	66
   806     0095  340F               	retlw	15
   807     0096  3400               	retlw	0
   808     0097  3480               	retlw	128
   809     0098  3496               	retlw	150
   810     0099  3498               	retlw	152
   811     009A  3400               	retlw	0
   812     009B  3400               	retlw	0
   813     009C  34E1               	retlw	225
   814     009D  34F5               	retlw	245
   815     009E  3405               	retlw	5
   816     009F  3400               	retlw	0
   817     00A0  34CA               	retlw	202
   818     00A1  349A               	retlw	154
   819     00A2  343B               	retlw	59
   820     00A3                     __end_of_dpowers:
   821     0013                     _SSPBUF	set	19
   822     0014                     _SSPCON	set	20
   823     0008                     _PORTDbits	set	8
   824     0006                     _PORTB	set	6
   825     0008                     _PORTD	set	8
   826     0006                     _PORTBbits	set	6
   827     0005                     _PORTA	set	5
   828     0043                     _RD3	set	67
   829     0047                     _RD7	set	71
   830     0046                     _RD6	set	70
   831     0045                     _RD5	set	69
   832     0044                     _RD4	set	68
   833     0091                     _SSPCON2bits	set	145
   834     0087                     _TRISCbits	set	135
   835     0094                     _SSPSTAT	set	148
   836     0093                     _SSPADD	set	147
   837     0091                     _SSPCON2	set	145
   838     008F                     _OSCCONbits	set	143
   839     0081                     _OPTION_REGbits	set	129
   840     0095                     _WPUB	set	149
   841     0086                     _TRISB	set	134
   842     0088                     _TRISD	set	136
   843     0085                     _TRISA	set	133
   844     0189                     _ANSELH	set	393
   845     0188                     _ANSEL	set	392
   846     00A3                     STR_2:
   847     00A3  3420               	retlw	32	;' '
   848     00A4  3420               	retlw	32	;' '
   849     00A5  3420               	retlw	32	;' '
   850     00A6  3420               	retlw	32	;' '
   851     00A7  3456               	retlw	86	;'V'
   852     00A8  3400               	retlw	0
   853     00A9                     STR_1:
   854     00A9  3453               	retlw	83	;'S'
   855     00AA  3431               	retlw	49	;'1'
   856     00AB  343A               	retlw	58	;':'
   857     00AC  3420               	retlw	32	;' '
   858     00AD  3400               	retlw	0
   859     00AE                     STR_4:
   860     00AE  342F               	retlw	47	;'/'
   861     00AF  3420               	retlw	32	;' '
   862     00B0  3420               	retlw	32	;' '
   863     00B1  342F               	retlw	47	;'/'
   864     00B2  3400               	retlw	0
   865     00B3                     STR_3:
   866     00B3  343A               	retlw	58	;':'
   867     00B4  3420               	retlw	32	;' '
   868     00B5  3420               	retlw	32	;' '
   869     00B6  343A               	retlw	58	;':'
   870     00B7  3400               	retlw	0
   871     00B8                     STR_5:
   872     00B8  3425               	retlw	37	;'%'
   873     00B9  342E               	retlw	46	;'.'
   874     00BA  3432               	retlw	50	;'2'
   875     00BB  3466               	retlw	102	;'f'
   876     00BC  3400               	retlw	0
   877                           
   878                           	psect	cinit
   879     07F5                     start_initialization:	
   880                           ; #config settings
   881                           
   882     07F5                     __initialization:
   883                           
   884                           ; Clear objects allocated to BANK1
   885     07F5  1383               	bcf	3,7	;select IRP bank0
   886     07F6  30C3               	movlw	low __pbssBANK1
   887     07F7  0084               	movwf	4
   888     07F8  30DA               	movlw	low (__pbssBANK1+23)
   889     07F9  160A  158A  22A2   	fcall	clear_ram0
   890     07FC                     end_of_initialization:	
   891                           ;End of C runtime variable initialization code
   892                           
   893     07FC                     __end_of__initialization:
   894     07FC  0183               	clrf	3
   895     07FD  120A  158A  29C3   	ljmp	_main	;jump to C main() function
   896                           
   897                           	psect	bssBANK1
   898     00C3                     __pbssBANK1:
   899     00C3                     _conver:
   900     00C3                     	ds	4
   901     00C7                     _modo:
   902     00C7                     	ds	1
   903     00C8                     _year1:
   904     00C8                     	ds	1
   905     00C9                     _year:
   906     00C9                     	ds	1
   907     00CA                     _mes1:
   908     00CA                     	ds	1
   909     00CB                     _mes:
   910     00CB                     	ds	1
   911     00CC                     _fecha1:
   912     00CC                     	ds	1
   913     00CD                     _fecha:
   914     00CD                     	ds	1
   915     00CE                     _hora:
   916     00CE                     	ds	1
   917     00CF                     _hor:
   918     00CF                     	ds	1
   919     00D0                     _minuto:
   920     00D0                     	ds	1
   921     00D1                     _min:
   922     00D1                     	ds	1
   923     00D2                     _segundo:
   924     00D2                     	ds	1
   925     00D3                     _sec:
   926     00D3                     	ds	1
   927     00D4                     _decena:
   928     00D4                     	ds	1
   929     00D5                     _unidad:
   930     00D5                     	ds	1
   931     00D6                     _lecADC:
   932     00D6                     	ds	1
   933     00D7                     _valADC:
   934     00D7                     	ds	3
   935                           
   936                           	psect	clrtext
   937     1AA2                     clear_ram0:	
   938                           ;	Called with FSR containing the base address, and
   939                           ;	W with the last address+1
   940                           
   941     1AA2  0064               	clrwdt	;clear the watchdog before getting into this loop
   942     1AA3                     clrloop0:
   943     1AA3  0180               	clrf	0	;clear RAM location pointed to by FSR
   944     1AA4  0A84               	incf	4,f	;increment pointer
   945     1AA5  0604               	xorwf	4,w	;XOR with final address
   946     1AA6  1903               	btfsc	3,2	;have we reached the end yet?
   947     1AA7  3400               	retlw	0	;all done for this memory range, return
   948     1AA8  0604               	xorwf	4,w	;XOR again to restore value
   949     1AA9  2AA3               	goto	clrloop0	;do the next byte
   950                           
   951                           	psect	cstackBANK1
   952     00A0                     __pcstackBANK1:
   953     00A0                     ?_sprintf:
   954     00A0                     sprintf@f:	
   955                           ; 2 bytes @ 0x0
   956                           
   957                           
   958                           ; 1 bytes @ 0x0
   959     00A0                     	ds	5
   960     00A5                     ??_sprintf:
   961                           
   962                           ; 1 bytes @ 0x5
   963     00A5                     	ds	5
   964     00AA                     _sprintf$1118:
   965                           
   966                           ; 4 bytes @ 0xA
   967     00AA                     	ds	4
   968     00AE                     sprintf@ap:
   969                           
   970                           ; 1 bytes @ 0xE
   971     00AE                     	ds	1
   972     00AF                     sprintf@flag:
   973                           
   974                           ; 2 bytes @ 0xF
   975     00AF                     	ds	2
   976     00B1                     sprintf@val:
   977                           
   978                           ; 4 bytes @ 0x11
   979     00B1                     	ds	4
   980     00B5                     sprintf@eexp:
   981                           
   982                           ; 2 bytes @ 0x15
   983     00B5                     	ds	2
   984     00B7                     sprintf@tmpval:
   985                           
   986                           ; 4 bytes @ 0x17
   987     00B7                     	ds	4
   988     00BB                     sprintf@sp:
   989                           
   990                           ; 1 bytes @ 0x1B
   991     00BB                     	ds	1
   992     00BC                     sprintf@prec:
   993                           
   994                           ; 2 bytes @ 0x1C
   995     00BC                     	ds	2
   996     00BE                     sprintf@fval:
   997                           
   998                           ; 4 bytes @ 0x1E
   999     00BE                     	ds	4
  1000     00C2                     sprintf@c:
  1001                           
  1002                           ; 1 bytes @ 0x22
  1003     00C2                     	ds	1
  1004                           
  1005                           	psect	cstackCOMMON
  1006     0070                     __pcstackCOMMON:
  1007     0070                     ?_isdigit:
  1008     0070                     ?___fleq:	
  1009                           ; 1 bit 
  1010                           
  1011     0070                     ?___flge:	
  1012                           ; 1 bit 
  1013                           
  1014     0070                     ?_setupINTOSC:	
  1015                           ; 1 bit 
  1016                           
  1017     0070                     ??_setupINTOSC:	
  1018                           ; 1 bytes @ 0x0
  1019                           
  1020     0070                     ?_portsetup:	
  1021                           ; 1 bytes @ 0x0
  1022                           
  1023     0070                     ?_Lcd_Init:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026     0070                     ?_Lcd_Clear:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029     0070                     ?_I2C_Master_Start:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032     0070                     ??_I2C_Master_Start:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035     0070                     ?_I2C_Master_Write:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038     0070                     ?_I2C_Master_Stop:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041     0070                     ??_I2C_Master_Stop:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044     0070                     ?_leer_x:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047     0070                     ?_desconvertir:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050     0070                     ?_inttochar:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053     0070                     ??_inttochar:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056     0070                     ?_Lcd_Write_Char:	
  1057                           ; 1 bytes @ 0x0
  1058                           
  1059     0070                     ??_isdigit:	
  1060                           ; 1 bytes @ 0x0
  1061                           
  1062     0070                     ?_main:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065     0070                     ?_Lcd_Port:	
  1066                           ; 1 bytes @ 0x0
  1067                           
  1068     0070                     ??_Lcd_Port:	
  1069                           ; 1 bytes @ 0x0
  1070                           
  1071     0070                     ?_Lcd_Cmd:	
  1072                           ; 1 bytes @ 0x0
  1073                           
  1074     0070                     ?_I2C_Master_Wait:	
  1075                           ; 1 bytes @ 0x0
  1076                           
  1077     0070                     ??_I2C_Master_Wait:	
  1078                           ; 1 bytes @ 0x0
  1079                           
  1080     0070                     ?_I2C_Master_RepeatedStart:	
  1081                           ; 1 bytes @ 0x0
  1082                           
  1083     0070                     ??_I2C_Master_RepeatedStart:	
  1084                           ; 1 bytes @ 0x0
  1085                           
  1086     0070                     ?___bmul:	
  1087                           ; 1 bytes @ 0x0
  1088                           
  1089     0070                     ?___lbmod:	
  1090                           ; 1 bytes @ 0x0
  1091                           
  1092     0070                     ?_I2C_Master_Read:	
  1093                           ; 1 bytes @ 0x0
  1094                           
  1095     0070                     ?__Umul8_16:	
  1096                           ; 2 bytes @ 0x0
  1097                           
  1098     0070                     ?___wmul:	
  1099                           ; 2 bytes @ 0x0
  1100                           
  1101     0070                     ?___awmod:	
  1102                           ; 2 bytes @ 0x0
  1103                           
  1104     0070                     ?__tdiv_to_l_:	
  1105                           ; 2 bytes @ 0x0
  1106                           
  1107     0070                     ?__div_to_l_:	
  1108                           ; 4 bytes @ 0x0
  1109                           
  1110     0070                     ?___lldiv:	
  1111                           ; 4 bytes @ 0x0
  1112                           
  1113     0070                     ?___flneg:	
  1114                           ; 4 bytes @ 0x0
  1115                           
  1116     0070                     ?___llmod:	
  1117                           ; 4 bytes @ 0x0
  1118                           
  1119     0070                     ?___xxtofl:	
  1120                           ; 4 bytes @ 0x0
  1121                           
  1122     0070                     Lcd_Port@a:	
  1123                           ; 4 bytes @ 0x0
  1124                           
  1125     0070                     inttochar@num:	
  1126                           ; 1 bytes @ 0x0
  1127                           
  1128     0070                     setupINTOSC@IRCF:	
  1129                           ; 1 bytes @ 0x0
  1130                           
  1131     0070                     ___bmul@multiplicand:	
  1132                           ; 1 bytes @ 0x0
  1133                           
  1134     0070                     ___lbmod@divisor:	
  1135                           ; 1 bytes @ 0x0
  1136                           
  1137     0070                     __Umul8_16@multiplicand:	
  1138                           ; 1 bytes @ 0x0
  1139                           
  1140     0070                     _isdigit$939:	
  1141                           ; 1 bytes @ 0x0
  1142                           
  1143     0070                     I2C_Master_Write@d:	
  1144                           ; 1 bytes @ 0x0
  1145                           
  1146     0070                     I2C_Master_Read@a:	
  1147                           ; 2 bytes @ 0x0
  1148                           
  1149     0070                     ___wmul@multiplier:	
  1150                           ; 2 bytes @ 0x0
  1151                           
  1152     0070                     ___awmod@divisor:	
  1153                           ; 2 bytes @ 0x0
  1154                           
  1155     0070                     ___lldiv@divisor:	
  1156                           ; 2 bytes @ 0x0
  1157                           
  1158     0070                     __div_to_l_@f1:	
  1159                           ; 4 bytes @ 0x0
  1160                           
  1161     0070                     ___fleq@ff1:	
  1162                           ; 4 bytes @ 0x0
  1163                           
  1164     0070                     ___flge@ff1:	
  1165                           ; 4 bytes @ 0x0
  1166                           
  1167     0070                     ___flneg@f1:	
  1168                           ; 4 bytes @ 0x0
  1169                           
  1170     0070                     __tdiv_to_l_@f1:	
  1171                           ; 4 bytes @ 0x0
  1172                           
  1173     0070                     ___llmod@divisor:	
  1174                           ; 4 bytes @ 0x0
  1175                           
  1176     0070                     ___xxtofl@val:	
  1177                           ; 4 bytes @ 0x0
  1178                           
  1179                           
  1180                           ; 4 bytes @ 0x0
  1181     0070                     	ds	1
  1182     0071                     ??_Lcd_Write_Char:
  1183     0071                     ??_Lcd_Cmd:	
  1184                           ; 1 bytes @ 0x1
  1185                           
  1186     0071                     ??___bmul:	
  1187                           ; 1 bytes @ 0x1
  1188                           
  1189     0071                     ??___lbmod:	
  1190                           ; 1 bytes @ 0x1
  1191                           
  1192     0071                     isdigit@c:	
  1193                           ; 1 bytes @ 0x1
  1194                           
  1195                           
  1196                           ; 1 bytes @ 0x1
  1197     0071                     	ds	1
  1198     0072                     ?_enviar_x:
  1199     0072                     ??_I2C_Master_Write:	
  1200                           ; 1 bytes @ 0x2
  1201                           
  1202     0072                     ??_I2C_Master_Read:	
  1203                           ; 1 bytes @ 0x2
  1204                           
  1205     0072                     ??__Umul8_16:	
  1206                           ; 1 bytes @ 0x2
  1207                           
  1208     0072                     Lcd_Write_Char@temp:	
  1209                           ; 1 bytes @ 0x2
  1210                           
  1211     0072                     enviar_x@val2:	
  1212                           ; 1 bytes @ 0x2
  1213                           
  1214     0072                     ___bmul@product:	
  1215                           ; 1 bytes @ 0x2
  1216                           
  1217     0072                     ___wmul@multiplicand:	
  1218                           ; 1 bytes @ 0x2
  1219                           
  1220     0072                     ___awmod@dividend:	
  1221                           ; 2 bytes @ 0x2
  1222                           
  1223                           
  1224                           ; 2 bytes @ 0x2
  1225     0072                     	ds	1
  1226     0073                     Lcd_Cmd@a:
  1227     0073                     Lcd_Write_Char@y:	
  1228                           ; 1 bytes @ 0x3
  1229                           
  1230     0073                     enviar_x@val3:	
  1231                           ; 1 bytes @ 0x3
  1232                           
  1233     0073                     ___bmul@multiplier:	
  1234                           ; 1 bytes @ 0x3
  1235                           
  1236     0073                     ___lbmod@dividend:	
  1237                           ; 1 bytes @ 0x3
  1238                           
  1239                           
  1240                           ; 1 bytes @ 0x3
  1241     0073                     	ds	1
  1242     0074                     ??_Lcd_Init:
  1243     0074                     ??_Lcd_Clear:	
  1244                           ; 1 bytes @ 0x4
  1245                           
  1246     0074                     ?_Lcd_Set_Cursor:	
  1247                           ; 1 bytes @ 0x4
  1248                           
  1249     0074                     ?_convertir:	
  1250                           ; 1 bytes @ 0x4
  1251                           
  1252     0074                     ??___wmul:	
  1253                           ; 1 bytes @ 0x4
  1254                           
  1255     0074                     ??___awmod:	
  1256                           ; 1 bytes @ 0x4
  1257                           
  1258     0074                     ??___flneg:	
  1259                           ; 1 bytes @ 0x4
  1260                           
  1261     0074                     ??___xxtofl:	
  1262                           ; 1 bytes @ 0x4
  1263                           
  1264     0074                     Lcd_Set_Cursor@b:	
  1265                           ; 1 bytes @ 0x4
  1266                           
  1267     0074                     Lcd_Write_Char@a:	
  1268                           ; 1 bytes @ 0x4
  1269                           
  1270     0074                     convertir@tipo:	
  1271                           ; 1 bytes @ 0x4
  1272                           
  1273     0074                     enviar_x@val4:	
  1274                           ; 1 bytes @ 0x4
  1275                           
  1276     0074                     ___lbmod@counter:	
  1277                           ; 1 bytes @ 0x4
  1278                           
  1279     0074                     I2C_Master_Read@temp:	
  1280                           ; 1 bytes @ 0x4
  1281                           
  1282     0074                     ___wmul@product:	
  1283                           ; 2 bytes @ 0x4
  1284                           
  1285     0074                     __Umul8_16@product:	
  1286                           ; 2 bytes @ 0x4
  1287                           
  1288     0074                     ___lldiv@dividend:	
  1289                           ; 2 bytes @ 0x4
  1290                           
  1291     0074                     __div_to_l_@f2:	
  1292                           ; 4 bytes @ 0x4
  1293                           
  1294     0074                     ___fleq@ff2:	
  1295                           ; 4 bytes @ 0x4
  1296                           
  1297     0074                     ___flge@ff2:	
  1298                           ; 4 bytes @ 0x4
  1299                           
  1300     0074                     __tdiv_to_l_@f2:	
  1301                           ; 4 bytes @ 0x4
  1302                           
  1303     0074                     ___llmod@dividend:	
  1304                           ; 4 bytes @ 0x4
  1305                           
  1306                           
  1307                           ; 4 bytes @ 0x4
  1308     0074                     	ds	1
  1309     0075                     ??_Lcd_Set_Cursor:
  1310     0075                     ?_Lcd_Write_String:	
  1311                           ; 1 bytes @ 0x5
  1312                           
  1313     0075                     ??_convertir:	
  1314                           ; 1 bytes @ 0x5
  1315                           
  1316     0075                     enviar_x@val5:	
  1317                           ; 1 bytes @ 0x5
  1318                           
  1319     0075                     ___awmod@counter:	
  1320                           ; 1 bytes @ 0x5
  1321                           
  1322     0075                     ___lbmod@rem:	
  1323                           ; 1 bytes @ 0x5
  1324                           
  1325     0075                     Lcd_Write_String@a:	
  1326                           ; 1 bytes @ 0x5
  1327                           
  1328                           
  1329                           ; 2 bytes @ 0x5
  1330     0075                     	ds	1
  1331     0076                     ??_enviar_x:
  1332     0076                     ?___lbdiv:	
  1333                           ; 1 bytes @ 0x6
  1334                           
  1335     0076                     Lcd_Set_Cursor@a:	
  1336                           ; 1 bytes @ 0x6
  1337                           
  1338     0076                     convertir@conversion:	
  1339                           ; 1 bytes @ 0x6
  1340                           
  1341     0076                     ___awmod@sign:	
  1342                           ; 1 bytes @ 0x6
  1343                           
  1344     0076                     ___lbdiv@divisor:	
  1345                           ; 1 bytes @ 0x6
  1346                           
  1347     0076                     __Umul8_16@word_mpld:	
  1348                           ; 1 bytes @ 0x6
  1349                           
  1350                           
  1351                           ; 2 bytes @ 0x6
  1352     0076                     	ds	1
  1353     0077                     ??_Lcd_Write_String:
  1354     0077                     ??___lbdiv:	
  1355                           ; 1 bytes @ 0x7
  1356                           
  1357     0077                     ?___awdiv:	
  1358                           ; 1 bytes @ 0x7
  1359                           
  1360     0077                     Lcd_Set_Cursor@z:	
  1361                           ; 2 bytes @ 0x7
  1362                           
  1363     0077                     convertir@unidad:	
  1364                           ; 1 bytes @ 0x7
  1365                           
  1366     0077                     ___awdiv@divisor:	
  1367                           ; 1 bytes @ 0x7
  1368                           
  1369                           
  1370                           ; 2 bytes @ 0x7
  1371     0077                     	ds	1
  1372     0078                     ??__tdiv_to_l_:
  1373     0078                     ??__div_to_l_:	
  1374                           ; 1 bytes @ 0x8
  1375                           
  1376     0078                     ??___lldiv:	
  1377                           ; 1 bytes @ 0x8
  1378                           
  1379     0078                     ??___fleq:	
  1380                           ; 1 bytes @ 0x8
  1381                           
  1382     0078                     ??___flge:	
  1383                           ; 1 bytes @ 0x8
  1384                           
  1385     0078                     ??___llmod:	
  1386                           ; 1 bytes @ 0x8
  1387                           
  1388     0078                     Lcd_Set_Cursor@y:	
  1389                           ; 1 bytes @ 0x8
  1390                           
  1391     0078                     convertir@decena:	
  1392                           ; 1 bytes @ 0x8
  1393                           
  1394     0078                     enviar_x@val1:	
  1395                           ; 1 bytes @ 0x8
  1396                           
  1397     0078                     ___lbdiv@dividend:	
  1398                           ; 1 bytes @ 0x8
  1399                           
  1400     0078                     __Umul8_16@multiplier:	
  1401                           ; 1 bytes @ 0x8
  1402                           
  1403     0078                     ___xxtofl@sign:	
  1404                           ; 1 bytes @ 0x8
  1405                           
  1406                           
  1407                           ; 1 bytes @ 0x8
  1408     0078                     	ds	1
  1409     0079                     Lcd_Set_Cursor@temp:
  1410     0079                     convertir@valor:	
  1411                           ; 1 bytes @ 0x9
  1412                           
  1413     0079                     ___lbdiv@counter:	
  1414                           ; 1 bytes @ 0x9
  1415                           
  1416     0079                     ___llmod@counter:	
  1417                           ; 1 bytes @ 0x9
  1418                           
  1419     0079                     ___xxtofl@exp:	
  1420                           ; 1 bytes @ 0x9
  1421                           
  1422     0079                     ___awdiv@dividend:	
  1423                           ; 1 bytes @ 0x9
  1424                           
  1425     0079                     ___lldiv@quotient:	
  1426                           ; 2 bytes @ 0x9
  1427                           
  1428                           
  1429                           ; 4 bytes @ 0x9
  1430     0079                     	ds	1
  1431     007A                     ??_leer_x:
  1432     007A                     ___lbdiv@quotient:	
  1433                           ; 1 bytes @ 0xA
  1434                           
  1435     007A                     Lcd_Write_String@i:	
  1436                           ; 1 bytes @ 0xA
  1437                           
  1438     007A                     ___xxtofl@arg:	
  1439                           ; 2 bytes @ 0xA
  1440                           
  1441                           
  1442                           ; 4 bytes @ 0xA
  1443     007A                     	ds	1
  1444     007B                     ??_desconvertir:
  1445     007B                     ?_descomponer:	
  1446                           ; 1 bytes @ 0xB
  1447                           
  1448     007B                     ??___awdiv:	
  1449                           ; 1 bytes @ 0xB
  1450                           
  1451     007B                     descomponer@pos:	
  1452                           ; 1 bytes @ 0xB
  1453                           
  1454                           
  1455                           ; 2 bytes @ 0xB
  1456     007B                     	ds	1
  1457     007C                     leer_x@address:
  1458                           
  1459                           ; 1 bytes @ 0xC
  1460     007C                     	ds	1
  1461     007D                     descomponer@num:
  1462     007D                     leer_x@valor:	
  1463                           ; 1 bytes @ 0xD
  1464                           
  1465     007D                     ___lldiv@counter:	
  1466                           ; 1 bytes @ 0xD
  1467                           
  1468                           
  1469                           ; 1 bytes @ 0xD
  1470     007D                     	ds	1
  1471     007E                     ??_portsetup:
  1472     007E                     ??_Escribir_dato:	
  1473                           ; 1 bytes @ 0xE
  1474                           
  1475     007E                     ??_descomponer:	
  1476                           ; 1 bytes @ 0xE
  1477                           
  1478     007E                     ??___flsub:	
  1479                           ; 1 bytes @ 0xE
  1480                           
  1481                           
  1482                           	psect	cstackBANK0
  1483     0020                     __pcstackBANK0:	
  1484                           ; 1 bytes @ 0xE
  1485                           
  1486     0020                     ?_I2C_Master_Init:
  1487     0020                     descomponer@cent:	
  1488                           ; 1 bytes @ 0x0
  1489                           
  1490     0020                     desconvertir@unidad:	
  1491                           ; 1 bytes @ 0x0
  1492                           
  1493     0020                     ___awdiv@counter:	
  1494                           ; 1 bytes @ 0x0
  1495                           
  1496     0020                     I2C_Master_Init@c:	
  1497                           ; 1 bytes @ 0x0
  1498                           
  1499     0020                     __div_to_l_@quot:	
  1500                           ; 4 bytes @ 0x0
  1501                           
  1502     0020                     __tdiv_to_l_@quot:	
  1503                           ; 4 bytes @ 0x0
  1504                           
  1505                           
  1506                           ; 4 bytes @ 0x0
  1507     0020                     	ds	1
  1508     0021                     descomponer@uni:
  1509     0021                     desconvertir@valor:	
  1510                           ; 1 bytes @ 0x1
  1511                           
  1512     0021                     ___awdiv@sign:	
  1513                           ; 1 bytes @ 0x1
  1514                           
  1515                           
  1516                           ; 1 bytes @ 0x1
  1517     0021                     	ds	1
  1518     0022                     descomponer@dec:
  1519     0022                     desconvertir@decena:	
  1520                           ; 1 bytes @ 0x2
  1521                           
  1522     0022                     ___awdiv@quotient:	
  1523                           ; 1 bytes @ 0x2
  1524                           
  1525                           
  1526                           ; 2 bytes @ 0x2
  1527     0022                     	ds	1
  1528     0023                     ?_Escribir_dato:
  1529     0023                     Escribir_dato@posx:	
  1530                           ; 1 bytes @ 0x3
  1531                           
  1532                           
  1533                           ; 1 bytes @ 0x3
  1534     0023                     	ds	1
  1535     0024                     ??_I2C_Master_Init:
  1536     0024                     ?___flmul:	
  1537                           ; 1 bytes @ 0x4
  1538                           
  1539     0024                     Escribir_dato@posy:	
  1540                           ; 4 bytes @ 0x4
  1541                           
  1542     0024                     __div_to_l_@cntr:	
  1543                           ; 1 bytes @ 0x4
  1544                           
  1545     0024                     __tdiv_to_l_@cntr:	
  1546                           ; 1 bytes @ 0x4
  1547                           
  1548     0024                     ___flmul@b:	
  1549                           ; 1 bytes @ 0x4
  1550                           
  1551                           
  1552                           ; 4 bytes @ 0x4
  1553     0024                     	ds	1
  1554     0025                     Escribir_dato@dato:
  1555     0025                     __div_to_l_@exp1:	
  1556                           ; 1 bytes @ 0x5
  1557                           
  1558     0025                     __tdiv_to_l_@exp1:	
  1559                           ; 1 bytes @ 0x5
  1560                           
  1561                           
  1562                           ; 1 bytes @ 0x5
  1563     0025                     	ds	3
  1564     0028                     ___flmul@a:
  1565                           
  1566                           ; 4 bytes @ 0x8
  1567     0028                     	ds	4
  1568     002C                     ??___flmul:
  1569                           
  1570                           ; 1 bytes @ 0xC
  1571     002C                     	ds	5
  1572     0031                     ___flmul@sign:
  1573                           
  1574                           ; 1 bytes @ 0x11
  1575     0031                     	ds	1
  1576     0032                     ___flmul@aexp:
  1577                           
  1578                           ; 1 bytes @ 0x12
  1579     0032                     	ds	1
  1580     0033                     ___flmul@grs:
  1581                           
  1582                           ; 4 bytes @ 0x13
  1583     0033                     	ds	4
  1584     0037                     ___flmul@bexp:
  1585                           
  1586                           ; 1 bytes @ 0x17
  1587     0037                     	ds	1
  1588     0038                     ___flmul@prod:
  1589                           
  1590                           ; 4 bytes @ 0x18
  1591     0038                     	ds	4
  1592     003C                     ___flmul@temp:
  1593                           
  1594                           ; 2 bytes @ 0x1C
  1595     003C                     	ds	2
  1596     003E                     ?_fround:
  1597     003E                     ?_scale:	
  1598                           ; 4 bytes @ 0x1E
  1599                           
  1600     003E                     ?___fldiv:	
  1601                           ; 4 bytes @ 0x1E
  1602                           
  1603     003E                     ___fldiv@a:	
  1604                           ; 4 bytes @ 0x1E
  1605                           
  1606                           
  1607                           ; 4 bytes @ 0x1E
  1608     003E                     	ds	4
  1609     0042                     ??_fround:
  1610     0042                     ??_scale:	
  1611                           ; 1 bytes @ 0x22
  1612                           
  1613     0042                     ___fldiv@b:	
  1614                           ; 1 bytes @ 0x22
  1615                           
  1616                           
  1617                           ; 4 bytes @ 0x22
  1618     0042                     	ds	4
  1619     0046                     ??___fldiv:
  1620                           
  1621                           ; 1 bytes @ 0x26
  1622     0046                     	ds	1
  1623     0047                     _fround$1116:
  1624                           
  1625                           ; 4 bytes @ 0x27
  1626     0047                     	ds	4
  1627     004B                     ___fldiv@rem:
  1628     004B                     _fround$1115:	
  1629                           ; 4 bytes @ 0x2B
  1630                           
  1631                           
  1632                           ; 4 bytes @ 0x2B
  1633     004B                     	ds	1
  1634     004C                     _scale$1117:
  1635                           
  1636                           ; 4 bytes @ 0x2C
  1637     004C                     	ds	3
  1638     004F                     fround@prec:
  1639     004F                     ___fldiv@sign:	
  1640                           ; 1 bytes @ 0x2F
  1641                           
  1642                           
  1643                           ; 1 bytes @ 0x2F
  1644     004F                     	ds	1
  1645     0050                     ?___fladd:
  1646     0050                     scale@scl:	
  1647                           ; 4 bytes @ 0x30
  1648                           
  1649     0050                     ___fldiv@new_exp:	
  1650                           ; 1 bytes @ 0x30
  1651                           
  1652     0050                     ___fladd@b:	
  1653                           ; 2 bytes @ 0x30
  1654                           
  1655                           
  1656                           ; 4 bytes @ 0x30
  1657     0050                     	ds	1
  1658     0051                     ?___fltol:
  1659     0051                     ___fltol@f1:	
  1660                           ; 4 bytes @ 0x31
  1661                           
  1662                           
  1663                           ; 4 bytes @ 0x31
  1664     0051                     	ds	1
  1665     0052                     ___fldiv@grs:
  1666                           
  1667                           ; 4 bytes @ 0x32
  1668     0052                     	ds	2
  1669     0054                     ___fladd@a:
  1670                           
  1671                           ; 4 bytes @ 0x34
  1672     0054                     	ds	1
  1673     0055                     ??___fltol:
  1674                           
  1675                           ; 1 bytes @ 0x35
  1676     0055                     	ds	1
  1677     0056                     ___fldiv@bexp:
  1678                           
  1679                           ; 1 bytes @ 0x36
  1680     0056                     	ds	1
  1681     0057                     ___fldiv@aexp:
  1682                           
  1683                           ; 1 bytes @ 0x37
  1684     0057                     	ds	1
  1685     0058                     ??___fladd:
  1686                           
  1687                           ; 1 bytes @ 0x38
  1688     0058                     	ds	1
  1689     0059                     ___fltol@sign1:
  1690                           
  1691                           ; 1 bytes @ 0x39
  1692     0059                     	ds	1
  1693     005A                     ___fltol@exp1:
  1694                           
  1695                           ; 1 bytes @ 0x3A
  1696     005A                     	ds	6
  1697     0060                     ___fladd@signs:
  1698                           
  1699                           ; 1 bytes @ 0x40
  1700     0060                     	ds	1
  1701     0061                     ___fladd@aexp:
  1702                           
  1703                           ; 1 bytes @ 0x41
  1704     0061                     	ds	1
  1705     0062                     ___fladd@bexp:
  1706                           
  1707                           ; 1 bytes @ 0x42
  1708     0062                     	ds	1
  1709     0063                     ___fladd@grs:
  1710                           
  1711                           ; 1 bytes @ 0x43
  1712     0063                     	ds	1
  1713     0064                     ?___flsub:
  1714     0064                     ___flsub@a:	
  1715                           ; 4 bytes @ 0x44
  1716                           
  1717                           
  1718                           ; 4 bytes @ 0x44
  1719     0064                     	ds	4
  1720     0068                     ___flsub@b:
  1721                           
  1722                           ; 4 bytes @ 0x48
  1723     0068                     	ds	4
  1724     006C                     ??_main:
  1725                           
  1726                           ; 1 bytes @ 0x4C
  1727     006C                     	ds	4
  1728                           
  1729                           	psect	maintext
  1730     09C3                     __pmaintext:	
  1731 ;;
  1732 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1733 ;;
  1734 ;; *************** function _main *****************
  1735 ;; Defined at:
  1736 ;;		line 66 in file "main.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;		None
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;		None
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  1    wreg      void 
  1743 ;; Registers used:
  1744 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1745 ;; Tracked objects:
  1746 ;;		On entry : B00/0
  1747 ;;		On exit  : 300/100
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1750 ;;      Params:         0       0       0       0       0
  1751 ;;      Locals:         0       0       0       0       0
  1752 ;;      Temps:          0       4       0       0       0
  1753 ;;      Totals:         0       4       0       0       0
  1754 ;;Total ram usage:        4 bytes
  1755 ;; Hardware stack levels required when called: 4
  1756 ;; This function calls:
  1757 ;;		_Escribir_dato
  1758 ;;		_I2C_Master_Read
  1759 ;;		_I2C_Master_Start
  1760 ;;		_I2C_Master_Stop
  1761 ;;		_I2C_Master_Write
  1762 ;;		_Lcd_Clear
  1763 ;;		_Lcd_Init
  1764 ;;		_Lcd_Set_Cursor
  1765 ;;		_Lcd_Write_String
  1766 ;;		___fldiv
  1767 ;;		___flmul
  1768 ;;		___xxtofl
  1769 ;;		_desconvertir
  1770 ;;		_enviar_x
  1771 ;;		_leer_x
  1772 ;;		_portsetup
  1773 ;;		_setupINTOSC
  1774 ;;		_sprintf
  1775 ;; This function is called by:
  1776 ;;		Startup code after reset
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780     09C3                     _main:	
  1781                           ;psect for function _main
  1782                           
  1783                           
  1784                           ;main.c: 67:     setupINTOSC(7);
  1785                           
  1786                           ;incstack = 0
  1787                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1788     09C3  3007               	movlw	7
  1789     09C4  160A  118A  2001  120A  158A  	fcall	_setupINTOSC
  1790                           
  1791                           ;main.c: 68:     portsetup();
  1792     09C9  160A  158A  2390  120A  158A  	fcall	_portsetup
  1793                           
  1794                           ;main.c: 70:     Lcd_Init();
  1795     09CE  160A  158A  2747  120A  158A  	fcall	_Lcd_Init
  1796                           
  1797                           ;main.c: 71:     Lcd_Clear();
  1798     09D3  120A  158A  2001  120A  158A  	fcall	_Lcd_Clear
  1799                           
  1800                           ;main.c: 72:     Lcd_Set_Cursor(1,2);
  1801     09D8  3002               	movlw	2
  1802     09D9  00F4               	movwf	Lcd_Set_Cursor@b
  1803     09DA  3001               	movlw	1
  1804     09DB  160A  158A  253F  120A  158A  	fcall	_Lcd_Set_Cursor
  1805                           
  1806                           ;main.c: 73:     Lcd_Write_String("S1: ");
  1807     09E0  3097               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1808     09E1  00F5               	movwf	Lcd_Write_String@a
  1809     09E2  3080               	movlw	128
  1810     09E3  00F6               	movwf	Lcd_Write_String@a+1
  1811     09E4  160A  158A  2502  120A  158A  	fcall	_Lcd_Write_String
  1812                           
  1813                           ;main.c: 74:     Lcd_Set_Cursor(2,1);
  1814     09E9  01F4               	clrf	Lcd_Set_Cursor@b
  1815     09EA  0AF4               	incf	Lcd_Set_Cursor@b,f
  1816     09EB  3002               	movlw	2
  1817     09EC  160A  158A  253F  120A  158A  	fcall	_Lcd_Set_Cursor
  1818                           
  1819                           ;main.c: 75:     Lcd_Write_String("    V");
  1820     09F1  3091               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1821     09F2  00F5               	movwf	Lcd_Write_String@a
  1822     09F3  3080               	movlw	128
  1823     09F4  00F6               	movwf	Lcd_Write_String@a+1
  1824     09F5  160A  158A  2502  120A  158A  	fcall	_Lcd_Write_String
  1825                           
  1826                           ;main.c: 76:     Lcd_Set_Cursor(1,10);
  1827     09FA  300A               	movlw	10
  1828     09FB  00F4               	movwf	Lcd_Set_Cursor@b
  1829     09FC  3001               	movlw	1
  1830     09FD  160A  158A  253F  120A  158A  	fcall	_Lcd_Set_Cursor
  1831                           
  1832                           ;main.c: 77:     Lcd_Write_String(":  :");
  1833     0A02  30A1               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1834     0A03  00F5               	movwf	Lcd_Write_String@a
  1835     0A04  3080               	movlw	128
  1836     0A05  00F6               	movwf	Lcd_Write_String@a+1
  1837     0A06  160A  158A  2502  120A  158A  	fcall	_Lcd_Write_String
  1838                           
  1839                           ;main.c: 78:     Lcd_Set_Cursor(2,10);
  1840     0A0B  300A               	movlw	10
  1841     0A0C  00F4               	movwf	Lcd_Set_Cursor@b
  1842     0A0D  3002               	movlw	2
  1843     0A0E  160A  158A  253F  120A  158A  	fcall	_Lcd_Set_Cursor
  1844                           
  1845                           ;main.c: 79:     Lcd_Write_String("/  /");
  1846     0A13  309C               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1847     0A14  00F5               	movwf	Lcd_Write_String@a
  1848     0A15  3080               	movlw	128
  1849     0A16  00F6               	movwf	Lcd_Write_String@a+1
  1850     0A17  160A  158A  2502  120A  158A  	fcall	_Lcd_Write_String
  1851                           
  1852                           ;main.c: 80:     modo = 0;
  1853     0A1C  1683               	bsf	3,5	;RP0=1, select bank1
  1854     0A1D  01C7               	clrf	_modo^(0+128)
  1855                           
  1856                           ;main.c: 82:     enviar_x(0, 0, 1, 1, 0);
  1857     0A1E  01F2               	clrf	enviar_x@val2
  1858     0A1F  01F3               	clrf	enviar_x@val3
  1859     0A20  0AF3               	incf	enviar_x@val3,f
  1860     0A21  01F4               	clrf	enviar_x@val4
  1861     0A22  0AF4               	incf	enviar_x@val4,f
  1862     0A23  01F5               	clrf	enviar_x@val5
  1863     0A24  3000               	movlw	0
  1864     0A25                     L4:
  1865     0A25  160A  118A  20AE  120A  158A  	fcall	_enviar_x
  1866     0A2A                     l4372:
  1867                           
  1868                           ;main.c: 85:         PORTA = modo;
  1869     0A2A  1683               	bsf	3,5	;RP0=1, select bank1
  1870     0A2B  0847               	movf	_modo^(0+128),w
  1871     0A2C  1283               	bcf	3,5	;RP0=0, select bank0
  1872     0A2D  0085               	movwf	5	;volatile
  1873                           
  1874                           ;main.c: 87:         I2C_Master_Start();
  1875     0A2E  160A  158A  2284  120A  158A  	fcall	_I2C_Master_Start
  1876                           
  1877                           ;main.c: 88:         I2C_Master_Write(0x11);
  1878     0A33  3011               	movlw	17
  1879     0A34  00F0               	movwf	I2C_Master_Write@d
  1880     0A35  3000               	movlw	0
  1881     0A36  00F1               	movwf	I2C_Master_Write@d+1
  1882     0A37  160A  158A  2293  120A  158A  	fcall	_I2C_Master_Write
  1883                           
  1884                           ;main.c: 89:         lecADC = I2C_Master_Read(0);
  1885     0A3C  3000               	movlw	0
  1886     0A3D  00F0               	movwf	I2C_Master_Read@a
  1887     0A3E  00F1               	movwf	I2C_Master_Read@a+1
  1888     0A3F  160A  158A  23D5  120A  158A  	fcall	_I2C_Master_Read
  1889     0A44  0870               	movf	?_I2C_Master_Read,w
  1890     0A45  00D6               	movwf	_lecADC^(0+128)
  1891                           
  1892                           ;main.c: 90:         I2C_Master_Stop();
  1893     0A46  160A  158A  2289  120A  158A  	fcall	_I2C_Master_Stop
  1894                           
  1895                           ;main.c: 91:         _delay((unsigned long)((200)*(8000000/4000.0)));
  1896     0A4B  3003               	movlw	3
  1897     0A4C  1283               	bcf	3,5	;RP0=0, select bank0
  1898     0A4D  1303               	bcf	3,6	;RP1=0, select bank0
  1899     0A4E  00EE               	movwf	??_main+2
  1900     0A4F  3008               	movlw	8
  1901     0A50  00ED               	movwf	??_main+1
  1902     0A51  3076               	movlw	118
  1903     0A52  00EC               	movwf	??_main
  1904     0A53                     u7457:
  1905     0A53  0BEC               	decfsz	??_main,f
  1906     0A54  2A53               	goto	u7457
  1907     0A55  0BED               	decfsz	??_main+1,f
  1908     0A56  2A53               	goto	u7457
  1909     0A57  0BEE               	decfsz	??_main+2,f
  1910     0A58  2A53               	goto	u7457
  1911     0A59  0000               	nop
  1912                           
  1913                           ;main.c: 93:         conver = (lecADC*5.0)/255;
  1914     0A5A  3043               	movlw	67
  1915     0A5B  1283               	bcf	3,5	;RP0=0, select bank0
  1916     0A5C  1303               	bcf	3,6	;RP1=0, select bank0
  1917     0A5D  00C1               	movwf	___fldiv@a+3
  1918     0A5E  307F               	movlw	127
  1919     0A5F  00C0               	movwf	___fldiv@a+2
  1920     0A60  3000               	movlw	0
  1921     0A61  00BF               	movwf	___fldiv@a+1
  1922     0A62  3000               	movlw	0
  1923     0A63  00BE               	movwf	___fldiv@a
  1924     0A64  3040               	movlw	64
  1925     0A65  00A7               	movwf	___flmul@b+3
  1926     0A66  30A0               	movlw	160
  1927     0A67  00A6               	movwf	___flmul@b+2
  1928     0A68  3000               	movlw	0
  1929     0A69  00A5               	movwf	___flmul@b+1
  1930     0A6A  3000               	movlw	0
  1931     0A6B  00A4               	movwf	___flmul@b
  1932     0A6C  1683               	bsf	3,5	;RP0=1, select bank1
  1933     0A6D  0856               	movf	_lecADC^(0+128),w
  1934     0A6E  1283               	bcf	3,5	;RP0=0, select bank0
  1935     0A6F  00EC               	movwf	??_main
  1936     0A70  01ED               	clrf	??_main+1
  1937     0A71  01EE               	clrf	??_main+2
  1938     0A72  01EF               	clrf	??_main+3
  1939     0A73  086F               	movf	??_main+3,w
  1940     0A74  00F3               	movwf	___xxtofl@val+3
  1941     0A75  086E               	movf	??_main+2,w
  1942     0A76  00F2               	movwf	___xxtofl@val+2
  1943     0A77  086D               	movf	??_main+1,w
  1944     0A78  00F1               	movwf	___xxtofl@val+1
  1945     0A79  086C               	movf	??_main,w
  1946     0A7A  00F0               	movwf	___xxtofl@val
  1947     0A7B  3001               	movlw	1
  1948     0A7C  160A  118A  21A9  120A  158A  	fcall	___xxtofl
  1949     0A81  0873               	movf	?___xxtofl+3,w
  1950     0A82  1283               	bcf	3,5	;RP0=0, select bank0
  1951     0A83  00AB               	movwf	___flmul@a+3
  1952     0A84  0872               	movf	?___xxtofl+2,w
  1953     0A85  00AA               	movwf	___flmul@a+2
  1954     0A86  0871               	movf	?___xxtofl+1,w
  1955     0A87  00A9               	movwf	___flmul@a+1
  1956     0A88  0870               	movf	?___xxtofl,w
  1957     0A89  00A8               	movwf	___flmul@a
  1958     0A8A  160A  118A  2527  120A  158A  	fcall	___flmul
  1959     0A8F  0827               	movf	?___flmul+3,w
  1960     0A90  00C5               	movwf	___fldiv@b+3
  1961     0A91  0826               	movf	?___flmul+2,w
  1962     0A92  00C4               	movwf	___fldiv@b+2
  1963     0A93  0825               	movf	?___flmul+1,w
  1964     0A94  00C3               	movwf	___fldiv@b+1
  1965     0A95  0824               	movf	?___flmul,w
  1966     0A96  00C2               	movwf	___fldiv@b
  1967     0A97  160A  118A  2390  120A  158A  	fcall	___fldiv
  1968     0A9C  0841               	movf	?___fldiv+3,w
  1969     0A9D  1683               	bsf	3,5	;RP0=1, select bank1
  1970     0A9E  00C6               	movwf	(_conver+3)^(0+128)
  1971     0A9F  1283               	bcf	3,5	;RP0=0, select bank0
  1972     0AA0  0840               	movf	?___fldiv+2,w
  1973     0AA1  1683               	bsf	3,5	;RP0=1, select bank1
  1974     0AA2  00C5               	movwf	(_conver+2)^(0+128)
  1975     0AA3  1283               	bcf	3,5	;RP0=0, select bank0
  1976     0AA4  083F               	movf	?___fldiv+1,w
  1977     0AA5  1683               	bsf	3,5	;RP0=1, select bank1
  1978     0AA6  00C4               	movwf	(_conver+1)^(0+128)
  1979     0AA7  1283               	bcf	3,5	;RP0=0, select bank0
  1980     0AA8  083E               	movf	?___fldiv,w
  1981     0AA9  1683               	bsf	3,5	;RP0=1, select bank1
  1982     0AAA  00C3               	movwf	_conver^(0+128)
  1983                           
  1984                           ;main.c: 94:         sprintf(valADC, "%.2f", conver);
  1985     0AAB  30A6               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1986     0AAC  00A0               	movwf	sprintf@f^(0+128)
  1987     0AAD  0846               	movf	(_conver+3)^(0+128),w
  1988     0AAE  00A4               	movwf	((?_sprintf+3)^(0+128)+1)
  1989     0AAF  0845               	movf	(_conver+2)^(0+128),w
  1990     0AB0  00A3               	movwf	((?_sprintf+2)^(0+128)+1)
  1991     0AB1  0844               	movf	(_conver+1)^(0+128),w
  1992     0AB2  00A2               	movwf	((?_sprintf+1)^(0+128)+1)
  1993     0AB3  0843               	movf	_conver^(0+128),w
  1994     0AB4  00A1               	movwf	(?_sprintf^(0+128)+1)
  1995     0AB5  30D7               	movlw	(low (_valADC| 0))& (0+255)
  1996     0AB6  120A  118A  22CB  120A  158A  	fcall	_sprintf
  1997                           
  1998                           ;main.c: 95:         Lcd_Set_Cursor(2,1);
  1999     0ABB  01F4               	clrf	Lcd_Set_Cursor@b
  2000     0ABC  0AF4               	incf	Lcd_Set_Cursor@b,f
  2001     0ABD  3002               	movlw	2
  2002     0ABE  160A  158A  253F  120A  158A  	fcall	_Lcd_Set_Cursor
  2003                           
  2004                           ;main.c: 96:         Lcd_Write_String(valADC);
  2005     0AC3  30D7               	movlw	(low (_valADC| 0))& (0+255)
  2006     0AC4  00F5               	movwf	Lcd_Write_String@a
  2007     0AC5  3000               	movlw	0
  2008     0AC6  00F6               	movwf	Lcd_Write_String@a+1
  2009     0AC7  160A  158A  2502  120A  158A  	fcall	_Lcd_Write_String
  2010                           
  2011                           ;main.c: 99:         sec = leer_x(0x00);
  2012     0ACC  3000               	movlw	0
  2013     0ACD  160A  158A  269F  120A  158A  	fcall	_leer_x
  2014     0AD2  00D3               	movwf	_sec^(0+128)
  2015                           
  2016                           ;main.c: 100:         Escribir_dato(sec, 14, 1);
  2017     0AD3  300E               	movlw	14
  2018     0AD4  1283               	bcf	3,5	;RP0=0, select bank0
  2019     0AD5  00A3               	movwf	Escribir_dato@posx
  2020     0AD6  01A4               	clrf	Escribir_dato@posy
  2021     0AD7  0AA4               	incf	Escribir_dato@posy,f
  2022     0AD8  1683               	bsf	3,5	;RP0=1, select bank1
  2023     0AD9  0853               	movf	_sec^(0+128),w
  2024     0ADA  160A  158A  257D  120A  158A  	fcall	_Escribir_dato
  2025                           
  2026                           ;main.c: 102:         min = leer_x(0x01);
  2027     0ADF  3001               	movlw	1
  2028     0AE0  160A  158A  269F  120A  158A  	fcall	_leer_x
  2029     0AE5  00D1               	movwf	_min^(0+128)
  2030                           
  2031                           ;main.c: 103:         Escribir_dato(min, 11, 1);
  2032     0AE6  300B               	movlw	11
  2033     0AE7  1283               	bcf	3,5	;RP0=0, select bank0
  2034     0AE8  00A3               	movwf	Escribir_dato@posx
  2035     0AE9  01A4               	clrf	Escribir_dato@posy
  2036     0AEA  0AA4               	incf	Escribir_dato@posy,f
  2037     0AEB  1683               	bsf	3,5	;RP0=1, select bank1
  2038     0AEC  0851               	movf	_min^(0+128),w
  2039     0AED  160A  158A  257D  120A  158A  	fcall	_Escribir_dato
  2040                           
  2041                           ;main.c: 105:         hor = leer_x(0x02);
  2042     0AF2  3002               	movlw	2
  2043     0AF3  160A  158A  269F  120A  158A  	fcall	_leer_x
  2044     0AF8  00CF               	movwf	_hor^(0+128)
  2045                           
  2046                           ;main.c: 106:         Escribir_dato(hor, 8, 1);
  2047     0AF9  3008               	movlw	8
  2048     0AFA  1283               	bcf	3,5	;RP0=0, select bank0
  2049     0AFB  00A3               	movwf	Escribir_dato@posx
  2050     0AFC  01A4               	clrf	Escribir_dato@posy
  2051     0AFD  0AA4               	incf	Escribir_dato@posy,f
  2052     0AFE  1683               	bsf	3,5	;RP0=1, select bank1
  2053     0AFF  084F               	movf	_hor^(0+128),w
  2054     0B00  160A  158A  257D  120A  158A  	fcall	_Escribir_dato
  2055                           
  2056                           ;main.c: 108:         fecha = leer_x(0x04);
  2057     0B05  3004               	movlw	4
  2058     0B06  160A  158A  269F  120A  158A  	fcall	_leer_x
  2059     0B0B  00CD               	movwf	_fecha^(0+128)
  2060                           
  2061                           ;main.c: 109:         Escribir_dato(fecha, 8, 2);
  2062     0B0C  3008               	movlw	8
  2063     0B0D  1283               	bcf	3,5	;RP0=0, select bank0
  2064     0B0E  00A3               	movwf	Escribir_dato@posx
  2065     0B0F  3002               	movlw	2
  2066     0B10  00A4               	movwf	Escribir_dato@posy
  2067     0B11  1683               	bsf	3,5	;RP0=1, select bank1
  2068     0B12  084D               	movf	_fecha^(0+128),w
  2069     0B13  160A  158A  257D  120A  158A  	fcall	_Escribir_dato
  2070                           
  2071                           ;main.c: 111:         mes = leer_x(0x05);
  2072     0B18  3005               	movlw	5
  2073     0B19  160A  158A  269F  120A  158A  	fcall	_leer_x
  2074     0B1E  00CB               	movwf	_mes^(0+128)
  2075                           
  2076                           ;main.c: 112:         Escribir_dato(mes, 11, 2);
  2077     0B1F  300B               	movlw	11
  2078     0B20  1283               	bcf	3,5	;RP0=0, select bank0
  2079     0B21  00A3               	movwf	Escribir_dato@posx
  2080     0B22  3002               	movlw	2
  2081     0B23  00A4               	movwf	Escribir_dato@posy
  2082     0B24  1683               	bsf	3,5	;RP0=1, select bank1
  2083     0B25  084B               	movf	_mes^(0+128),w
  2084     0B26  160A  158A  257D  120A  158A  	fcall	_Escribir_dato
  2085                           
  2086                           ;main.c: 114:         year = leer_x(0x06);
  2087     0B2B  3006               	movlw	6
  2088     0B2C  160A  158A  269F  120A  158A  	fcall	_leer_x
  2089     0B31  00C9               	movwf	_year^(0+128)
  2090                           
  2091                           ;main.c: 115:         Escribir_dato(year, 14, 2);
  2092     0B32  300E               	movlw	14
  2093     0B33  1283               	bcf	3,5	;RP0=0, select bank0
  2094     0B34  00A3               	movwf	Escribir_dato@posx
  2095     0B35  3002               	movlw	2
  2096     0B36  00A4               	movwf	Escribir_dato@posy
  2097     0B37  1683               	bsf	3,5	;RP0=1, select bank1
  2098     0B38  0849               	movf	_year^(0+128),w
  2099     0B39  160A  158A  257D  120A  158A  	fcall	_Escribir_dato
  2100                           
  2101                           ;main.c: 119:         if(PORTBbits.RB7 == 0){
  2102     0B3E  1B86               	btfsc	6,7	;volatile
  2103     0B3F  2B58               	goto	l4424
  2104                           
  2105                           ;main.c: 120:             _delay((unsigned long)((20)*(8000000/4000.0)));
  2106     0B40  3034               	movlw	52
  2107     0B41  1283               	bcf	3,5	;RP0=0, select bank0
  2108     0B42  1303               	bcf	3,6	;RP1=0, select bank0
  2109     0B43  00ED               	movwf	??_main+1
  2110     0B44  30F1               	movlw	241
  2111     0B45  00EC               	movwf	??_main
  2112     0B46                     u7467:
  2113     0B46  0BEC               	decfsz	??_main,f
  2114     0B47  2B46               	goto	u7467
  2115     0B48  0BED               	decfsz	??_main+1,f
  2116     0B49  2B46               	goto	u7467
  2117                           
  2118                           ;main.c: 121:             if (modo <4){
  2119     0B4A  3004               	movlw	4
  2120     0B4B  1683               	bsf	3,5	;RP0=1, select bank1
  2121     0B4C  1303               	bcf	3,6	;RP1=0, select bank1
  2122     0B4D  0247               	subwf	_modo^(0+128),w
  2123     0B4E  1803               	skipnc
  2124     0B4F  2B57               	goto	l4422
  2125                           
  2126                           ;main.c: 122:                 modo += 1;
  2127     0B50  3001               	movlw	1
  2128     0B51  1283               	bcf	3,5	;RP0=0, select bank0
  2129     0B52  00EC               	movwf	??_main
  2130     0B53  086C               	movf	??_main,w
  2131     0B54  1683               	bsf	3,5	;RP0=1, select bank1
  2132     0B55  07C7               	addwf	_modo^(0+128),f
  2133                           
  2134                           ;main.c: 123:             }
  2135     0B56  2B58               	goto	l4424
  2136     0B57                     l4422:
  2137                           
  2138                           ;main.c: 125:                 modo = 0;
  2139     0B57  01C7               	clrf	_modo^(0+128)
  2140     0B58                     l4424:
  2141                           
  2142                           ;main.c: 130:         if(PORTBbits.RB6 == 0){
  2143     0B58  1283               	bcf	3,5	;RP0=0, select bank0
  2144     0B59  1B06               	btfsc	6,6	;volatile
  2145     0B5A  2C20               	goto	l4500
  2146                           
  2147                           ;main.c: 131:             _delay((unsigned long)((20)*(8000000/4000.0)));
  2148     0B5B  3034               	movlw	52
  2149     0B5C  1283               	bcf	3,5	;RP0=0, select bank0
  2150     0B5D  1303               	bcf	3,6	;RP1=0, select bank0
  2151     0B5E  00ED               	movwf	??_main+1
  2152     0B5F  30F1               	movlw	241
  2153     0B60  00EC               	movwf	??_main
  2154     0B61                     u7477:
  2155     0B61  0BEC               	decfsz	??_main,f
  2156     0B62  2B61               	goto	u7477
  2157     0B63  0BED               	decfsz	??_main+1,f
  2158     0B64  2B61               	goto	u7477
  2159                           
  2160                           ;main.c: 132:             segundo = sec;
  2161     0B65  1683               	bsf	3,5	;RP0=1, select bank1
  2162     0B66  1303               	bcf	3,6	;RP1=0, select bank1
  2163     0B67  0853               	movf	_sec^(0+128),w
  2164     0B68  00D2               	movwf	_segundo^(0+128)
  2165                           
  2166                           ;main.c: 133:             minuto = min;
  2167     0B69  0851               	movf	_min^(0+128),w
  2168     0B6A  00D0               	movwf	_minuto^(0+128)
  2169                           
  2170                           ;main.c: 134:             hora = hor;
  2171     0B6B  084F               	movf	_hor^(0+128),w
  2172     0B6C  00CE               	movwf	_hora^(0+128)
  2173                           
  2174                           ;main.c: 135:             fecha1 = fecha;
  2175     0B6D  084D               	movf	_fecha^(0+128),w
  2176     0B6E  00CC               	movwf	_fecha1^(0+128)
  2177                           
  2178                           ;main.c: 136:             mes1 = mes;
  2179     0B6F  084B               	movf	_mes^(0+128),w
  2180     0B70  00CA               	movwf	_mes1^(0+128)
  2181                           
  2182                           ;main.c: 137:             year1 = year;
  2183     0B71  0849               	movf	_year^(0+128),w
  2184     0B72  00C8               	movwf	_year1^(0+128)
  2185                           
  2186                           ;main.c: 139:             if (modo == 0){
  2187     0B73  0847               	movf	_modo^(0+128),w
  2188     0B74  1D03               	btfss	3,2
  2189     0B75  2B83               	goto	l4436
  2190                           
  2191                           ;main.c: 140:                 if (minuto<59){
  2192     0B76  303B               	movlw	59
  2193     0B77  0250               	subwf	_minuto^(0+128),w
  2194     0B78  1803               	skipnc
  2195     0B79  2B81               	goto	l4434
  2196                           
  2197                           ;main.c: 141:                     minuto ++;
  2198     0B7A  3001               	movlw	1
  2199     0B7B  1283               	bcf	3,5	;RP0=0, select bank0
  2200     0B7C  00EC               	movwf	??_main
  2201     0B7D  086C               	movf	??_main,w
  2202     0B7E  1683               	bsf	3,5	;RP0=1, select bank1
  2203     0B7F  07D0               	addwf	_minuto^(0+128),f
  2204                           
  2205                           ;main.c: 142:                 }
  2206     0B80  2BEA               	goto	l4488
  2207     0B81                     l4434:
  2208                           
  2209                           ;main.c: 144:                     minuto = 0;
  2210     0B81  01D0               	clrf	_minuto^(0+128)
  2211     0B82  2BEA               	goto	l4488
  2212     0B83                     l4436:
  2213     0B83  0347               	decf	_modo^(0+128),w
  2214     0B84  1D03               	btfss	3,2
  2215     0B85  2B93               	goto	l4444
  2216                           
  2217                           ;main.c: 148:                 if (hora<23){
  2218     0B86  3017               	movlw	23
  2219     0B87  024E               	subwf	_hora^(0+128),w
  2220     0B88  1803               	skipnc
  2221     0B89  2B91               	goto	l4442
  2222                           
  2223                           ;main.c: 149:                     hora ++;
  2224     0B8A  3001               	movlw	1
  2225     0B8B  1283               	bcf	3,5	;RP0=0, select bank0
  2226     0B8C  00EC               	movwf	??_main
  2227     0B8D  086C               	movf	??_main,w
  2228     0B8E  1683               	bsf	3,5	;RP0=1, select bank1
  2229     0B8F  07CE               	addwf	_hora^(0+128),f
  2230                           
  2231                           ;main.c: 150:                 }
  2232     0B90  2BEA               	goto	l4488
  2233     0B91                     l4442:
  2234                           
  2235                           ;main.c: 152:                     hora = 0;
  2236     0B91  01CE               	clrf	_hora^(0+128)
  2237     0B92  2BEA               	goto	l4488
  2238     0B93                     l4444:
  2239     0B93  3002               	movlw	2
  2240     0B94  0647               	xorwf	_modo^(0+128),w
  2241     0B95  1D03               	btfss	3,2
  2242     0B96  2BC8               	goto	l4474
  2243                           
  2244                           ;main.c: 156:                 if((mes == 1) || (mes == 3) || (mes == 5) || (mes == 7) ||
      +                           (mes == 8) || (mes == 10) || (mes == 12)){
  2245     0B97  034B               	decf	_mes^(0+128),w
  2246     0B98  1903               	btfsc	3,2
  2247     0B99  2BB2               	goto	l4460
  2248     0B9A  3003               	movlw	3
  2249     0B9B  064B               	xorwf	_mes^(0+128),w
  2250     0B9C  1903               	btfsc	3,2
  2251     0B9D  2BB2               	goto	l4460
  2252     0B9E  3005               	movlw	5
  2253     0B9F  064B               	xorwf	_mes^(0+128),w
  2254     0BA0  1903               	btfsc	3,2
  2255     0BA1  2BB2               	goto	l4460
  2256     0BA2  3007               	movlw	7
  2257     0BA3  064B               	xorwf	_mes^(0+128),w
  2258     0BA4  1903               	btfsc	3,2
  2259     0BA5  2BB2               	goto	l4460
  2260     0BA6  3008               	movlw	8
  2261     0BA7  064B               	xorwf	_mes^(0+128),w
  2262     0BA8  1903               	btfsc	3,2
  2263     0BA9  2BB2               	goto	l4460
  2264     0BAA  300A               	movlw	10
  2265     0BAB  064B               	xorwf	_mes^(0+128),w
  2266     0BAC  1903               	btfsc	3,2
  2267     0BAD  2BB2               	goto	l4460
  2268     0BAE  300C               	movlw	12
  2269     0BAF  064B               	xorwf	_mes^(0+128),w
  2270     0BB0  1D03               	btfss	3,2
  2271     0BB1  2BC0               	goto	l4464
  2272     0BB2                     l4460:
  2273                           
  2274                           ;main.c: 157:                     if (fecha1 < 31){
  2275     0BB2  301F               	movlw	31
  2276     0BB3                     L1:
  2277     0BB3  024C               	subwf	_fecha1^(0+128),w
  2278     0BB4  1803               	skipnc
  2279     0BB5  2BBD               	goto	l120
  2280                           
  2281                           ;main.c: 158:                         fecha1 ++;
  2282     0BB6  3001               	movlw	1
  2283     0BB7  1283               	bcf	3,5	;RP0=0, select bank0
  2284     0BB8  00EC               	movwf	??_main
  2285     0BB9  086C               	movf	??_main,w
  2286     0BBA  1683               	bsf	3,5	;RP0=1, select bank1
  2287     0BBB  07CC               	addwf	_fecha1^(0+128),f
  2288                           
  2289                           ;main.c: 159:                     }
  2290     0BBC  2BEA               	goto	l4488
  2291     0BBD                     l120:	
  2292                           ;main.c: 160:                     else {
  2293                           
  2294                           
  2295                           ;main.c: 161:                         fecha1 = 1;
  2296     0BBD  01CC               	clrf	_fecha1^(0+128)
  2297     0BBE  0ACC               	incf	_fecha1^(0+128),f
  2298     0BBF  2BEA               	goto	l4488
  2299     0BC0                     l4464:
  2300     0BC0  3002               	movlw	2
  2301     0BC1  064B               	xorwf	_mes^(0+128),w
  2302     0BC2  1D03               	btfss	3,2
  2303     0BC3  2BC6               	goto	l4470
  2304                           
  2305                           ;main.c: 165:                     if (fecha1 < 28){
  2306     0BC4  301C               	movlw	28
  2307     0BC5  2BB3               	goto	L1
  2308     0BC6                     l4470:
  2309                           
  2310                           ;main.c: 173:                     if (fecha1 < 30){
  2311     0BC6  301E               	movlw	30
  2312     0BC7  2BB3               	goto	L1
  2313     0BC8                     l4474:
  2314     0BC8  3003               	movlw	3
  2315     0BC9  0647               	xorwf	_modo^(0+128),w
  2316     0BCA  1D03               	btfss	3,2
  2317     0BCB  2BDA               	goto	l4480
  2318                           
  2319                           ;main.c: 182:                 if (mes<12){
  2320     0BCC  300C               	movlw	12
  2321     0BCD  024B               	subwf	_mes^(0+128),w
  2322     0BCE  1803               	skipnc
  2323     0BCF  2BD7               	goto	l131
  2324                           
  2325                           ;main.c: 183:                     mes1 ++;
  2326     0BD0  3001               	movlw	1
  2327     0BD1  1283               	bcf	3,5	;RP0=0, select bank0
  2328     0BD2  00EC               	movwf	??_main
  2329     0BD3  086C               	movf	??_main,w
  2330     0BD4  1683               	bsf	3,5	;RP0=1, select bank1
  2331     0BD5  07CA               	addwf	_mes1^(0+128),f
  2332                           
  2333                           ;main.c: 184:                 }
  2334     0BD6  2BEA               	goto	l4488
  2335     0BD7                     l131:	
  2336                           ;main.c: 185:                 else {
  2337                           
  2338                           
  2339                           ;main.c: 186:                     mes1 = 1;
  2340     0BD7  01CA               	clrf	_mes1^(0+128)
  2341     0BD8  0ACA               	incf	_mes1^(0+128),f
  2342     0BD9  2BEA               	goto	l4488
  2343     0BDA                     l4480:
  2344     0BDA  3004               	movlw	4
  2345     0BDB  0647               	xorwf	_modo^(0+128),w
  2346     0BDC  1D03               	btfss	3,2
  2347     0BDD  2BEA               	goto	l4488
  2348                           
  2349                           ;main.c: 190:                 if (year <99){
  2350     0BDE  3063               	movlw	99
  2351     0BDF  0249               	subwf	_year^(0+128),w
  2352     0BE0  1803               	skipnc
  2353     0BE1  2BE9               	goto	l4486
  2354                           
  2355                           ;main.c: 191:                     year1 ++;
  2356     0BE2  3001               	movlw	1
  2357     0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  2358     0BE4  00EC               	movwf	??_main
  2359     0BE5  086C               	movf	??_main,w
  2360     0BE6  1683               	bsf	3,5	;RP0=1, select bank1
  2361     0BE7  07C8               	addwf	_year1^(0+128),f
  2362                           
  2363                           ;main.c: 192:                 }
  2364     0BE8  2BEA               	goto	l4488
  2365     0BE9                     l4486:
  2366                           
  2367                           ;main.c: 194:                     year1 = 0;
  2368     0BE9  01C8               	clrf	_year1^(0+128)
  2369     0BEA                     l4488:
  2370                           
  2371                           ;main.c: 197:             minuto = desconvertir(minuto);
  2372     0BEA  0850               	movf	_minuto^(0+128),w
  2373     0BEB  160A  158A  232E  120A  158A  	fcall	_desconvertir
  2374     0BF0  1683               	bsf	3,5	;RP0=1, select bank1
  2375     0BF1  00D0               	movwf	_minuto^(0+128)
  2376                           
  2377                           ;main.c: 198:             hora = desconvertir(hora);
  2378     0BF2  084E               	movf	_hora^(0+128),w
  2379     0BF3  160A  158A  232E  120A  158A  	fcall	_desconvertir
  2380     0BF8  1683               	bsf	3,5	;RP0=1, select bank1
  2381     0BF9  00CE               	movwf	_hora^(0+128)
  2382                           
  2383                           ;main.c: 199:             fecha1 = desconvertir(fecha1);
  2384     0BFA  084C               	movf	_fecha1^(0+128),w
  2385     0BFB  160A  158A  232E  120A  158A  	fcall	_desconvertir
  2386     0C00  1683               	bsf	3,5	;RP0=1, select bank1
  2387     0C01  00CC               	movwf	_fecha1^(0+128)
  2388                           
  2389                           ;main.c: 200:             mes1 = desconvertir(mes1);
  2390     0C02  084A               	movf	_mes1^(0+128),w
  2391     0C03  160A  158A  232E  120A  158A  	fcall	_desconvertir
  2392     0C08  1683               	bsf	3,5	;RP0=1, select bank1
  2393     0C09  00CA               	movwf	_mes1^(0+128)
  2394                           
  2395                           ;main.c: 201:             year1 = desconvertir(year1);
  2396     0C0A  0848               	movf	_year1^(0+128),w
  2397     0C0B  160A  158A  232E  120A  158A  	fcall	_desconvertir
  2398     0C10  1683               	bsf	3,5	;RP0=1, select bank1
  2399     0C11  00C8               	movwf	_year1^(0+128)
  2400                           
  2401                           ;main.c: 202:             enviar_x(minuto, hora, fecha1, mes1, year1);
  2402     0C12  084E               	movf	_hora^(0+128),w
  2403     0C13  00F2               	movwf	enviar_x@val2
  2404     0C14  084C               	movf	_fecha1^(0+128),w
  2405     0C15  00F3               	movwf	enviar_x@val3
  2406     0C16  084A               	movf	_mes1^(0+128),w
  2407     0C17  00F4               	movwf	enviar_x@val4
  2408     0C18  0848               	movf	_year1^(0+128),w
  2409     0C19  00F5               	movwf	enviar_x@val5
  2410     0C1A  0850               	movf	_minuto^(0+128),w
  2411     0C1B  160A  118A  20AE  120A  158A  	fcall	_enviar_x
  2412     0C20                     l4500:
  2413                           
  2414                           ;main.c: 206:         if(PORTBbits.RB5 == 0){
  2415     0C20  1283               	bcf	3,5	;RP0=0, select bank0
  2416     0C21  1A86               	btfsc	6,5	;volatile
  2417     0C22  2A2A               	goto	l4372
  2418                           
  2419                           ;main.c: 207:             _delay((unsigned long)((20)*(8000000/4000.0)));
  2420     0C23  3034               	movlw	52
  2421     0C24  1283               	bcf	3,5	;RP0=0, select bank0
  2422     0C25  1303               	bcf	3,6	;RP1=0, select bank0
  2423     0C26  00ED               	movwf	??_main+1
  2424     0C27  30F1               	movlw	241
  2425     0C28  00EC               	movwf	??_main
  2426     0C29                     u7487:
  2427     0C29  0BEC               	decfsz	??_main,f
  2428     0C2A  2C29               	goto	u7487
  2429     0C2B  0BED               	decfsz	??_main+1,f
  2430     0C2C  2C29               	goto	u7487
  2431                           
  2432                           ;main.c: 208:             segundo = sec;
  2433     0C2D  1683               	bsf	3,5	;RP0=1, select bank1
  2434     0C2E  1303               	bcf	3,6	;RP1=0, select bank1
  2435     0C2F  0853               	movf	_sec^(0+128),w
  2436     0C30  00D2               	movwf	_segundo^(0+128)
  2437                           
  2438                           ;main.c: 209:             minuto = min;
  2439     0C31  0851               	movf	_min^(0+128),w
  2440     0C32  00D0               	movwf	_minuto^(0+128)
  2441                           
  2442                           ;main.c: 210:             hora = hor;
  2443     0C33  084F               	movf	_hor^(0+128),w
  2444     0C34  00CE               	movwf	_hora^(0+128)
  2445                           
  2446                           ;main.c: 211:             fecha1 = fecha;
  2447     0C35  084D               	movf	_fecha^(0+128),w
  2448     0C36  00CC               	movwf	_fecha1^(0+128)
  2449                           
  2450                           ;main.c: 212:             mes1 = mes;
  2451     0C37  084B               	movf	_mes^(0+128),w
  2452     0C38  00CA               	movwf	_mes1^(0+128)
  2453                           
  2454                           ;main.c: 213:             year1 = year;
  2455     0C39  0849               	movf	_year^(0+128),w
  2456     0C3A  00C8               	movwf	_year1^(0+128)
  2457                           
  2458                           ;main.c: 214:             if (modo == 0){
  2459     0C3B  0847               	movf	_modo^(0+128),w
  2460     0C3C  1D03               	btfss	3,2
  2461     0C3D  2C47               	goto	l4512
  2462                           
  2463                           ;main.c: 215:                 if (minuto > 0){
  2464     0C3E  0850               	movf	_minuto^(0+128),w
  2465     0C3F  1903               	btfsc	3,2
  2466     0C40  2C44               	goto	l4510
  2467                           
  2468                           ;main.c: 216:                     minuto --;
  2469     0C41  3001               	movlw	1
  2470     0C42  02D0               	subwf	_minuto^(0+128),f
  2471                           
  2472                           ;main.c: 217:                 }
  2473     0C43  2CA6               	goto	l4572
  2474     0C44                     l4510:
  2475                           
  2476                           ;main.c: 219:                     minuto = 59;
  2477     0C44  303B               	movlw	59
  2478     0C45  00D0               	movwf	_minuto^(0+128)
  2479     0C46  2CA6               	goto	l4572
  2480     0C47                     l4512:
  2481     0C47  0347               	decf	_modo^(0+128),w
  2482     0C48  1D03               	btfss	3,2
  2483     0C49  2C53               	goto	l4520
  2484                           
  2485                           ;main.c: 223:                 if (hora>0){
  2486     0C4A  084E               	movf	_hora^(0+128),w
  2487     0C4B  1903               	btfsc	3,2
  2488     0C4C  2C50               	goto	l4518
  2489                           
  2490                           ;main.c: 224:                     hora --;
  2491     0C4D  3001               	movlw	1
  2492     0C4E  02CE               	subwf	_hora^(0+128),f
  2493                           
  2494                           ;main.c: 225:                 }
  2495     0C4F  2CA6               	goto	l4572
  2496     0C50                     l4518:
  2497                           
  2498                           ;main.c: 227:                     hora = 23;
  2499     0C50  3017               	movlw	23
  2500     0C51  00CE               	movwf	_hora^(0+128)
  2501     0C52  2CA6               	goto	l4572
  2502     0C53                     l4520:
  2503     0C53  3002               	movlw	2
  2504     0C54  0647               	xorwf	_modo^(0+128),w
  2505     0C55  1D03               	btfss	3,2
  2506     0C56  2C8C               	goto	l4556
  2507                           
  2508                           ;main.c: 231:                 if((mes == 1) || (mes == 3) || (mes == 5) || (mes == 7) ||
      +                           (mes == 8) || (mes == 10) || (mes == 12)){
  2509     0C57  034B               	decf	_mes^(0+128),w
  2510     0C58  1903               	btfsc	3,2
  2511     0C59  2C72               	goto	l4536
  2512     0C5A  3003               	movlw	3
  2513     0C5B  064B               	xorwf	_mes^(0+128),w
  2514     0C5C  1903               	btfsc	3,2
  2515     0C5D  2C72               	goto	l4536
  2516     0C5E  3005               	movlw	5
  2517     0C5F  064B               	xorwf	_mes^(0+128),w
  2518     0C60  1903               	btfsc	3,2
  2519     0C61  2C72               	goto	l4536
  2520     0C62  3007               	movlw	7
  2521     0C63  064B               	xorwf	_mes^(0+128),w
  2522     0C64  1903               	btfsc	3,2
  2523     0C65  2C72               	goto	l4536
  2524     0C66  3008               	movlw	8
  2525     0C67  064B               	xorwf	_mes^(0+128),w
  2526     0C68  1903               	btfsc	3,2
  2527     0C69  2C72               	goto	l4536
  2528     0C6A  300A               	movlw	10
  2529     0C6B  064B               	xorwf	_mes^(0+128),w
  2530     0C6C  1903               	btfsc	3,2
  2531     0C6D  2C72               	goto	l4536
  2532     0C6E  300C               	movlw	12
  2533     0C6F  064B               	xorwf	_mes^(0+128),w
  2534     0C70  1D03               	btfss	3,2
  2535     0C71  2C7B               	goto	l4542
  2536     0C72                     l4536:
  2537                           
  2538                           ;main.c: 232:                     if (fecha1 > 1){
  2539     0C72  3002               	movlw	2
  2540     0C73  024C               	subwf	_fecha1^(0+128),w
  2541     0C74  1C03               	skipc
  2542     0C75  2C79               	goto	l4540
  2543     0C76                     l4538:
  2544                           
  2545                           ;main.c: 233:                         fecha1 --;
  2546     0C76  3001               	movlw	1
  2547     0C77  02CC               	subwf	_fecha1^(0+128),f
  2548                           
  2549                           ;main.c: 234:                     }
  2550     0C78  2CA6               	goto	l4572
  2551     0C79                     l4540:
  2552                           
  2553                           ;main.c: 236:                         fecha1 = 31;
  2554     0C79  301F               	movlw	31
  2555     0C7A  2C8A               	goto	L3
  2556     0C7B                     l4542:
  2557     0C7B  3002               	movlw	2
  2558     0C7C  064B               	xorwf	_mes^(0+128),w
  2559     0C7D  1D03               	btfss	3,2
  2560     0C7E  2C85               	goto	l4550
  2561                           
  2562                           ;main.c: 240:                     if (fecha1 > 1){
  2563     0C7F  3002               	movlw	2
  2564     0C80  024C               	subwf	_fecha1^(0+128),w
  2565     0C81  1803               	btfsc	3,0
  2566     0C82  2C76               	goto	l4538
  2567                           
  2568                           ;main.c: 244:                         fecha1 = 28;
  2569     0C83  301C               	movlw	28
  2570     0C84  2C8A               	goto	L3
  2571     0C85                     l4550:
  2572                           
  2573                           ;main.c: 248:                     if (fecha1 > 1){
  2574     0C85  3002               	movlw	2
  2575     0C86  024C               	subwf	_fecha1^(0+128),w
  2576     0C87  1803               	btfsc	3,0
  2577     0C88  2C76               	goto	l4538
  2578                           
  2579                           ;main.c: 252:                         fecha1 = 30;
  2580     0C89  301E               	movlw	30
  2581     0C8A                     L3:
  2582     0C8A  00CC               	movwf	_fecha1^(0+128)
  2583     0C8B  2CA6               	goto	l4572
  2584     0C8C                     l4556:
  2585     0C8C  3003               	movlw	3
  2586     0C8D  0647               	xorwf	_modo^(0+128),w
  2587     0C8E  1D03               	btfss	3,2
  2588     0C8F  2C9A               	goto	l4564
  2589                           
  2590                           ;main.c: 257:                 if (mes1 > 1){
  2591     0C90  3002               	movlw	2
  2592     0C91  024A               	subwf	_mes1^(0+128),w
  2593     0C92  1C03               	skipc
  2594     0C93  2C97               	goto	l4562
  2595                           
  2596                           ;main.c: 258:                     mes1 --;
  2597     0C94  3001               	movlw	1
  2598     0C95  02CA               	subwf	_mes1^(0+128),f
  2599                           
  2600                           ;main.c: 259:                 }
  2601     0C96  2CA6               	goto	l4572
  2602     0C97                     l4562:
  2603                           
  2604                           ;main.c: 261:                     mes1 = 12;
  2605     0C97  300C               	movlw	12
  2606     0C98  00CA               	movwf	_mes1^(0+128)
  2607     0C99  2CA6               	goto	l4572
  2608     0C9A                     l4564:
  2609     0C9A  3004               	movlw	4
  2610     0C9B  0647               	xorwf	_modo^(0+128),w
  2611     0C9C  1D03               	btfss	3,2
  2612     0C9D  2CA6               	goto	l4572
  2613                           
  2614                           ;main.c: 265:                 if (year1 > 0){
  2615     0C9E  0848               	movf	_year1^(0+128),w
  2616     0C9F  1903               	btfsc	3,2
  2617     0CA0  2CA4               	goto	l4570
  2618                           
  2619                           ;main.c: 266:                     year1 --;
  2620     0CA1  3001               	movlw	1
  2621     0CA2  02C8               	subwf	_year1^(0+128),f
  2622                           
  2623                           ;main.c: 267:                 }
  2624     0CA3  2CA6               	goto	l4572
  2625     0CA4                     l4570:
  2626                           
  2627                           ;main.c: 269:                     year1 = 99;
  2628     0CA4  3063               	movlw	99
  2629     0CA5  00C8               	movwf	_year1^(0+128)
  2630     0CA6                     l4572:
  2631                           
  2632                           ;main.c: 272:             minuto = desconvertir(minuto);
  2633     0CA6  0850               	movf	_minuto^(0+128),w
  2634     0CA7  160A  158A  232E  120A  158A  	fcall	_desconvertir
  2635     0CAC  1683               	bsf	3,5	;RP0=1, select bank1
  2636     0CAD  00D0               	movwf	_minuto^(0+128)
  2637                           
  2638                           ;main.c: 273:             hora = desconvertir(hora);
  2639     0CAE  084E               	movf	_hora^(0+128),w
  2640     0CAF  160A  158A  232E  120A  158A  	fcall	_desconvertir
  2641     0CB4  1683               	bsf	3,5	;RP0=1, select bank1
  2642     0CB5  00CE               	movwf	_hora^(0+128)
  2643                           
  2644                           ;main.c: 274:             fecha1 = desconvertir(fecha1);
  2645     0CB6  084C               	movf	_fecha1^(0+128),w
  2646     0CB7  160A  158A  232E  120A  158A  	fcall	_desconvertir
  2647     0CBC  1683               	bsf	3,5	;RP0=1, select bank1
  2648     0CBD  00CC               	movwf	_fecha1^(0+128)
  2649                           
  2650                           ;main.c: 275:             mes1 = desconvertir(mes1);
  2651     0CBE  084A               	movf	_mes1^(0+128),w
  2652     0CBF  160A  158A  232E  120A  158A  	fcall	_desconvertir
  2653     0CC4  1683               	bsf	3,5	;RP0=1, select bank1
  2654     0CC5  00CA               	movwf	_mes1^(0+128)
  2655                           
  2656                           ;main.c: 276:             year1 = desconvertir(year1);
  2657     0CC6  0848               	movf	_year1^(0+128),w
  2658     0CC7  160A  158A  232E  120A  158A  	fcall	_desconvertir
  2659     0CCC  1683               	bsf	3,5	;RP0=1, select bank1
  2660     0CCD  00C8               	movwf	_year1^(0+128)
  2661                           
  2662                           ;main.c: 277:             enviar_x(minuto, hora, fecha1, mes1, year1);
  2663     0CCE  084E               	movf	_hora^(0+128),w
  2664     0CCF  00F2               	movwf	enviar_x@val2
  2665     0CD0  084C               	movf	_fecha1^(0+128),w
  2666     0CD1  00F3               	movwf	enviar_x@val3
  2667     0CD2  084A               	movf	_mes1^(0+128),w
  2668     0CD3  00F4               	movwf	enviar_x@val4
  2669     0CD4  0848               	movf	_year1^(0+128),w
  2670     0CD5  00F5               	movwf	enviar_x@val5
  2671     0CD6  0850               	movf	_minuto^(0+128),w
  2672     0CD7  2A25               	goto	L4
  2673     0CD8                     __end_of_main:
  2674                           
  2675                           	psect	text1
  2676     02CB                     __ptext1:	
  2677 ;; *************** function _sprintf *****************
  2678 ;; Defined at:
  2679 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  sp              1    wreg     PTR unsigned char 
  2682 ;;		 -> valADC(3), 
  2683 ;;  f               1    0[BANK1 ] PTR const unsigned char 
  2684 ;;		 -> STR_5(5), 
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  sp              1   27[BANK1 ] PTR unsigned char 
  2687 ;;		 -> valADC(3), 
  2688 ;;  fval            4   30[BANK1 ] PTR unsigned char 
  2689 ;;  tmpval          4   23[BANK1 ] struct .
  2690 ;;  val             4   17[BANK1 ] unsigned long 
  2691 ;;  prec            2   28[BANK1 ] int 
  2692 ;;  eexp            2   21[BANK1 ] int 
  2693 ;;  flag            2   15[BANK1 ] unsigned short 
  2694 ;;  cp              2    0        PTR const unsigned char 
  2695 ;;  len             2    0        unsigned int 
  2696 ;;  width           2    0        int 
  2697 ;;  c               1   34[BANK1 ] unsigned char 
  2698 ;;  ap              1   14[BANK1 ] PTR void [1]
  2699 ;;		 -> ?_sprintf(2), 
  2700 ;;  d               1    0        unsigned char 
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  2    0[BANK1 ] int 
  2703 ;; Registers used:
  2704 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 300/100
  2707 ;;		On exit  : B00/100
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2710 ;;      Params:         0       0       5       0       0
  2711 ;;      Locals:         0       0      25       0       0
  2712 ;;      Temps:          0       0       5       0       0
  2713 ;;      Totals:         0       0      35       0       0
  2714 ;;Total ram usage:       35 bytes
  2715 ;; Hardware stack levels used: 1
  2716 ;; Hardware stack levels required when called: 3
  2717 ;; This function calls:
  2718 ;;		___awdiv
  2719 ;;		___fladd
  2720 ;;		___fleq
  2721 ;;		___flge
  2722 ;;		___flmul
  2723 ;;		___flneg
  2724 ;;		___flsub
  2725 ;;		___fltol
  2726 ;;		___lldiv
  2727 ;;		___llmod
  2728 ;;		___wmul
  2729 ;;		___xxtofl
  2730 ;;		__div_to_l_
  2731 ;;		__tdiv_to_l_
  2732 ;;		_fround
  2733 ;;		_isdigit
  2734 ;;		_scale
  2735 ;; This function is called by:
  2736 ;;		_main
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740     02CB                     _sprintf:	
  2741                           ;psect for function _sprintf
  2742                           
  2743                           
  2744                           ;incstack = 0
  2745                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2746                           ;sprintf@sp stored from wreg
  2747     02CB  00BB               	movwf	sprintf@sp^(0+128)
  2748                           
  2749                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 517:  
      +                          int prec;
  2750     02CC  30A1               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2751     02CD  00AE               	movwf	sprintf@ap^(0+128)
  2752     02CE                     l4176:	
  2753                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2754                           
  2755                           
  2756                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2757     02CE  3001               	movlw	1
  2758     02CF  07A0               	addwf	sprintf@f^(0+128),f
  2759     02D0  30FF               	movlw	-1
  2760     02D1  0720               	addwf	sprintf@f^(0+128),w
  2761     02D2  0084               	movwf	4
  2762     02D3  120A  118A  200D  120A  118A  	fcall	stringdir
  2763     02D8  00C2               	movwf	sprintf@c^(0+128)
  2764     02D9  0842               	movf	sprintf@c^(0+128),w
  2765     02DA  1903               	btfsc	3,2
  2766     02DB  2FF0               	goto	l4178
  2767                           
  2768                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  2769     02DC  3025               	movlw	37
  2770     02DD  0642               	xorwf	sprintf@c^(0+128),w
  2771     02DE  1903               	btfsc	3,2
  2772     02DF  2AE4               	goto	l3990
  2773                           
  2774                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  2775     02E0  083B               	movf	sprintf@sp^(0+128),w
  2776     02E1  0084               	movwf	4
  2777     02E2  0842               	movf	sprintf@c^(0+128),w
  2778     02E3  2FE9               	goto	L10
  2779     02E4                     l3990:	
  2780                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  2781                           
  2782                           
  2783                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  2784     02E4  01AF               	clrf	sprintf@flag^(0+128)
  2785     02E5  01B0               	clrf	(sprintf@flag+1)^(0+128)
  2786                           
  2787                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 628:   if(*f == '
      +                          .') {
  2788     02E6  0820               	movf	sprintf@f^(0+128),w
  2789     02E7  0084               	movwf	4
  2790     02E8  120A  118A  200D  120A  118A  	fcall	stringdir
  2791     02ED  3A2E               	xorlw	46
  2792     02EE  1D03               	skipz
  2793     02EF  2B2E               	goto	l4008
  2794                           
  2795                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 629:    flag |= 0
      +                          x4000;
  2796     02F0  1730               	bsf	(sprintf@flag^(0+128)+1),6
  2797                           
  2798                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 630:    f++;
  2799     02F1  3001               	movlw	1
  2800     02F2  00A5               	movwf	??_sprintf^(0+128)
  2801     02F3  0825               	movf	??_sprintf^(0+128),w
  2802     02F4  07A0               	addwf	sprintf@f^(0+128),f
  2803                           
  2804                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 644:    {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 645:     prec = 0;
  2805     02F5  01BC               	clrf	sprintf@prec^(0+128)
  2806     02F6  01BD               	clrf	(sprintf@prec+1)^(0+128)
  2807     02F7                     l4006:	
  2808                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  2809                           
  2810                           
  2811                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  2812     02F7  0820               	movf	sprintf@f^(0+128),w
  2813     02F8  0084               	movwf	4
  2814     02F9  120A  118A  200D  120A  118A  	fcall	stringdir
  2815     02FE  160A  158A  22B3  120A  118A  	fcall	_isdigit
  2816     0303  1C03               	btfss	3,0
  2817     0304  2B34               	goto	l4014
  2818                           
  2819                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 647:      prec *=
      +                           10;
  2820     0305  300A               	movlw	10
  2821     0306  00F0               	movwf	___wmul@multiplier
  2822     0307  3000               	movlw	0
  2823     0308  00F1               	movwf	___wmul@multiplier+1
  2824     0309  083D               	movf	(sprintf@prec+1)^(0+128),w
  2825     030A  00F3               	movwf	___wmul@multiplicand+1
  2826     030B  083C               	movf	sprintf@prec^(0+128),w
  2827     030C  00F2               	movwf	___wmul@multiplicand
  2828     030D  160A  158A  236F  120A  118A  	fcall	___wmul
  2829     0312  0871               	movf	?___wmul+1,w
  2830     0313  00BD               	movwf	(sprintf@prec+1)^(0+128)
  2831     0314  0870               	movf	?___wmul,w
  2832     0315  00BC               	movwf	sprintf@prec^(0+128)
  2833                           
  2834                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 648:         prec
      +                           += *f++ - '0';
  2835     0316  0820               	movf	sprintf@f^(0+128),w
  2836     0317  0084               	movwf	4
  2837     0318  120A  118A  200D  120A  118A  	fcall	stringdir
  2838     031D  3ED0               	addlw	208
  2839     031E  00A5               	movwf	??_sprintf^(0+128)
  2840     031F  30FF               	movlw	255
  2841     0320  1803               	skipnc
  2842     0321  3000               	movlw	0
  2843     0322  00A6               	movwf	(??_sprintf^(0+128)+1)
  2844     0323  0825               	movf	??_sprintf^(0+128),w
  2845     0324  07BC               	addwf	sprintf@prec^(0+128),f
  2846     0325  1803               	skipnc
  2847     0326  0ABD               	incf	(sprintf@prec+1)^(0+128),f
  2848     0327  0826               	movf	(??_sprintf+1)^(0+128),w
  2849     0328  07BD               	addwf	(sprintf@prec+1)^(0+128),f
  2850     0329  3001               	movlw	1
  2851     032A  00A5               	movwf	??_sprintf^(0+128)
  2852     032B  0825               	movf	??_sprintf^(0+128),w
  2853     032C  07A0               	addwf	sprintf@f^(0+128),f
  2854     032D  2AF7               	goto	l4006
  2855     032E                     l4008:
  2856                           
  2857                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 652:    prec = 0;
  2858     032E  01BC               	clrf	sprintf@prec^(0+128)
  2859     032F  01BD               	clrf	(sprintf@prec+1)^(0+128)
  2860                           
  2861                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 654:    flag |= 0
      +                          x1000;
  2862     0330  1630               	bsf	(sprintf@flag^(0+128)+1),4
  2863     0331  2B34               	goto	l4014
  2864     0332                     l466:	
  2865                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 688:   case 'f':
  2866                           
  2867                           
  2868                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 689:    flag |= 0
      +                          x400;
  2869     0332  1530               	bsf	(sprintf@flag^(0+128)+1),2
  2870                           
  2871                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 690:    break;
  2872     0333  2B4E               	goto	l4016
  2873     0334                     l4014:
  2874     0334  3001               	movlw	1
  2875     0335  07A0               	addwf	sprintf@f^(0+128),f
  2876     0336  30FF               	movlw	-1
  2877     0337  0720               	addwf	sprintf@f^(0+128),w
  2878     0338  0084               	movwf	4
  2879     0339  120A  118A  200D  120A  118A  	fcall	stringdir
  2880     033E  00C2               	movwf	sprintf@c^(0+128)
  2881     033F  00A5               	movwf	??_sprintf^(0+128)
  2882     0340  01A6               	clrf	(??_sprintf^(0+128)+1)
  2883                           
  2884                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2885                           ; Switch size 1, requested type "simple"
  2886                           ; Number of cases is 1, Range of values is 0 to 0
  2887                           ; switch strategies available:
  2888                           ; Name         Instructions Cycles
  2889                           ; simple_byte            4     3 (average)
  2890                           ; direct_byte           11     8 (fixed)
  2891                           ; jumptable            260     6 (fixed)
  2892                           ;	Chosen strategy is simple_byte
  2893     0341  0826               	movf	(??_sprintf+1)^(0+128),w
  2894     0342  3A00               	xorlw	0	; case 0
  2895     0343  1903               	skipnz
  2896     0344  2B46               	goto	l4614
  2897     0345  2ACE               	goto	l4176
  2898     0346                     l4614:
  2899                           
  2900                           ; Switch size 1, requested type "simple"
  2901                           ; Number of cases is 2, Range of values is 0 to 102
  2902                           ; switch strategies available:
  2903                           ; Name         Instructions Cycles
  2904                           ; simple_byte            7     4 (average)
  2905                           ; jumptable            260     6 (fixed)
  2906                           ;	Chosen strategy is simple_byte
  2907     0346  0825               	movf	??_sprintf^(0+128),w
  2908     0347  3A00               	xorlw	0	; case 0
  2909     0348  1903               	skipnz
  2910     0349  2FF0               	goto	l4178
  2911     034A  3A66               	xorlw	102	; case 102
  2912     034B  1903               	skipnz
  2913     034C  2B32               	goto	l466
  2914     034D  2ACE               	goto	l4176
  2915     034E                     l4016:
  2916                           
  2917                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 851:   if(flag & 
      +                          (0x700)) {
  2918     034E  3000               	movlw	0
  2919     034F  052F               	andwf	sprintf@flag^(0+128),w
  2920     0350  00A5               	movwf	??_sprintf^(0+128)
  2921     0351  3007               	movlw	7
  2922     0352  0530               	andwf	(sprintf@flag+1)^(0+128),w
  2923     0353  00A6               	movwf	(??_sprintf+1)^(0+128)
  2924     0354  0825               	movf	??_sprintf^(0+128),w
  2925     0355  0426               	iorwf	(??_sprintf^(0+128)+1),w
  2926     0356  1903               	btfsc	3,2
  2927     0357  2FBA               	goto	l4158
  2928                           
  2929                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 853:    if(flag &
      +                           0x1000)
  2930     0358  1E30               	btfss	(sprintf@flag+1)^(0+128),4
  2931     0359  2B5E               	goto	l4022
  2932                           
  2933                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 855:     prec = 6
      +                          ;
  2934     035A  3006               	movlw	6
  2935     035B  00BC               	movwf	sprintf@prec^(0+128)
  2936     035C  3000               	movlw	0
  2937     035D  00BD               	movwf	(sprintf@prec^(0+128)+1)
  2938     035E                     l4022:
  2939                           
  2940                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 856:    fval = (*
      +                          (double *)__va_arg((*(double **)ap), (double)0));
  2941     035E  082E               	movf	sprintf@ap^(0+128),w
  2942     035F  0084               	movwf	4
  2943     0360  1383               	bcf	3,7	;select IRP bank0
  2944     0361  0800               	movf	0,w
  2945     0362  00BE               	movwf	sprintf@fval^(0+128)
  2946     0363  0A84               	incf	4,f
  2947     0364  0800               	movf	0,w
  2948     0365  00BF               	movwf	(sprintf@fval+1)^(0+128)
  2949     0366  0A84               	incf	4,f
  2950     0367  0800               	movf	0,w
  2951     0368  00C0               	movwf	(sprintf@fval+2)^(0+128)
  2952     0369  0A84               	incf	4,f
  2953     036A  0800               	movf	0,w
  2954     036B  00C1               	movwf	(sprintf@fval+3)^(0+128)
  2955     036C  3004               	movlw	4
  2956     036D  00A5               	movwf	??_sprintf^(0+128)
  2957     036E  0825               	movf	??_sprintf^(0+128),w
  2958     036F  07AE               	addwf	sprintf@ap^(0+128),f
  2959                           
  2960                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 857:    if(fval <
      +                           0.0) {
  2961     0370  0841               	movf	(sprintf@fval+3)^(0+128),w
  2962     0371  00F3               	movwf	___flge@ff1+3
  2963     0372  0840               	movf	(sprintf@fval+2)^(0+128),w
  2964     0373  00F2               	movwf	___flge@ff1+2
  2965     0374  083F               	movf	(sprintf@fval+1)^(0+128),w
  2966     0375  00F1               	movwf	___flge@ff1+1
  2967     0376  083E               	movf	sprintf@fval^(0+128),w
  2968     0377  00F0               	movwf	___flge@ff1
  2969     0378  3000               	movlw	0
  2970     0379  00F7               	movwf	___flge@ff2+3
  2971     037A  3000               	movlw	0
  2972     037B  00F6               	movwf	___flge@ff2+2
  2973     037C  3000               	movlw	0
  2974     037D  00F5               	movwf	___flge@ff2+1
  2975     037E  3000               	movlw	0
  2976     037F  00F4               	movwf	___flge@ff2
  2977     0380  160A  118A  2116  120A  118A  	fcall	___flge
  2978     0385  1803               	btfsc	3,0
  2979     0386  2BA0               	goto	l4032
  2980                           
  2981                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 858:     fval = -
      +                          fval;
  2982     0387  0841               	movf	(sprintf@fval+3)^(0+128),w
  2983     0388  00F3               	movwf	___flneg@f1+3
  2984     0389  0840               	movf	(sprintf@fval+2)^(0+128),w
  2985     038A  00F2               	movwf	___flneg@f1+2
  2986     038B  083F               	movf	(sprintf@fval+1)^(0+128),w
  2987     038C  00F1               	movwf	___flneg@f1+1
  2988     038D  083E               	movf	sprintf@fval^(0+128),w
  2989     038E  00F0               	movwf	___flneg@f1
  2990     038F  160A  158A  22AA  120A  118A  	fcall	___flneg
  2991     0394  0873               	movf	?___flneg+3,w
  2992     0395  00C1               	movwf	(sprintf@fval+3)^(0+128)
  2993     0396  0872               	movf	?___flneg+2,w
  2994     0397  00C0               	movwf	(sprintf@fval+2)^(0+128)
  2995     0398  0871               	movf	?___flneg+1,w
  2996     0399  00BF               	movwf	(sprintf@fval+1)^(0+128)
  2997     039A  0870               	movf	?___flneg,w
  2998     039B  00BE               	movwf	sprintf@fval^(0+128)
  2999                           
  3000                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 859:     flag |= 
      +                          0x03;
  3001     039C  3003               	movlw	3
  3002     039D  04AF               	iorwf	sprintf@flag^(0+128),f
  3003     039E  3000               	movlw	0
  3004     039F  04B0               	iorwf	(sprintf@flag+1)^(0+128),f
  3005     03A0                     l4032:
  3006                           
  3007                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 861:    eexp = 0;
  3008     03A0  01B5               	clrf	sprintf@eexp^(0+128)
  3009     03A1  01B6               	clrf	(sprintf@eexp+1)^(0+128)
  3010                           
  3011                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 862:    if( fval!
      +                          =0) {
  3012     03A2  0841               	movf	(sprintf@fval+3)^(0+128),w
  3013     03A3  00F3               	movwf	___fleq@ff1+3
  3014     03A4  0840               	movf	(sprintf@fval+2)^(0+128),w
  3015     03A5  00F2               	movwf	___fleq@ff1+2
  3016     03A6  083F               	movf	(sprintf@fval+1)^(0+128),w
  3017     03A7  00F1               	movwf	___fleq@ff1+1
  3018     03A8  083E               	movf	sprintf@fval^(0+128),w
  3019     03A9  00F0               	movwf	___fleq@ff1
  3020     03AA  3000               	movlw	0
  3021     03AB  00F7               	movwf	___fleq@ff2+3
  3022     03AC  3000               	movlw	0
  3023     03AD  00F6               	movwf	___fleq@ff2+2
  3024     03AE  3000               	movlw	0
  3025     03AF  00F5               	movwf	___fleq@ff2+1
  3026     03B0  3000               	movlw	0
  3027     03B1  00F4               	movwf	___fleq@ff2
  3028     03B2  160A  158A  25C0  120A  118A  	fcall	___fleq
  3029     03B7  1803               	btfsc	3,0
  3030     03B8  2C76               	goto	l4060
  3031                           
  3032                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 863:     (void)(*
      +                          (&eexp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) - 126);
  3033     03B9  1003               	clrc
  3034     03BA  0D40               	rlf	(sprintf@fval+2)^(0+128),w
  3035     03BB  0D41               	rlf	(sprintf@fval+3)^(0+128),w
  3036     03BC  3E82               	addlw	130
  3037     03BD  00B5               	movwf	sprintf@eexp^(0+128)
  3038     03BE  30FF               	movlw	255
  3039     03BF  1803               	skipnc
  3040     03C0  3000               	movlw	0
  3041     03C1  00B6               	movwf	(sprintf@eexp^(0+128)+1)
  3042                           
  3043                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 864:     eexp--;
  3044     03C2  30FF               	movlw	255
  3045     03C3  07B5               	addwf	sprintf@eexp^(0+128),f
  3046     03C4  1803               	skipnc
  3047     03C5  0AB6               	incf	(sprintf@eexp+1)^(0+128),f
  3048     03C6  30FF               	movlw	255
  3049     03C7  07B6               	addwf	(sprintf@eexp+1)^(0+128),f
  3050                           
  3051                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 865:     eexp *= 
      +                          3;
  3052     03C8  3003               	movlw	3
  3053     03C9  00F0               	movwf	___wmul@multiplier
  3054     03CA  3000               	movlw	0
  3055     03CB  00F1               	movwf	___wmul@multiplier+1
  3056     03CC  0836               	movf	(sprintf@eexp+1)^(0+128),w
  3057     03CD  00F3               	movwf	___wmul@multiplicand+1
  3058     03CE  0835               	movf	sprintf@eexp^(0+128),w
  3059     03CF  00F2               	movwf	___wmul@multiplicand
  3060     03D0  160A  158A  236F  120A  118A  	fcall	___wmul
  3061     03D5  0871               	movf	?___wmul+1,w
  3062     03D6  00B6               	movwf	(sprintf@eexp+1)^(0+128)
  3063     03D7  0870               	movf	?___wmul,w
  3064     03D8  00B5               	movwf	sprintf@eexp^(0+128)
  3065                           
  3066                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 866:     eexp /= 
      +                          10;
  3067     03D9  300A               	movlw	10
  3068     03DA  00F7               	movwf	___awdiv@divisor
  3069     03DB  3000               	movlw	0
  3070     03DC  00F8               	movwf	___awdiv@divisor+1
  3071     03DD  0836               	movf	(sprintf@eexp+1)^(0+128),w
  3072     03DE  00FA               	movwf	___awdiv@dividend+1
  3073     03DF  0835               	movf	sprintf@eexp^(0+128),w
  3074     03E0  00F9               	movwf	___awdiv@dividend
  3075     03E1  160A  158A  26ED  120A  118A  	fcall	___awdiv
  3076     03E6  0878               	movf	?___awdiv+1,w
  3077     03E7  1683               	bsf	3,5	;RP0=1, select bank1
  3078     03E8  00B6               	movwf	(sprintf@eexp+1)^(0+128)
  3079     03E9  0877               	movf	?___awdiv,w
  3080     03EA  00B5               	movwf	sprintf@eexp^(0+128)
  3081                           
  3082                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 867:     if(eexp 
      +                          < 0)
  3083     03EB  1FB6               	btfss	(sprintf@eexp+1)^(0+128),7
  3084     03EC  2BF3               	goto	l4048
  3085                           
  3086                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 868:      eexp--;
  3087     03ED  30FF               	movlw	255
  3088     03EE  07B5               	addwf	sprintf@eexp^(0+128),f
  3089     03EF  1803               	skipnc
  3090     03F0  0AB6               	incf	(sprintf@eexp+1)^(0+128),f
  3091     03F1  30FF               	movlw	255
  3092     03F2  07B6               	addwf	(sprintf@eexp+1)^(0+128),f
  3093     03F3                     l4048:
  3094                           
  3095                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 872:     tmpval.i
      +                          nteg = scale(-eexp);
  3096     03F3  0335               	decf	sprintf@eexp^(0+128),w
  3097     03F4  3AFF               	xorlw	255
  3098     03F5  120A  158A  24D8  120A  118A  	fcall	_scale
  3099     03FA  0841               	movf	?_scale+3,w
  3100     03FB  1683               	bsf	3,5	;RP0=1, select bank1
  3101     03FC  00BA               	movwf	(sprintf@tmpval+3)^(0+128)
  3102     03FD  1283               	bcf	3,5	;RP0=0, select bank0
  3103     03FE  0840               	movf	?_scale+2,w
  3104     03FF  1683               	bsf	3,5	;RP0=1, select bank1
  3105     0400  00B9               	movwf	(sprintf@tmpval+2)^(0+128)
  3106     0401  1283               	bcf	3,5	;RP0=0, select bank0
  3107     0402  083F               	movf	?_scale+1,w
  3108     0403  1683               	bsf	3,5	;RP0=1, select bank1
  3109     0404  00B8               	movwf	(sprintf@tmpval+1)^(0+128)
  3110     0405  1283               	bcf	3,5	;RP0=0, select bank0
  3111     0406  083E               	movf	?_scale,w
  3112     0407  1683               	bsf	3,5	;RP0=1, select bank1
  3113     0408  00B7               	movwf	sprintf@tmpval^(0+128)
  3114                           
  3115                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 873:     tmpval.i
      +                          nteg *= fval;
  3116     0409  0841               	movf	(sprintf@fval+3)^(0+128),w
  3117     040A  1283               	bcf	3,5	;RP0=0, select bank0
  3118     040B  00A7               	movwf	___flmul@b+3
  3119     040C  1683               	bsf	3,5	;RP0=1, select bank1
  3120     040D  0840               	movf	(sprintf@fval+2)^(0+128),w
  3121     040E  1283               	bcf	3,5	;RP0=0, select bank0
  3122     040F  00A6               	movwf	___flmul@b+2
  3123     0410  1683               	bsf	3,5	;RP0=1, select bank1
  3124     0411  083F               	movf	(sprintf@fval+1)^(0+128),w
  3125     0412  1283               	bcf	3,5	;RP0=0, select bank0
  3126     0413  00A5               	movwf	___flmul@b+1
  3127     0414  1683               	bsf	3,5	;RP0=1, select bank1
  3128     0415  083E               	movf	sprintf@fval^(0+128),w
  3129     0416  1283               	bcf	3,5	;RP0=0, select bank0
  3130     0417  00A4               	movwf	___flmul@b
  3131     0418  1683               	bsf	3,5	;RP0=1, select bank1
  3132     0419  083A               	movf	(sprintf@tmpval+3)^(0+128),w
  3133     041A  1283               	bcf	3,5	;RP0=0, select bank0
  3134     041B  00AB               	movwf	___flmul@a+3
  3135     041C  1683               	bsf	3,5	;RP0=1, select bank1
  3136     041D  0839               	movf	(sprintf@tmpval+2)^(0+128),w
  3137     041E  1283               	bcf	3,5	;RP0=0, select bank0
  3138     041F  00AA               	movwf	___flmul@a+2
  3139     0420  1683               	bsf	3,5	;RP0=1, select bank1
  3140     0421  0838               	movf	(sprintf@tmpval+1)^(0+128),w
  3141     0422  1283               	bcf	3,5	;RP0=0, select bank0
  3142     0423  00A9               	movwf	___flmul@a+1
  3143     0424  1683               	bsf	3,5	;RP0=1, select bank1
  3144     0425  0837               	movf	sprintf@tmpval^(0+128),w
  3145     0426  1283               	bcf	3,5	;RP0=0, select bank0
  3146     0427  00A8               	movwf	___flmul@a
  3147     0428  160A  118A  2527  120A  118A  	fcall	___flmul
  3148     042D  0827               	movf	?___flmul+3,w
  3149     042E  1683               	bsf	3,5	;RP0=1, select bank1
  3150     042F  00BA               	movwf	(sprintf@tmpval+3)^(0+128)
  3151     0430  1283               	bcf	3,5	;RP0=0, select bank0
  3152     0431  0826               	movf	?___flmul+2,w
  3153     0432  1683               	bsf	3,5	;RP0=1, select bank1
  3154     0433  00B9               	movwf	(sprintf@tmpval+2)^(0+128)
  3155     0434  1283               	bcf	3,5	;RP0=0, select bank0
  3156     0435  0825               	movf	?___flmul+1,w
  3157     0436  1683               	bsf	3,5	;RP0=1, select bank1
  3158     0437  00B8               	movwf	(sprintf@tmpval+1)^(0+128)
  3159     0438  1283               	bcf	3,5	;RP0=0, select bank0
  3160     0439  0824               	movf	?___flmul,w
  3161     043A  1683               	bsf	3,5	;RP0=1, select bank1
  3162     043B  00B7               	movwf	sprintf@tmpval^(0+128)
  3163                           
  3164                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 874:     if(tmpva
      +                          l.integ < 1.0)
  3165     043C  083A               	movf	(sprintf@tmpval+3)^(0+128),w
  3166     043D  00F3               	movwf	___flge@ff1+3
  3167     043E  0839               	movf	(sprintf@tmpval+2)^(0+128),w
  3168     043F  00F2               	movwf	___flge@ff1+2
  3169     0440  0838               	movf	(sprintf@tmpval+1)^(0+128),w
  3170     0441  00F1               	movwf	___flge@ff1+1
  3171     0442  0837               	movf	sprintf@tmpval^(0+128),w
  3172     0443  00F0               	movwf	___flge@ff1
  3173     0444  303F               	movlw	63
  3174     0445  00F7               	movwf	___flge@ff2+3
  3175     0446  3080               	movlw	128
  3176     0447  00F6               	movwf	___flge@ff2+2
  3177     0448  3000               	movlw	0
  3178     0449  00F5               	movwf	___flge@ff2+1
  3179     044A  3000               	movlw	0
  3180     044B  00F4               	movwf	___flge@ff2
  3181     044C  160A  118A  2116  120A  118A  	fcall	___flge
  3182     0451  1803               	btfsc	3,0
  3183     0452  2C59               	goto	l4056
  3184                           
  3185                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 875:      eexp--;
  3186     0453  30FF               	movlw	255
  3187     0454  07B5               	addwf	sprintf@eexp^(0+128),f
  3188     0455  1803               	skipnc
  3189     0456  0AB6               	incf	(sprintf@eexp+1)^(0+128),f
  3190     0457  30FF               	movlw	255
  3191     0458  2C75               	goto	L5
  3192     0459                     l4056:
  3193     0459  083A               	movf	(sprintf@tmpval+3)^(0+128),w
  3194     045A  00F3               	movwf	___flge@ff1+3
  3195     045B  0839               	movf	(sprintf@tmpval+2)^(0+128),w
  3196     045C  00F2               	movwf	___flge@ff1+2
  3197     045D  0838               	movf	(sprintf@tmpval+1)^(0+128),w
  3198     045E  00F1               	movwf	___flge@ff1+1
  3199     045F  0837               	movf	sprintf@tmpval^(0+128),w
  3200     0460  00F0               	movwf	___flge@ff1
  3201     0461  3041               	movlw	65
  3202     0462  00F7               	movwf	___flge@ff2+3
  3203     0463  3020               	movlw	32
  3204     0464  00F6               	movwf	___flge@ff2+2
  3205     0465  3000               	movlw	0
  3206     0466  00F5               	movwf	___flge@ff2+1
  3207     0467  3000               	movlw	0
  3208     0468  00F4               	movwf	___flge@ff2
  3209     0469  160A  118A  2116  120A  118A  	fcall	___flge
  3210     046E  1C03               	btfss	3,0
  3211     046F  2C76               	goto	l4060
  3212                           
  3213                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 877:      eexp++;
  3214     0470  3001               	movlw	1
  3215     0471  07B5               	addwf	sprintf@eexp^(0+128),f
  3216     0472  1803               	skipnc
  3217     0473  0AB6               	incf	(sprintf@eexp+1)^(0+128),f
  3218     0474  3000               	movlw	0
  3219     0475                     L5:
  3220     0475  07B6               	addwf	(sprintf@eexp+1)^(0+128),f
  3221     0476                     l4060:
  3222                           
  3223                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1138:      if(pre
      +                          c <= 12)
  3224     0476  083D               	movf	(sprintf@prec+1)^(0+128),w
  3225     0477  3A80               	xorlw	128
  3226     0478  00FF               	movwf	127
  3227     0479  3080               	movlw	128
  3228     047A  027F               	subwf	127,w
  3229     047B  1D03               	skipz
  3230     047C  2C7F               	goto	u6445
  3231     047D  300D               	movlw	13
  3232     047E  023C               	subwf	sprintf@prec^(0+128),w
  3233     047F                     u6445:
  3234     047F  1803               	skipnc
  3235     0480  2CB5               	goto	l4064
  3236                           
  3237                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1139:       fval 
      +                          += fround((unsigned int)prec);
  3238     0481  1683               	bsf	3,5	;RP0=1, select bank1
  3239     0482  1303               	bcf	3,6	;RP1=0, select bank1
  3240     0483  083C               	movf	sprintf@prec^(0+128),w
  3241     0484  120A  158A  200C  120A  118A  	fcall	_fround
  3242     0489  0841               	movf	?_fround+3,w
  3243     048A  00D3               	movwf	___fladd@b+3
  3244     048B  0840               	movf	?_fround+2,w
  3245     048C  00D2               	movwf	___fladd@b+2
  3246     048D  083F               	movf	?_fround+1,w
  3247     048E  00D1               	movwf	___fladd@b+1
  3248     048F  083E               	movf	?_fround,w
  3249     0490  00D0               	movwf	___fladd@b
  3250     0491  1683               	bsf	3,5	;RP0=1, select bank1
  3251     0492  0841               	movf	(sprintf@fval+3)^(0+128),w
  3252     0493  1283               	bcf	3,5	;RP0=0, select bank0
  3253     0494  00D7               	movwf	___fladd@a+3
  3254     0495  1683               	bsf	3,5	;RP0=1, select bank1
  3255     0496  0840               	movf	(sprintf@fval+2)^(0+128),w
  3256     0497  1283               	bcf	3,5	;RP0=0, select bank0
  3257     0498  00D6               	movwf	___fladd@a+2
  3258     0499  1683               	bsf	3,5	;RP0=1, select bank1
  3259     049A  083F               	movf	(sprintf@fval+1)^(0+128),w
  3260     049B  1283               	bcf	3,5	;RP0=0, select bank0
  3261     049C  00D5               	movwf	___fladd@a+1
  3262     049D  1683               	bsf	3,5	;RP0=1, select bank1
  3263     049E  083E               	movf	sprintf@fval^(0+128),w
  3264     049F  1283               	bcf	3,5	;RP0=0, select bank0
  3265     04A0  00D4               	movwf	___fladd@a
  3266     04A1  120A  118A  20CE  120A  118A  	fcall	___fladd
  3267     04A6  0853               	movf	?___fladd+3,w
  3268     04A7  1683               	bsf	3,5	;RP0=1, select bank1
  3269     04A8  00C1               	movwf	(sprintf@fval+3)^(0+128)
  3270     04A9  1283               	bcf	3,5	;RP0=0, select bank0
  3271     04AA  0852               	movf	?___fladd+2,w
  3272     04AB  1683               	bsf	3,5	;RP0=1, select bank1
  3273     04AC  00C0               	movwf	(sprintf@fval+2)^(0+128)
  3274     04AD  1283               	bcf	3,5	;RP0=0, select bank0
  3275     04AE  0851               	movf	?___fladd+1,w
  3276     04AF  1683               	bsf	3,5	;RP0=1, select bank1
  3277     04B0  00BF               	movwf	(sprintf@fval+1)^(0+128)
  3278     04B1  1283               	bcf	3,5	;RP0=0, select bank0
  3279     04B2  0850               	movf	?___fladd,w
  3280     04B3  1683               	bsf	3,5	;RP0=1, select bank1
  3281     04B4  00BE               	movwf	sprintf@fval^(0+128)
  3282     04B5                     l4064:
  3283                           
  3284                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1142:     if((eex
      +                          p > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  3285     04B5  1683               	bsf	3,5	;RP0=1, select bank1
  3286     04B6  1303               	bcf	3,6	;RP1=0, select bank1
  3287     04B7  0836               	movf	(sprintf@eexp+1)^(0+128),w
  3288     04B8  3A80               	xorlw	128
  3289     04B9  00FF               	movwf	127
  3290     04BA  3080               	movlw	128
  3291     04BB  027F               	subwf	127,w
  3292     04BC  1D03               	skipz
  3293     04BD  2CC0               	goto	u6455
  3294     04BE  300A               	movlw	10
  3295     04BF  0235               	subwf	sprintf@eexp^(0+128),w
  3296     04C0                     u6455:
  3297     04C0  1803               	skipnc
  3298     04C1  2D01               	goto	l4072
  3299     04C2  1683               	bsf	3,5	;RP0=1, select bank1
  3300     04C3  1303               	bcf	3,6	;RP1=0, select bank1
  3301     04C4  0841               	movf	(sprintf@fval+3)^(0+128),w
  3302     04C5  00F3               	movwf	___fleq@ff1+3
  3303     04C6  0840               	movf	(sprintf@fval+2)^(0+128),w
  3304     04C7  00F2               	movwf	___fleq@ff1+2
  3305     04C8  083F               	movf	(sprintf@fval+1)^(0+128),w
  3306     04C9  00F1               	movwf	___fleq@ff1+1
  3307     04CA  083E               	movf	sprintf@fval^(0+128),w
  3308     04CB  00F0               	movwf	___fleq@ff1
  3309     04CC  3000               	movlw	0
  3310     04CD  00F7               	movwf	___fleq@ff2+3
  3311     04CE  3000               	movlw	0
  3312     04CF  00F6               	movwf	___fleq@ff2+2
  3313     04D0  3000               	movlw	0
  3314     04D1  00F5               	movwf	___fleq@ff2+1
  3315     04D2  3000               	movlw	0
  3316     04D3  00F4               	movwf	___fleq@ff2
  3317     04D4  160A  158A  25C0  120A  118A  	fcall	___fleq
  3318     04D9  1803               	btfsc	3,0
  3319     04DA  2D5E               	goto	l4086
  3320     04DB  0841               	movf	(sprintf@fval+3)^(0+128),w
  3321     04DC  1283               	bcf	3,5	;RP0=0, select bank0
  3322     04DD  00D4               	movwf	___fltol@f1+3
  3323     04DE  1683               	bsf	3,5	;RP0=1, select bank1
  3324     04DF  0840               	movf	(sprintf@fval+2)^(0+128),w
  3325     04E0  1283               	bcf	3,5	;RP0=0, select bank0
  3326     04E1  00D3               	movwf	___fltol@f1+2
  3327     04E2  1683               	bsf	3,5	;RP0=1, select bank1
  3328     04E3  083F               	movf	(sprintf@fval+1)^(0+128),w
  3329     04E4  1283               	bcf	3,5	;RP0=0, select bank0
  3330     04E5  00D2               	movwf	___fltol@f1+1
  3331     04E6  1683               	bsf	3,5	;RP0=1, select bank1
  3332     04E7  083E               	movf	sprintf@fval^(0+128),w
  3333     04E8  1283               	bcf	3,5	;RP0=0, select bank0
  3334     04E9  00D1               	movwf	___fltol@f1
  3335     04EA  160A  118A  2047  120A  118A  	fcall	___fltol
  3336     04EF  0854               	movf	?___fltol+3,w
  3337     04F0  0453               	iorwf	?___fltol+2,w
  3338     04F1  0452               	iorwf	?___fltol+1,w
  3339     04F2  0451               	iorwf	?___fltol,w
  3340     04F3  1D03               	skipz
  3341     04F4  2D5E               	goto	l4086
  3342     04F5  1683               	bsf	3,5	;RP0=1, select bank1
  3343     04F6  0836               	movf	(sprintf@eexp+1)^(0+128),w
  3344     04F7  3A80               	xorlw	128
  3345     04F8  00FF               	movwf	127
  3346     04F9  3080               	movlw	128
  3347     04FA  027F               	subwf	127,w
  3348     04FB  1D03               	skipz
  3349     04FC  2CFF               	goto	u6485
  3350     04FD  3002               	movlw	2
  3351     04FE  0235               	subwf	sprintf@eexp^(0+128),w
  3352     04FF                     u6485:
  3353     04FF  1C03               	skipc
  3354     0500  2D5E               	goto	l4086
  3355     0501                     l4072:
  3356                           
  3357                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1146:      if(tmp
      +                          val.integ < 4.294967296){
  3358     0501  1683               	bsf	3,5	;RP0=1, select bank1
  3359     0502  1303               	bcf	3,6	;RP1=0, select bank1
  3360     0503  083A               	movf	(sprintf@tmpval+3)^(0+128),w
  3361     0504  00F3               	movwf	___flge@ff1+3
  3362     0505  0839               	movf	(sprintf@tmpval+2)^(0+128),w
  3363     0506  00F2               	movwf	___flge@ff1+2
  3364     0507  0838               	movf	(sprintf@tmpval+1)^(0+128),w
  3365     0508  00F1               	movwf	___flge@ff1+1
  3366     0509  0837               	movf	sprintf@tmpval^(0+128),w
  3367     050A  00F0               	movwf	___flge@ff1
  3368     050B  3040               	movlw	64
  3369     050C  00F7               	movwf	___flge@ff2+3
  3370     050D  3089               	movlw	137
  3371     050E  00F6               	movwf	___flge@ff2+2
  3372     050F  3070               	movlw	112
  3373     0510  00F5               	movwf	___flge@ff2+1
  3374     0511  305F               	movlw	95
  3375     0512  00F4               	movwf	___flge@ff2
  3376     0513  160A  118A  2116  120A  118A  	fcall	___flge
  3377     0518  1803               	btfsc	3,0
  3378     0519  2D1C               	goto	l4076
  3379                           
  3380                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1147:       eexp 
      +                          -= (sizeof dpowers/sizeof dpowers[0])-1;
  3381     051A  30F7               	movlw	247
  3382     051B  2D1D               	goto	L6
  3383     051C                     l4076:	
  3384                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1148:      }else{
  3385                           
  3386                           
  3387                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1149:       eexp 
      +                          -= (sizeof dpowers/sizeof dpowers[0])-2;
  3388     051C  30F8               	movlw	248
  3389     051D                     L6:
  3390     051D  07B5               	addwf	sprintf@eexp^(0+128),f
  3391     051E  1803               	skipnc
  3392     051F  0AB6               	incf	(sprintf@eexp+1)^(0+128),f
  3393     0520  30FF               	movlw	255
  3394     0521  07B6               	addwf	(sprintf@eexp+1)^(0+128),f
  3395                           
  3396                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1152:      val = 
      +                          ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_l_(fval,tmpval.integ));
  3397     0522  0835               	movf	sprintf@eexp^(0+128),w
  3398     0523  120A  158A  24D8  120A  118A  	fcall	_scale
  3399     0528  0841               	movf	?_scale+3,w
  3400     0529  1683               	bsf	3,5	;RP0=1, select bank1
  3401     052A  00BA               	movwf	(sprintf@tmpval+3)^(0+128)
  3402     052B  1283               	bcf	3,5	;RP0=0, select bank0
  3403     052C  0840               	movf	?_scale+2,w
  3404     052D  1683               	bsf	3,5	;RP0=1, select bank1
  3405     052E  00B9               	movwf	(sprintf@tmpval+2)^(0+128)
  3406     052F  1283               	bcf	3,5	;RP0=0, select bank0
  3407     0530  083F               	movf	?_scale+1,w
  3408     0531  1683               	bsf	3,5	;RP0=1, select bank1
  3409     0532  00B8               	movwf	(sprintf@tmpval+1)^(0+128)
  3410     0533  1283               	bcf	3,5	;RP0=0, select bank0
  3411     0534  083E               	movf	?_scale,w
  3412     0535  1683               	bsf	3,5	;RP0=1, select bank1
  3413     0536  00B7               	movwf	sprintf@tmpval^(0+128)
  3414     0537  0841               	movf	(sprintf@fval+3)^(0+128),w
  3415     0538  00F3               	movwf	__div_to_l_@f1+3
  3416     0539  0840               	movf	(sprintf@fval+2)^(0+128),w
  3417     053A  00F2               	movwf	__div_to_l_@f1+2
  3418     053B  083F               	movf	(sprintf@fval+1)^(0+128),w
  3419     053C  00F1               	movwf	__div_to_l_@f1+1
  3420     053D  083E               	movf	sprintf@fval^(0+128),w
  3421     053E  00F0               	movwf	__div_to_l_@f1
  3422     053F  083A               	movf	(sprintf@tmpval+3)^(0+128),w
  3423     0540  00F7               	movwf	__div_to_l_@f2+3
  3424     0541  0839               	movf	(sprintf@tmpval+2)^(0+128),w
  3425     0542  00F6               	movwf	__div_to_l_@f2+2
  3426     0543  0838               	movf	(sprintf@tmpval+1)^(0+128),w
  3427     0544  00F5               	movwf	__div_to_l_@f2+1
  3428     0545  0837               	movf	sprintf@tmpval^(0+128),w
  3429     0546  00F4               	movwf	__div_to_l_@f2
  3430     0547  160A  118A  224A  120A  118A  	fcall	__div_to_l_
  3431     054C  0873               	movf	?__div_to_l_+3,w
  3432     054D  1683               	bsf	3,5	;RP0=1, select bank1
  3433     054E  00B4               	movwf	(sprintf@val+3)^(0+128)
  3434     054F  0872               	movf	?__div_to_l_+2,w
  3435     0550  00B3               	movwf	(sprintf@val+2)^(0+128)
  3436     0551  0871               	movf	?__div_to_l_+1,w
  3437     0552  00B2               	movwf	(sprintf@val+1)^(0+128)
  3438     0553  0870               	movf	?__div_to_l_,w
  3439     0554  00B1               	movwf	sprintf@val^(0+128)
  3440                           
  3441                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1155:      fval =
      +                           0.0;
  3442     0555  3000               	movlw	0
  3443     0556  00C1               	movwf	(sprintf@fval+3)^(0+128)
  3444     0557  3000               	movlw	0
  3445     0558  00C0               	movwf	(sprintf@fval+2)^(0+128)
  3446     0559  3000               	movlw	0
  3447     055A  00BF               	movwf	(sprintf@fval+1)^(0+128)
  3448     055B  3000               	movlw	0
  3449     055C  00BE               	movwf	sprintf@fval^(0+128)
  3450                           
  3451                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1156:     } else 
      +                          {
  3452     055D  2DC0               	goto	l4092
  3453     055E                     l4086:
  3454                           
  3455                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1157:      val = 
      +                          (unsigned long)fval;
  3456     055E  1683               	bsf	3,5	;RP0=1, select bank1
  3457     055F  1303               	bcf	3,6	;RP1=0, select bank1
  3458     0560  0841               	movf	(sprintf@fval+3)^(0+128),w
  3459     0561  1283               	bcf	3,5	;RP0=0, select bank0
  3460     0562  00D4               	movwf	___fltol@f1+3
  3461     0563  1683               	bsf	3,5	;RP0=1, select bank1
  3462     0564  0840               	movf	(sprintf@fval+2)^(0+128),w
  3463     0565  1283               	bcf	3,5	;RP0=0, select bank0
  3464     0566  00D3               	movwf	___fltol@f1+2
  3465     0567  1683               	bsf	3,5	;RP0=1, select bank1
  3466     0568  083F               	movf	(sprintf@fval+1)^(0+128),w
  3467     0569  1283               	bcf	3,5	;RP0=0, select bank0
  3468     056A  00D2               	movwf	___fltol@f1+1
  3469     056B  1683               	bsf	3,5	;RP0=1, select bank1
  3470     056C  083E               	movf	sprintf@fval^(0+128),w
  3471     056D  1283               	bcf	3,5	;RP0=0, select bank0
  3472     056E  00D1               	movwf	___fltol@f1
  3473     056F  160A  118A  2047  120A  118A  	fcall	___fltol
  3474     0574  0854               	movf	?___fltol+3,w
  3475     0575  1683               	bsf	3,5	;RP0=1, select bank1
  3476     0576  00B4               	movwf	(sprintf@val+3)^(0+128)
  3477     0577  1283               	bcf	3,5	;RP0=0, select bank0
  3478     0578  0853               	movf	?___fltol+2,w
  3479     0579  1683               	bsf	3,5	;RP0=1, select bank1
  3480     057A  00B3               	movwf	(sprintf@val+2)^(0+128)
  3481     057B  1283               	bcf	3,5	;RP0=0, select bank0
  3482     057C  0852               	movf	?___fltol+1,w
  3483     057D  1683               	bsf	3,5	;RP0=1, select bank1
  3484     057E  00B2               	movwf	(sprintf@val+1)^(0+128)
  3485     057F  1283               	bcf	3,5	;RP0=0, select bank0
  3486     0580  0851               	movf	?___fltol,w
  3487     0581  1683               	bsf	3,5	;RP0=1, select bank1
  3488     0582  00B1               	movwf	sprintf@val^(0+128)
  3489                           
  3490                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1158:      fval -
      +                          = (double)val;
  3491     0583  0834               	movf	(sprintf@val+3)^(0+128),w
  3492     0584  00F3               	movwf	___xxtofl@val+3
  3493     0585  0833               	movf	(sprintf@val+2)^(0+128),w
  3494     0586  00F2               	movwf	___xxtofl@val+2
  3495     0587  0832               	movf	(sprintf@val+1)^(0+128),w
  3496     0588  00F1               	movwf	___xxtofl@val+1
  3497     0589  0831               	movf	sprintf@val^(0+128),w
  3498     058A  00F0               	movwf	___xxtofl@val
  3499     058B  3000               	movlw	0
  3500     058C  160A  118A  21A9  120A  118A  	fcall	___xxtofl
  3501     0591  0873               	movf	?___xxtofl+3,w
  3502     0592  1283               	bcf	3,5	;RP0=0, select bank0
  3503     0593  00E7               	movwf	___flsub@a+3
  3504     0594  0872               	movf	?___xxtofl+2,w
  3505     0595  00E6               	movwf	___flsub@a+2
  3506     0596  0871               	movf	?___xxtofl+1,w
  3507     0597  00E5               	movwf	___flsub@a+1
  3508     0598  0870               	movf	?___xxtofl,w
  3509     0599  00E4               	movwf	___flsub@a
  3510     059A  1683               	bsf	3,5	;RP0=1, select bank1
  3511     059B  0841               	movf	(sprintf@fval+3)^(0+128),w
  3512     059C  1283               	bcf	3,5	;RP0=0, select bank0
  3513     059D  00EB               	movwf	___flsub@b+3
  3514     059E  1683               	bsf	3,5	;RP0=1, select bank1
  3515     059F  0840               	movf	(sprintf@fval+2)^(0+128),w
  3516     05A0  1283               	bcf	3,5	;RP0=0, select bank0
  3517     05A1  00EA               	movwf	___flsub@b+2
  3518     05A2  1683               	bsf	3,5	;RP0=1, select bank1
  3519     05A3  083F               	movf	(sprintf@fval+1)^(0+128),w
  3520     05A4  1283               	bcf	3,5	;RP0=0, select bank0
  3521     05A5  00E9               	movwf	___flsub@b+1
  3522     05A6  1683               	bsf	3,5	;RP0=1, select bank1
  3523     05A7  083E               	movf	sprintf@fval^(0+128),w
  3524     05A8  1283               	bcf	3,5	;RP0=0, select bank0
  3525     05A9  00E8               	movwf	___flsub@b
  3526     05AA  160A  158A  22F1  120A  118A  	fcall	___flsub
  3527     05AF  0867               	movf	?___flsub+3,w
  3528     05B0  1683               	bsf	3,5	;RP0=1, select bank1
  3529     05B1  00C1               	movwf	(sprintf@fval+3)^(0+128)
  3530     05B2  1283               	bcf	3,5	;RP0=0, select bank0
  3531     05B3  0866               	movf	?___flsub+2,w
  3532     05B4  1683               	bsf	3,5	;RP0=1, select bank1
  3533     05B5  00C0               	movwf	(sprintf@fval+2)^(0+128)
  3534     05B6  1283               	bcf	3,5	;RP0=0, select bank0
  3535     05B7  0865               	movf	?___flsub+1,w
  3536     05B8  1683               	bsf	3,5	;RP0=1, select bank1
  3537     05B9  00BF               	movwf	(sprintf@fval+1)^(0+128)
  3538     05BA  1283               	bcf	3,5	;RP0=0, select bank0
  3539     05BB  0864               	movf	?___flsub,w
  3540     05BC  1683               	bsf	3,5	;RP0=1, select bank1
  3541     05BD  00BE               	movwf	sprintf@fval^(0+128)
  3542                           
  3543                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1159:      eexp =
      +                           0;
  3544     05BE  01B5               	clrf	sprintf@eexp^(0+128)
  3545     05BF  01B6               	clrf	(sprintf@eexp+1)^(0+128)
  3546     05C0                     l4092:
  3547                           
  3548                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1162:     for(c =
      +                           1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3549     05C0  01C2               	clrf	sprintf@c^(0+128)
  3550     05C1  0AC2               	incf	sprintf@c^(0+128),f
  3551     05C2                     l4098:
  3552                           
  3553                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1163:      if(val
      +                           < dpowers[c])
  3554     05C2  0842               	movf	sprintf@c^(0+128),w
  3555     05C3  00A5               	movwf	??_sprintf^(0+128)
  3556     05C4  3001               	movlw	1
  3557     05C5                     u6505:
  3558     05C5  1003               	clrc
  3559     05C6  0DA5               	rlf	??_sprintf^(0+128),f
  3560     05C7  3EFF               	addlw	-1
  3561     05C8  1D03               	skipz
  3562     05C9  2DC5               	goto	u6505
  3563     05CA  1003               	clrc
  3564     05CB  0D25               	rlf	??_sprintf^(0+128),w
  3565     05CC  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3566     05CD  0084               	movwf	4
  3567     05CE  120A  118A  200D  120A  118A  	fcall	stringdir
  3568     05D3  00A6               	movwf	(??_sprintf+1)^(0+128)
  3569     05D4  120A  118A  200D  120A  118A  	fcall	stringdir
  3570     05D9  00A7               	movwf	((??_sprintf+1)^(0+128)+1)
  3571     05DA  120A  118A  200D  120A  118A  	fcall	stringdir
  3572     05DF  00A8               	movwf	((??_sprintf+1)^(0+128)+2)
  3573     05E0  120A  118A  200D  120A  118A  	fcall	stringdir
  3574     05E5  00A9               	movwf	((??_sprintf+1)^(0+128)+3)
  3575     05E6  0829               	movf	(??_sprintf+4)^(0+128),w
  3576     05E7  0234               	subwf	(sprintf@val+3)^(0+128),w
  3577     05E8  1D03               	skipz
  3578     05E9  2DF4               	goto	u6515
  3579     05EA  0828               	movf	(??_sprintf+3)^(0+128),w
  3580     05EB  0233               	subwf	(sprintf@val+2)^(0+128),w
  3581     05EC  1D03               	skipz
  3582     05ED  2DF4               	goto	u6515
  3583     05EE  0827               	movf	(??_sprintf+2)^(0+128),w
  3584     05EF  0232               	subwf	(sprintf@val+1)^(0+128),w
  3585     05F0  1D03               	skipz
  3586     05F1  2DF4               	goto	u6515
  3587     05F2  0826               	movf	(??_sprintf+1)^(0+128),w
  3588     05F3  0231               	subwf	sprintf@val^(0+128),w
  3589     05F4                     u6515:
  3590     05F4  1C03               	btfss	3,0
  3591     05F5  2DFE               	goto	l4104
  3592     05F6  3001               	movlw	1
  3593     05F7  00A5               	movwf	??_sprintf^(0+128)
  3594     05F8  0825               	movf	??_sprintf^(0+128),w
  3595     05F9  07C2               	addwf	sprintf@c^(0+128),f
  3596     05FA  300A               	movlw	10
  3597     05FB  0642               	xorwf	sprintf@c^(0+128),w
  3598     05FC  1D03               	btfss	3,2
  3599     05FD  2DC2               	goto	l4098
  3600     05FE                     l4104:
  3601                           
  3602                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1201:     {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1214:     if(flag & 0x0
      +                          3)
  3603     05FE  082F               	movf	sprintf@flag^(0+128),w
  3604     05FF  3903               	andlw	3
  3605     0600  1903               	btfsc	3,2
  3606     0601  2E0B               	goto	l492
  3607                           
  3608                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1216:      ((*sp+
      +                          + = ('-')));
  3609     0602  083B               	movf	sprintf@sp^(0+128),w
  3610     0603  0084               	movwf	4
  3611     0604  302D               	movlw	45
  3612     0605                     L7:
  3613     0605  1383               	bcf	3,7	;select IRP bank0
  3614     0606  0080               	movwf	0
  3615     0607  3001               	movlw	1
  3616     0608  00A5               	movwf	??_sprintf^(0+128)
  3617     0609  0825               	movf	??_sprintf^(0+128),w
  3618     060A  07BB               	addwf	sprintf@sp^(0+128),f
  3619     060B                     l492:	
  3620                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1230:     };C:\Pr
      +                          ogram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1232:    }
  3621                           
  3622                           
  3623                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1222:    while(c-
      +                          -) {
  3624     060B  3001               	movlw	1
  3625     060C  02C2               	subwf	sprintf@c^(0+128),f
  3626     060D  0A42               	incf	sprintf@c^(0+128),w
  3627     060E  1903               	btfsc	3,2
  3628     060F  2E7D               	goto	l4122
  3629                           
  3630                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1226:     {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1227:      tmpval.vd = 
      +                          val/dpowers[c];
  3631     0610  0842               	movf	sprintf@c^(0+128),w
  3632     0611  00A5               	movwf	??_sprintf^(0+128)
  3633     0612  3001               	movlw	1
  3634     0613                     u6545:
  3635     0613  1003               	clrc
  3636     0614  0DA5               	rlf	??_sprintf^(0+128),f
  3637     0615  3EFF               	addlw	-1
  3638     0616  1D03               	skipz
  3639     0617  2E13               	goto	u6545
  3640     0618  1003               	clrc
  3641     0619  0D25               	rlf	??_sprintf^(0+128),w
  3642     061A  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3643     061B  0084               	movwf	4
  3644     061C  120A  118A  200D  120A  118A  	fcall	stringdir
  3645     0621  00F0               	movwf	___lldiv@divisor
  3646     0622  120A  118A  200D  120A  118A  	fcall	stringdir
  3647     0627  00F1               	movwf	___lldiv@divisor+1
  3648     0628  120A  118A  200D  120A  118A  	fcall	stringdir
  3649     062D  00F2               	movwf	___lldiv@divisor+2
  3650     062E  120A  118A  200D  120A  118A  	fcall	stringdir
  3651     0633  00F3               	movwf	___lldiv@divisor+3
  3652     0634  0834               	movf	(sprintf@val+3)^(0+128),w
  3653     0635  00F7               	movwf	___lldiv@dividend+3
  3654     0636  0833               	movf	(sprintf@val+2)^(0+128),w
  3655     0637  00F6               	movwf	___lldiv@dividend+2
  3656     0638  0832               	movf	(sprintf@val+1)^(0+128),w
  3657     0639  00F5               	movwf	___lldiv@dividend+1
  3658     063A  0831               	movf	sprintf@val^(0+128),w
  3659     063B  00F4               	movwf	___lldiv@dividend
  3660     063C  160A  158A  27A2  120A  118A  	fcall	___lldiv
  3661     0641  0873               	movf	?___lldiv+3,w
  3662     0642  1683               	bsf	3,5	;RP0=1, select bank1
  3663     0643  00BA               	movwf	(sprintf@tmpval+3)^(0+128)
  3664     0644  0872               	movf	?___lldiv+2,w
  3665     0645  00B9               	movwf	(sprintf@tmpval+2)^(0+128)
  3666     0646  0871               	movf	?___lldiv+1,w
  3667     0647  00B8               	movwf	(sprintf@tmpval+1)^(0+128)
  3668     0648  0870               	movf	?___lldiv,w
  3669     0649  00B7               	movwf	sprintf@tmpval^(0+128)
  3670                           
  3671                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1228:      tmpval
      +                          .vd %= 10;
  3672     064A  3000               	movlw	0
  3673     064B  00F3               	movwf	___llmod@divisor+3
  3674     064C  3000               	movlw	0
  3675     064D  00F2               	movwf	___llmod@divisor+2
  3676     064E  3000               	movlw	0
  3677     064F  00F1               	movwf	___llmod@divisor+1
  3678     0650  300A               	movlw	10
  3679     0651  00F0               	movwf	___llmod@divisor
  3680     0652  083A               	movf	(sprintf@tmpval+3)^(0+128),w
  3681     0653  00F7               	movwf	___llmod@dividend+3
  3682     0654  0839               	movf	(sprintf@tmpval+2)^(0+128),w
  3683     0655  00F6               	movwf	___llmod@dividend+2
  3684     0656  0838               	movf	(sprintf@tmpval+1)^(0+128),w
  3685     0657  00F5               	movwf	___llmod@dividend+1
  3686     0658  0837               	movf	sprintf@tmpval^(0+128),w
  3687     0659  00F4               	movwf	___llmod@dividend
  3688     065A  160A  158A  2653  120A  118A  	fcall	___llmod
  3689     065F  0873               	movf	?___llmod+3,w
  3690     0660  00BA               	movwf	(sprintf@tmpval+3)^(0+128)
  3691     0661  0872               	movf	?___llmod+2,w
  3692     0662  00B9               	movwf	(sprintf@tmpval+2)^(0+128)
  3693     0663  0871               	movf	?___llmod+1,w
  3694     0664  00B8               	movwf	(sprintf@tmpval+1)^(0+128)
  3695     0665  0870               	movf	?___llmod,w
  3696     0666  00B7               	movwf	sprintf@tmpval^(0+128)
  3697                           
  3698                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1229:      ((*sp+
      +                          + = ('0' + tmpval.vd)));
  3699     0667  083B               	movf	sprintf@sp^(0+128),w
  3700     0668  0084               	movwf	4
  3701     0669  0837               	movf	sprintf@tmpval^(0+128),w
  3702     066A  3E30               	addlw	48
  3703     066B  2E05               	goto	L7
  3704     066C                     l4116:
  3705                           
  3706                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1234:     ((*sp++
      +                           = ('0')));
  3707     066C  1683               	bsf	3,5	;RP0=1, select bank1
  3708     066D  1303               	bcf	3,6	;RP1=0, select bank1
  3709     066E  083B               	movf	sprintf@sp^(0+128),w
  3710     066F  0084               	movwf	4
  3711     0670  3030               	movlw	48
  3712     0671  1383               	bcf	3,7	;select IRP bank0
  3713     0672  0080               	movwf	0
  3714     0673  3001               	movlw	1
  3715     0674  00A5               	movwf	??_sprintf^(0+128)
  3716     0675  0825               	movf	??_sprintf^(0+128),w
  3717     0676  07BB               	addwf	sprintf@sp^(0+128),f
  3718                           
  3719                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1235:     eexp--;
  3720     0677  30FF               	movlw	255
  3721     0678  07B5               	addwf	sprintf@eexp^(0+128),f
  3722     0679  1803               	skipnc
  3723     067A  0AB6               	incf	(sprintf@eexp+1)^(0+128),f
  3724     067B  30FF               	movlw	255
  3725     067C  07B6               	addwf	(sprintf@eexp+1)^(0+128),f
  3726     067D                     l4122:
  3727                           
  3728                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1233:    while(ee
      +                          xp > 0) {
  3729     067D  0836               	movf	(sprintf@eexp+1)^(0+128),w
  3730     067E  3A80               	xorlw	128
  3731     067F  00FF               	movwf	127
  3732     0680  3080               	movlw	128
  3733     0681  027F               	subwf	127,w
  3734     0682  1D03               	skipz
  3735     0683  2E86               	goto	u6565
  3736     0684  3001               	movlw	1
  3737     0685  0235               	subwf	sprintf@eexp^(0+128),w
  3738     0686                     u6565:
  3739     0686  1803               	skipnc
  3740     0687  2E6C               	goto	l4116
  3741                           
  3742                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1237:    if(prec 
      +                          > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3743     0688  1683               	bsf	3,5	;RP0=1, select bank1
  3744     0689  1303               	bcf	3,6	;RP1=0, select bank1
  3745     068A  083D               	movf	(sprintf@prec+1)^(0+128),w
  3746     068B  3A80               	xorlw	128
  3747     068C  00FF               	movwf	127
  3748     068D  3080               	movlw	128
  3749     068E  027F               	subwf	127,w
  3750     068F  1D03               	skipz
  3751     0690  2E93               	goto	u6575
  3752     0691  3009               	movlw	9
  3753     0692  023C               	subwf	sprintf@prec^(0+128),w
  3754     0693                     u6575:
  3755     0693  1C03               	skipc
  3756     0694  2E99               	goto	l4128
  3757                           
  3758                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1238:     c = (si
      +                          zeof dpowers/sizeof dpowers[0])-2;
  3759     0695  3008               	movlw	8
  3760     0696  1683               	bsf	3,5	;RP0=1, select bank1
  3761     0697  1303               	bcf	3,6	;RP1=0, select bank1
  3762     0698  2E9C               	goto	L8
  3763     0699                     l4128:
  3764                           
  3765                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1240:     c = (ch
      +                          ar)prec;
  3766     0699  1683               	bsf	3,5	;RP0=1, select bank1
  3767     069A  1303               	bcf	3,6	;RP1=0, select bank1
  3768     069B  083C               	movf	sprintf@prec^(0+128),w
  3769     069C                     L8:
  3770     069C  00C2               	movwf	sprintf@c^(0+128)
  3771                           
  3772                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1241:    prec -= 
      +                          (int)c;
  3773     069D  0842               	movf	sprintf@c^(0+128),w
  3774     069E  00A5               	movwf	??_sprintf^(0+128)
  3775     069F  01A6               	clrf	(??_sprintf^(0+128)+1)
  3776     06A0  0825               	movf	??_sprintf^(0+128),w
  3777     06A1  02BC               	subwf	sprintf@prec^(0+128),f
  3778     06A2  0826               	movf	(??_sprintf+1)^(0+128),w
  3779     06A3  1C03               	skipc
  3780     06A4  03BD               	decf	(sprintf@prec+1)^(0+128),f
  3781     06A5  02BD               	subwf	(sprintf@prec+1)^(0+128),f
  3782                           
  3783                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1245:    if(c)
  3784     06A6  0842               	movf	sprintf@c^(0+128),w
  3785     06A7  1903               	btfsc	3,2
  3786     06A8  2EB2               	goto	l4136
  3787                           
  3788                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1247:     ((*sp++
      +                           = ('.')));
  3789     06A9  083B               	movf	sprintf@sp^(0+128),w
  3790     06AA  0084               	movwf	4
  3791     06AB  302E               	movlw	46
  3792     06AC  1383               	bcf	3,7	;select IRP bank0
  3793     06AD  0080               	movwf	0
  3794     06AE  3001               	movlw	1
  3795     06AF  00A5               	movwf	??_sprintf^(0+128)
  3796     06B0  0825               	movf	??_sprintf^(0+128),w
  3797     06B1  07BB               	addwf	sprintf@sp^(0+128),f
  3798     06B2                     l4136:
  3799                           
  3800                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1253:    val = (u
      +                          nsigned long)(fval * scale((signed char)c));
  3801     06B2  0842               	movf	sprintf@c^(0+128),w
  3802     06B3  120A  158A  24D8  120A  118A  	fcall	_scale
  3803     06B8  0841               	movf	?_scale+3,w
  3804     06B9  1683               	bsf	3,5	;RP0=1, select bank1
  3805     06BA  00AD               	movwf	(_sprintf$1118+3)^(0+128)
  3806     06BB  1283               	bcf	3,5	;RP0=0, select bank0
  3807     06BC  0840               	movf	?_scale+2,w
  3808     06BD  1683               	bsf	3,5	;RP0=1, select bank1
  3809     06BE  00AC               	movwf	(_sprintf$1118+2)^(0+128)
  3810     06BF  1283               	bcf	3,5	;RP0=0, select bank0
  3811     06C0  083F               	movf	?_scale+1,w
  3812     06C1  1683               	bsf	3,5	;RP0=1, select bank1
  3813     06C2  00AB               	movwf	(_sprintf$1118+1)^(0+128)
  3814     06C3  1283               	bcf	3,5	;RP0=0, select bank0
  3815     06C4  083E               	movf	?_scale,w
  3816     06C5  1683               	bsf	3,5	;RP0=1, select bank1
  3817     06C6  00AA               	movwf	_sprintf$1118^(0+128)
  3818                           
  3819                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1253:    val = (u
      +                          nsigned long)(fval * scale((signed char)c));
  3820     06C7  082D               	movf	(_sprintf$1118+3)^(0+128),w
  3821     06C8  1283               	bcf	3,5	;RP0=0, select bank0
  3822     06C9  00AB               	movwf	___flmul@a+3
  3823     06CA  1683               	bsf	3,5	;RP0=1, select bank1
  3824     06CB  082C               	movf	(_sprintf$1118+2)^(0+128),w
  3825     06CC  1283               	bcf	3,5	;RP0=0, select bank0
  3826     06CD  00AA               	movwf	___flmul@a+2
  3827     06CE  1683               	bsf	3,5	;RP0=1, select bank1
  3828     06CF  082B               	movf	(_sprintf$1118+1)^(0+128),w
  3829     06D0  1283               	bcf	3,5	;RP0=0, select bank0
  3830     06D1  00A9               	movwf	___flmul@a+1
  3831     06D2  1683               	bsf	3,5	;RP0=1, select bank1
  3832     06D3  082A               	movf	_sprintf$1118^(0+128),w
  3833     06D4  1283               	bcf	3,5	;RP0=0, select bank0
  3834     06D5  00A8               	movwf	___flmul@a
  3835     06D6  1683               	bsf	3,5	;RP0=1, select bank1
  3836     06D7  0841               	movf	(sprintf@fval+3)^(0+128),w
  3837     06D8  1283               	bcf	3,5	;RP0=0, select bank0
  3838     06D9  00A7               	movwf	___flmul@b+3
  3839     06DA  1683               	bsf	3,5	;RP0=1, select bank1
  3840     06DB  0840               	movf	(sprintf@fval+2)^(0+128),w
  3841     06DC  1283               	bcf	3,5	;RP0=0, select bank0
  3842     06DD  00A6               	movwf	___flmul@b+2
  3843     06DE  1683               	bsf	3,5	;RP0=1, select bank1
  3844     06DF  083F               	movf	(sprintf@fval+1)^(0+128),w
  3845     06E0  1283               	bcf	3,5	;RP0=0, select bank0
  3846     06E1  00A5               	movwf	___flmul@b+1
  3847     06E2  1683               	bsf	3,5	;RP0=1, select bank1
  3848     06E3  083E               	movf	sprintf@fval^(0+128),w
  3849     06E4  1283               	bcf	3,5	;RP0=0, select bank0
  3850     06E5  00A4               	movwf	___flmul@b
  3851     06E6  160A  118A  2527  120A  118A  	fcall	___flmul
  3852     06EB  0827               	movf	?___flmul+3,w
  3853     06EC  00D4               	movwf	___fltol@f1+3
  3854     06ED  0826               	movf	?___flmul+2,w
  3855     06EE  00D3               	movwf	___fltol@f1+2
  3856     06EF  0825               	movf	?___flmul+1,w
  3857     06F0  00D2               	movwf	___fltol@f1+1
  3858     06F1  0824               	movf	?___flmul,w
  3859     06F2  00D1               	movwf	___fltol@f1
  3860     06F3  160A  118A  2047  120A  118A  	fcall	___fltol
  3861     06F8  0854               	movf	?___fltol+3,w
  3862     06F9  1683               	bsf	3,5	;RP0=1, select bank1
  3863     06FA  00B4               	movwf	(sprintf@val+3)^(0+128)
  3864     06FB  1283               	bcf	3,5	;RP0=0, select bank0
  3865     06FC  0853               	movf	?___fltol+2,w
  3866     06FD  1683               	bsf	3,5	;RP0=1, select bank1
  3867     06FE  00B3               	movwf	(sprintf@val+2)^(0+128)
  3868     06FF  1283               	bcf	3,5	;RP0=0, select bank0
  3869     0700  0852               	movf	?___fltol+1,w
  3870     0701  1683               	bsf	3,5	;RP0=1, select bank1
  3871     0702  00B2               	movwf	(sprintf@val+1)^(0+128)
  3872     0703  1283               	bcf	3,5	;RP0=0, select bank0
  3873     0704  0851               	movf	?___fltol,w
  3874     0705  1683               	bsf	3,5	;RP0=1, select bank1
  3875     0706                     L9:
  3876     0706  00B1               	movwf	sprintf@val^(0+128)
  3877                           
  3878                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1254:    while(c-
      +                          -) {
  3879     0707  3001               	movlw	1
  3880     0708  02C2               	subwf	sprintf@c^(0+128),f
  3881     0709  0A42               	incf	sprintf@c^(0+128),w
  3882     070A  1903               	btfsc	3,2
  3883     070B  2FB5               	goto	l4156
  3884                           
  3885                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1255:     tmpval.
      +                          vd = val/dpowers[c];
  3886                           
  3887                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1254:    while(c-
      +                          -) {
  3888     070C  0842               	movf	sprintf@c^(0+128),w
  3889     070D  00A5               	movwf	??_sprintf^(0+128)
  3890     070E  3001               	movlw	1
  3891     070F                     u6595:
  3892     070F  1003               	clrc
  3893     0710  0DA5               	rlf	??_sprintf^(0+128),f
  3894     0711  3EFF               	addlw	-1
  3895     0712  1D03               	skipz
  3896     0713  2F0F               	goto	u6595
  3897     0714  1003               	clrc
  3898     0715  0D25               	rlf	??_sprintf^(0+128),w
  3899     0716  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3900     0717  0084               	movwf	4
  3901     0718  120A  118A  200D  120A  118A  	fcall	stringdir
  3902     071D  00F0               	movwf	___lldiv@divisor
  3903     071E  120A  118A  200D  120A  118A  	fcall	stringdir
  3904     0723  00F1               	movwf	___lldiv@divisor+1
  3905     0724  120A  118A  200D  120A  118A  	fcall	stringdir
  3906     0729  00F2               	movwf	___lldiv@divisor+2
  3907     072A  120A  118A  200D  120A  118A  	fcall	stringdir
  3908     072F  00F3               	movwf	___lldiv@divisor+3
  3909     0730  0834               	movf	(sprintf@val+3)^(0+128),w
  3910     0731  00F7               	movwf	___lldiv@dividend+3
  3911     0732  0833               	movf	(sprintf@val+2)^(0+128),w
  3912     0733  00F6               	movwf	___lldiv@dividend+2
  3913     0734  0832               	movf	(sprintf@val+1)^(0+128),w
  3914     0735  00F5               	movwf	___lldiv@dividend+1
  3915     0736  0831               	movf	sprintf@val^(0+128),w
  3916     0737  00F4               	movwf	___lldiv@dividend
  3917     0738  160A  158A  27A2  120A  118A  	fcall	___lldiv
  3918     073D  0873               	movf	?___lldiv+3,w
  3919     073E  1683               	bsf	3,5	;RP0=1, select bank1
  3920     073F  00BA               	movwf	(sprintf@tmpval+3)^(0+128)
  3921     0740  0872               	movf	?___lldiv+2,w
  3922     0741  00B9               	movwf	(sprintf@tmpval+2)^(0+128)
  3923     0742  0871               	movf	?___lldiv+1,w
  3924     0743  00B8               	movwf	(sprintf@tmpval+1)^(0+128)
  3925     0744  0870               	movf	?___lldiv,w
  3926     0745  00B7               	movwf	sprintf@tmpval^(0+128)
  3927                           
  3928                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1256:     tmpval.
      +                          vd %= 10;
  3929     0746  3000               	movlw	0
  3930     0747  00F3               	movwf	___llmod@divisor+3
  3931     0748  3000               	movlw	0
  3932     0749  00F2               	movwf	___llmod@divisor+2
  3933     074A  3000               	movlw	0
  3934     074B  00F1               	movwf	___llmod@divisor+1
  3935     074C  300A               	movlw	10
  3936     074D  00F0               	movwf	___llmod@divisor
  3937     074E  083A               	movf	(sprintf@tmpval+3)^(0+128),w
  3938     074F  00F7               	movwf	___llmod@dividend+3
  3939     0750  0839               	movf	(sprintf@tmpval+2)^(0+128),w
  3940     0751  00F6               	movwf	___llmod@dividend+2
  3941     0752  0838               	movf	(sprintf@tmpval+1)^(0+128),w
  3942     0753  00F5               	movwf	___llmod@dividend+1
  3943     0754  0837               	movf	sprintf@tmpval^(0+128),w
  3944     0755  00F4               	movwf	___llmod@dividend
  3945     0756  160A  158A  2653  120A  118A  	fcall	___llmod
  3946     075B  0873               	movf	?___llmod+3,w
  3947     075C  00BA               	movwf	(sprintf@tmpval+3)^(0+128)
  3948     075D  0872               	movf	?___llmod+2,w
  3949     075E  00B9               	movwf	(sprintf@tmpval+2)^(0+128)
  3950     075F  0871               	movf	?___llmod+1,w
  3951     0760  00B8               	movwf	(sprintf@tmpval+1)^(0+128)
  3952     0761  0870               	movf	?___llmod,w
  3953     0762  00B7               	movwf	sprintf@tmpval^(0+128)
  3954                           
  3955                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1257:     ((*sp++
      +                           = ('0' + tmpval.vd)));
  3956     0763  083B               	movf	sprintf@sp^(0+128),w
  3957     0764  0084               	movwf	4
  3958     0765  0837               	movf	sprintf@tmpval^(0+128),w
  3959     0766  3E30               	addlw	48
  3960     0767  1383               	bcf	3,7	;select IRP bank0
  3961     0768  0080               	movwf	0
  3962     0769  3001               	movlw	1
  3963     076A  00A5               	movwf	??_sprintf^(0+128)
  3964     076B  0825               	movf	??_sprintf^(0+128),w
  3965     076C  07BB               	addwf	sprintf@sp^(0+128),f
  3966                           
  3967                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1258:     val %= 
      +                          dpowers[c];
  3968     076D  0842               	movf	sprintf@c^(0+128),w
  3969     076E  00A5               	movwf	??_sprintf^(0+128)
  3970     076F  3001               	movlw	1
  3971     0770                     u6605:
  3972     0770  1003               	clrc
  3973     0771  0DA5               	rlf	??_sprintf^(0+128),f
  3974     0772  3EFF               	addlw	-1
  3975     0773  1D03               	skipz
  3976     0774  2F70               	goto	u6605
  3977     0775  1003               	clrc
  3978     0776  0D25               	rlf	??_sprintf^(0+128),w
  3979     0777  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3980     0778  0084               	movwf	4
  3981     0779  120A  118A  200D  120A  118A  	fcall	stringdir
  3982     077E  00F0               	movwf	___llmod@divisor
  3983     077F  120A  118A  200D  120A  118A  	fcall	stringdir
  3984     0784  00F1               	movwf	___llmod@divisor+1
  3985     0785  120A  118A  200D  120A  118A  	fcall	stringdir
  3986     078A  00F2               	movwf	___llmod@divisor+2
  3987     078B  120A  118A  200D  120A  118A  	fcall	stringdir
  3988     0790  00F3               	movwf	___llmod@divisor+3
  3989     0791  0834               	movf	(sprintf@val+3)^(0+128),w
  3990     0792  00F7               	movwf	___llmod@dividend+3
  3991     0793  0833               	movf	(sprintf@val+2)^(0+128),w
  3992     0794  00F6               	movwf	___llmod@dividend+2
  3993     0795  0832               	movf	(sprintf@val+1)^(0+128),w
  3994     0796  00F5               	movwf	___llmod@dividend+1
  3995     0797  0831               	movf	sprintf@val^(0+128),w
  3996     0798  00F4               	movwf	___llmod@dividend
  3997     0799  160A  158A  2653  120A  118A  	fcall	___llmod
  3998     079E  0873               	movf	?___llmod+3,w
  3999     079F  00B4               	movwf	(sprintf@val+3)^(0+128)
  4000     07A0  0872               	movf	?___llmod+2,w
  4001     07A1  00B3               	movwf	(sprintf@val+2)^(0+128)
  4002     07A2  0871               	movf	?___llmod+1,w
  4003     07A3  00B2               	movwf	(sprintf@val+1)^(0+128)
  4004     07A4  0870               	movf	?___llmod,w
  4005     07A5  2F06               	goto	L9
  4006     07A6                     l4150:
  4007                           
  4008                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1262:     ((*sp++
      +                           = ('0')));
  4009     07A6  083B               	movf	sprintf@sp^(0+128),w
  4010     07A7  0084               	movwf	4
  4011     07A8  3030               	movlw	48
  4012     07A9  1383               	bcf	3,7	;select IRP bank0
  4013     07AA  0080               	movwf	0
  4014     07AB  3001               	movlw	1
  4015     07AC  00A5               	movwf	??_sprintf^(0+128)
  4016     07AD  0825               	movf	??_sprintf^(0+128),w
  4017     07AE  07BB               	addwf	sprintf@sp^(0+128),f
  4018                           
  4019                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1263:     prec--;
  4020     07AF  30FF               	movlw	255
  4021     07B0  07BC               	addwf	sprintf@prec^(0+128),f
  4022     07B1  1803               	skipnc
  4023     07B2  0ABD               	incf	(sprintf@prec+1)^(0+128),f
  4024     07B3  30FF               	movlw	255
  4025     07B4  07BD               	addwf	(sprintf@prec+1)^(0+128),f
  4026     07B5                     l4156:
  4027                           
  4028                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1261:    while(pr
      +                          ec) {
  4029     07B5  083C               	movf	sprintf@prec^(0+128),w
  4030     07B6  043D               	iorwf	(sprintf@prec+1)^(0+128),w
  4031     07B7  1903               	btfsc	3,2
  4032     07B8  2ACE               	goto	l4176
  4033     07B9  2FA6               	goto	l4150
  4034     07BA                     l4158:
  4035                           
  4036                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1316:   if(prec =
      +                          = 0 && val == 0)
  4037     07BA  083C               	movf	sprintf@prec^(0+128),w
  4038     07BB  043D               	iorwf	(sprintf@prec+1)^(0+128),w
  4039     07BC  1D03               	btfss	3,2
  4040     07BD  2FCA               	goto	l507
  4041     07BE  0834               	movf	(sprintf@val+3)^(0+128),w
  4042     07BF  0433               	iorwf	(sprintf@val+2)^(0+128),w
  4043     07C0  0432               	iorwf	(sprintf@val+1)^(0+128),w
  4044     07C1  0431               	iorwf	sprintf@val^(0+128),w
  4045     07C2  1D03               	skipz
  4046     07C3  2FCA               	goto	l507
  4047                           
  4048                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1317:    prec++;
  4049     07C4  3001               	movlw	1
  4050     07C5  07BC               	addwf	sprintf@prec^(0+128),f
  4051     07C6  1803               	skipnc
  4052     07C7  0ABD               	incf	(sprintf@prec+1)^(0+128),f
  4053     07C8  3000               	movlw	0
  4054     07C9  07BD               	addwf	(sprintf@prec+1)^(0+128),f
  4055     07CA                     l507:
  4056                           
  4057                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1365:   if(c < pr
      +                          ec)
  4058     07CA  083D               	movf	(sprintf@prec+1)^(0+128),w
  4059     07CB  3A80               	xorlw	128
  4060     07CC  3C80               	sublw	128
  4061     07CD  1D03               	skipz
  4062     07CE  2FD1               	goto	u6655
  4063     07CF  083C               	movf	sprintf@prec^(0+128),w
  4064     07D0  0242               	subwf	sprintf@c^(0+128),w
  4065     07D1                     u6655:
  4066     07D1  1C03               	btfss	3,0
  4067     07D2  2FE0               	goto	l4170
  4068     07D3  1683               	bsf	3,5	;RP0=1, select bank1
  4069     07D4  1303               	bcf	3,6	;RP1=0, select bank1
  4070     07D5  083D               	movf	(sprintf@prec+1)^(0+128),w
  4071     07D6  3A80               	xorlw	128
  4072     07D7  00A5               	movwf	??_sprintf^(0+128)
  4073     07D8  3080               	movlw	128
  4074     07D9  0225               	subwf	??_sprintf^(0+128),w
  4075     07DA  1D03               	skipz
  4076     07DB  2FDE               	goto	u6665
  4077     07DC  0842               	movf	sprintf@c^(0+128),w
  4078     07DD  023C               	subwf	sprintf@prec^(0+128),w
  4079     07DE                     u6665:
  4080     07DE  1C03               	btfss	3,0
  4081     07DF  2FE0               	goto	l4170
  4082     07E0                     l4170:
  4083                           
  4084                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  4085     07E0  1683               	bsf	3,5	;RP0=1, select bank1
  4086     07E1  1303               	bcf	3,6	;RP1=0, select bank1
  4087     07E2  082F               	movf	sprintf@flag^(0+128),w
  4088     07E3  3903               	andlw	3
  4089     07E4  1903               	btfsc	3,2
  4090     07E5  2ACE               	goto	l4176
  4091                           
  4092                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  4093     07E6  083B               	movf	sprintf@sp^(0+128),w
  4094     07E7  0084               	movwf	4
  4095     07E8  302D               	movlw	45
  4096     07E9                     L10:
  4097     07E9  1383               	bcf	3,7	;select IRP bank0
  4098     07EA  0080               	movwf	0
  4099     07EB  3001               	movlw	1
  4100     07EC  00A5               	movwf	??_sprintf^(0+128)
  4101     07ED  0825               	movf	??_sprintf^(0+128),w
  4102     07EE  07BB               	addwf	sprintf@sp^(0+128),f
  4103     07EF  2ACE               	goto	l4176
  4104     07F0                     l4178:
  4105                           
  4106                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  4107     07F0  083B               	movf	sprintf@sp^(0+128),w
  4108     07F1  0084               	movwf	4
  4109     07F2  1383               	bcf	3,7	;select IRP bank0
  4110     07F3  0180               	clrf	0
  4111     07F4  0008               	return
  4112     07F5                     __end_of_sprintf:
  4113                           
  4114                           	psect	text2
  4115     0CD8                     __ptext2:	
  4116 ;; *************** function _scale *****************
  4117 ;; Defined at:
  4118 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  scl             1    wreg     char 
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;  scl             1   48[BANK0 ] char 
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  4   30[BANK0 ] char 
  4125 ;; Registers used:
  4126 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4127 ;; Tracked objects:
  4128 ;;		On entry : 300/100
  4129 ;;		On exit  : 300/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4132 ;;      Params:         0       4       0       0       0
  4133 ;;      Locals:         0       5       0       0       0
  4134 ;;      Temps:          0      10       0       0       0
  4135 ;;      Totals:         0      19       0       0       0
  4136 ;;Total ram usage:       19 bytes
  4137 ;; Hardware stack levels used: 1
  4138 ;; Hardware stack levels required when called: 2
  4139 ;; This function calls:
  4140 ;;		___awdiv
  4141 ;;		___awmod
  4142 ;;		___flmul
  4143 ;; This function is called by:
  4144 ;;		_sprintf
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148     0CD8                     _scale:	
  4149                           ;psect for function _scale
  4150                           
  4151                           
  4152                           ;incstack = 0
  4153                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4154                           ;scale@scl stored from wreg
  4155     0CD8  1283               	bcf	3,5	;RP0=0, select bank0
  4156     0CD9  00D0               	movwf	scale@scl
  4157                           
  4158                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 433: scale(signed
      +                           char scl);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 434: {;
      +                          C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 436:  if(scl < 0) 
      +                          {
  4159     0CDA  1FD0               	btfss	scale@scl,7
  4160     0CDB  2E6F               	goto	l3634
  4161                           
  4162                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 437:   scl = -scl
      +                          ;
  4163     0CDC  09D0               	comf	scale@scl,f
  4164     0CDD  0AD0               	incf	scale@scl,f
  4165                           
  4166                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 438:   if(scl>=11
      +                          0)
  4167     0CDE  0850               	movf	scale@scl,w
  4168     0CDF  3A80               	xorlw	128
  4169     0CE0  3E12               	addlw	-238
  4170     0CE1  1C03               	skipc
  4171     0CE2  2DBF               	goto	l3624
  4172                           
  4173                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 439:    return _n
      +                          powers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npo
      +                          wers_[(unsigned char)(scl%10)];
  4174     0CE3  300A               	movlw	10
  4175     0CE4  00F7               	movwf	___awdiv@divisor
  4176     0CE5  3000               	movlw	0
  4177     0CE6  00F8               	movwf	___awdiv@divisor+1
  4178     0CE7  0850               	movf	scale@scl,w
  4179     0CE8  00F2               	movwf	___awmod@dividend
  4180     0CE9  01F3               	clrf	___awmod@dividend+1
  4181     0CEA  1BF2               	btfsc	___awmod@dividend,7
  4182     0CEB  03F3               	decf	___awmod@dividend+1,f
  4183     0CEC  3064               	movlw	100
  4184     0CED  00F0               	movwf	___awmod@divisor
  4185     0CEE  3000               	movlw	0
  4186     0CEF  00F1               	movwf	___awmod@divisor+1
  4187     0CF0  160A  158A  2608  120A  158A  	fcall	___awmod
  4188     0CF5  0871               	movf	?___awmod+1,w
  4189     0CF6  00FA               	movwf	___awdiv@dividend+1
  4190     0CF7  0870               	movf	?___awmod,w
  4191     0CF8  00F9               	movwf	___awdiv@dividend
  4192     0CF9  160A  158A  26ED  120A  158A  	fcall	___awdiv
  4193     0CFE  0877               	movf	?___awdiv,w
  4194     0CFF  00C2               	movwf	??_scale
  4195     0D00  3001               	movlw	1
  4196     0D01                     u5355:
  4197     0D01  1003               	clrc
  4198     0D02  0DC2               	rlf	??_scale,f
  4199     0D03  3EFF               	addlw	-1
  4200     0D04  1D03               	skipz
  4201     0D05  2D01               	goto	u5355
  4202     0D06  1003               	clrc
  4203     0D07  0D42               	rlf	??_scale,w
  4204     0D08  3E59               	addlw	low (((__npowers_-__stringbase)| (0+32768)+36))
  4205     0D09  0084               	movwf	4
  4206     0D0A  120A  118A  200D  120A  158A  	fcall	stringdir
  4207     0D0F  00C3               	movwf	??_scale+1
  4208     0D10  120A  118A  200D  120A  158A  	fcall	stringdir
  4209     0D15  00C4               	movwf	??_scale+2
  4210     0D16  120A  118A  200D  120A  158A  	fcall	stringdir
  4211     0D1B  00C5               	movwf	??_scale+3
  4212     0D1C  120A  118A  200D  120A  158A  	fcall	stringdir
  4213     0D21  00C6               	movwf	??_scale+4
  4214     0D22  0846               	movf	??_scale+4,w
  4215     0D23  00A7               	movwf	___flmul@b+3
  4216     0D24  0845               	movf	??_scale+3,w
  4217     0D25  00A6               	movwf	___flmul@b+2
  4218     0D26  0844               	movf	??_scale+2,w
  4219     0D27  00A5               	movwf	___flmul@b+1
  4220     0D28  0843               	movf	??_scale+1,w
  4221     0D29  00A4               	movwf	___flmul@b
  4222     0D2A  3064               	movlw	100
  4223     0D2B  00F7               	movwf	___awdiv@divisor
  4224     0D2C  3000               	movlw	0
  4225     0D2D  00F8               	movwf	___awdiv@divisor+1
  4226     0D2E  0850               	movf	scale@scl,w
  4227     0D2F  00F9               	movwf	___awdiv@dividend
  4228     0D30  01FA               	clrf	___awdiv@dividend+1
  4229     0D31  1BF9               	btfsc	___awdiv@dividend,7
  4230     0D32  03FA               	decf	___awdiv@dividend+1,f
  4231     0D33  160A  158A  26ED  120A  158A  	fcall	___awdiv
  4232     0D38  0877               	movf	?___awdiv,w
  4233     0D39  00C7               	movwf	??_scale+5
  4234     0D3A  3001               	movlw	1
  4235     0D3B                     u5365:
  4236     0D3B  1003               	clrc
  4237     0D3C  0DC7               	rlf	??_scale+5,f
  4238     0D3D  3EFF               	addlw	-1
  4239     0D3E  1D03               	skipz
  4240     0D3F  2D3B               	goto	u5365
  4241     0D40  1003               	clrc
  4242     0D41  0D47               	rlf	??_scale+5,w
  4243     0D42  3E7D               	addlw	low (((__npowers_-__stringbase)| (0+32768)+72))
  4244     0D43  0084               	movwf	4
  4245     0D44  120A  118A  200D  120A  158A  	fcall	stringdir
  4246     0D49  00C8               	movwf	??_scale+6
  4247     0D4A  120A  118A  200D  120A  158A  	fcall	stringdir
  4248     0D4F  00C9               	movwf	??_scale+7
  4249     0D50  120A  118A  200D  120A  158A  	fcall	stringdir
  4250     0D55  00CA               	movwf	??_scale+8
  4251     0D56  120A  118A  200D  120A  158A  	fcall	stringdir
  4252     0D5B  00CB               	movwf	??_scale+9
  4253     0D5C  084B               	movf	??_scale+9,w
  4254     0D5D  00AB               	movwf	___flmul@a+3
  4255     0D5E  084A               	movf	??_scale+8,w
  4256     0D5F  00AA               	movwf	___flmul@a+2
  4257     0D60  0849               	movf	??_scale+7,w
  4258     0D61  00A9               	movwf	___flmul@a+1
  4259     0D62  0848               	movf	??_scale+6,w
  4260     0D63  00A8               	movwf	___flmul@a
  4261     0D64  160A  118A  2527  120A  158A  	fcall	___flmul
  4262     0D69  0827               	movf	?___flmul+3,w
  4263     0D6A  00CF               	movwf	_scale$1117+3
  4264     0D6B  0826               	movf	?___flmul+2,w
  4265     0D6C  00CE               	movwf	_scale$1117+2
  4266     0D6D  0825               	movf	?___flmul+1,w
  4267     0D6E  00CD               	movwf	_scale$1117+1
  4268     0D6F  0824               	movf	?___flmul,w
  4269     0D70  00CC               	movwf	_scale$1117
  4270                           
  4271                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 439:    return _n
      +                          powers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npo
      +                          wers_[(unsigned char)(scl%10)];
  4272     0D71  300A               	movlw	10
  4273     0D72  00F0               	movwf	___awmod@divisor
  4274     0D73  3000               	movlw	0
  4275     0D74  00F1               	movwf	___awmod@divisor+1
  4276     0D75  0850               	movf	scale@scl,w
  4277     0D76  00F2               	movwf	___awmod@dividend
  4278     0D77  01F3               	clrf	___awmod@dividend+1
  4279     0D78  1BF2               	btfsc	___awmod@dividend,7
  4280     0D79  03F3               	decf	___awmod@dividend+1,f
  4281     0D7A  160A  158A  2608  120A  158A  	fcall	___awmod
  4282     0D7F  0870               	movf	?___awmod,w
  4283     0D80  00C2               	movwf	??_scale
  4284     0D81  3001               	movlw	1
  4285     0D82                     u5375:
  4286     0D82  1003               	clrc
  4287     0D83  0DC2               	rlf	??_scale,f
  4288     0D84  3EFF               	addlw	-1
  4289     0D85  1D03               	skipz
  4290     0D86  2D82               	goto	u5375
  4291     0D87  1003               	clrc
  4292     0D88  0D42               	rlf	??_scale,w
  4293     0D89  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4294     0D8A  0084               	movwf	4
  4295     0D8B  120A  118A  200D  120A  158A  	fcall	stringdir
  4296     0D90  00C3               	movwf	??_scale+1
  4297     0D91  120A  118A  200D  120A  158A  	fcall	stringdir
  4298     0D96  00C4               	movwf	??_scale+2
  4299     0D97  120A  118A  200D  120A  158A  	fcall	stringdir
  4300     0D9C  00C5               	movwf	??_scale+3
  4301     0D9D  120A  118A  200D  120A  158A  	fcall	stringdir
  4302     0DA2  00C6               	movwf	??_scale+4
  4303     0DA3  0846               	movf	??_scale+4,w
  4304     0DA4  00A7               	movwf	___flmul@b+3
  4305     0DA5  0845               	movf	??_scale+3,w
  4306     0DA6  00A6               	movwf	___flmul@b+2
  4307     0DA7  0844               	movf	??_scale+2,w
  4308     0DA8  00A5               	movwf	___flmul@b+1
  4309     0DA9  0843               	movf	??_scale+1,w
  4310     0DAA  00A4               	movwf	___flmul@b
  4311     0DAB  084F               	movf	_scale$1117+3,w
  4312     0DAC  00AB               	movwf	___flmul@a+3
  4313     0DAD  084E               	movf	_scale$1117+2,w
  4314     0DAE  00AA               	movwf	___flmul@a+2
  4315     0DAF  084D               	movf	_scale$1117+1,w
  4316     0DB0  00A9               	movwf	___flmul@a+1
  4317     0DB1  084C               	movf	_scale$1117,w
  4318     0DB2  00A8               	movwf	___flmul@a
  4319     0DB3  160A  118A  2527   	fcall	___flmul
  4320     0DB6  0827               	movf	?___flmul+3,w
  4321     0DB7  00C1               	movwf	?_scale+3
  4322     0DB8  0826               	movf	?___flmul+2,w
  4323     0DB9  00C0               	movwf	?_scale+2
  4324     0DBA  0825               	movf	?___flmul+1,w
  4325     0DBB  00BF               	movwf	?_scale+1
  4326     0DBC  0824               	movf	?___flmul,w
  4327     0DBD  00BE               	movwf	?_scale
  4328     0DBE  0008               	return
  4329     0DBF                     l3624:
  4330     0DBF  0850               	movf	scale@scl,w
  4331     0DC0  3A80               	xorlw	128
  4332     0DC1  3E75               	addlw	-139
  4333     0DC2  1C03               	skipc
  4334     0DC3  2E44               	goto	l3630
  4335                           
  4336                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 441:    return _n
      +                          powers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(scl%10)];
  4337     0DC4  300A               	movlw	10
  4338     0DC5  00F0               	movwf	___awmod@divisor
  4339     0DC6  3000               	movlw	0
  4340     0DC7  00F1               	movwf	___awmod@divisor+1
  4341     0DC8  0850               	movf	scale@scl,w
  4342     0DC9  00F2               	movwf	___awmod@dividend
  4343     0DCA  01F3               	clrf	___awmod@dividend+1
  4344     0DCB  1BF2               	btfsc	___awmod@dividend,7
  4345     0DCC  03F3               	decf	___awmod@dividend+1,f
  4346     0DCD  160A  158A  2608  120A  158A  	fcall	___awmod
  4347     0DD2  0870               	movf	?___awmod,w
  4348     0DD3  00C2               	movwf	??_scale
  4349     0DD4  3001               	movlw	1
  4350     0DD5                     u5395:
  4351     0DD5  1003               	clrc
  4352     0DD6  0DC2               	rlf	??_scale,f
  4353     0DD7  3EFF               	addlw	-1
  4354     0DD8  1D03               	skipz
  4355     0DD9  2DD5               	goto	u5395
  4356     0DDA  1003               	clrc
  4357     0DDB  0D42               	rlf	??_scale,w
  4358     0DDC  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4359     0DDD  0084               	movwf	4
  4360     0DDE  120A  118A  200D  120A  158A  	fcall	stringdir
  4361     0DE3  00C3               	movwf	??_scale+1
  4362     0DE4  120A  118A  200D  120A  158A  	fcall	stringdir
  4363     0DE9  00C4               	movwf	??_scale+2
  4364     0DEA  120A  118A  200D  120A  158A  	fcall	stringdir
  4365     0DEF  00C5               	movwf	??_scale+3
  4366     0DF0  120A  118A  200D  120A  158A  	fcall	stringdir
  4367     0DF5  00C6               	movwf	??_scale+4
  4368     0DF6  0846               	movf	??_scale+4,w
  4369     0DF7  00A7               	movwf	___flmul@b+3
  4370     0DF8  0845               	movf	??_scale+3,w
  4371     0DF9  00A6               	movwf	___flmul@b+2
  4372     0DFA  0844               	movf	??_scale+2,w
  4373     0DFB  00A5               	movwf	___flmul@b+1
  4374     0DFC  0843               	movf	??_scale+1,w
  4375     0DFD  00A4               	movwf	___flmul@b
  4376     0DFE  300A               	movlw	10
  4377     0DFF  00F7               	movwf	___awdiv@divisor
  4378     0E00  3000               	movlw	0
  4379     0E01  00F8               	movwf	___awdiv@divisor+1
  4380     0E02  0850               	movf	scale@scl,w
  4381     0E03  00F9               	movwf	___awdiv@dividend
  4382     0E04  01FA               	clrf	___awdiv@dividend+1
  4383     0E05  1BF9               	btfsc	___awdiv@dividend,7
  4384     0E06  03FA               	decf	___awdiv@dividend+1,f
  4385     0E07  160A  158A  26ED  120A  158A  	fcall	___awdiv
  4386     0E0C  0877               	movf	?___awdiv,w
  4387     0E0D  00C7               	movwf	??_scale+5
  4388     0E0E  3001               	movlw	1
  4389     0E0F                     u5405:
  4390     0E0F  1003               	clrc
  4391     0E10  0DC7               	rlf	??_scale+5,f
  4392     0E11  3EFF               	addlw	-1
  4393     0E12  1D03               	skipz
  4394     0E13  2E0F               	goto	u5405
  4395     0E14  1003               	clrc
  4396     0E15  0D47               	rlf	??_scale+5,w
  4397     0E16  3E59               	addlw	low (((__npowers_-__stringbase)| (0+32768)+36))
  4398     0E17  0084               	movwf	4
  4399     0E18  120A  118A  200D  120A  158A  	fcall	stringdir
  4400     0E1D  00C8               	movwf	??_scale+6
  4401     0E1E  120A  118A  200D  120A  158A  	fcall	stringdir
  4402     0E23  00C9               	movwf	??_scale+7
  4403     0E24  120A  118A  200D  120A  158A  	fcall	stringdir
  4404     0E29  00CA               	movwf	??_scale+8
  4405     0E2A  120A  118A  200D  120A  158A  	fcall	stringdir
  4406     0E2F  00CB               	movwf	??_scale+9
  4407     0E30  084B               	movf	??_scale+9,w
  4408     0E31  00AB               	movwf	___flmul@a+3
  4409     0E32  084A               	movf	??_scale+8,w
  4410     0E33  00AA               	movwf	___flmul@a+2
  4411     0E34  0849               	movf	??_scale+7,w
  4412     0E35  00A9               	movwf	___flmul@a+1
  4413     0E36  0848               	movf	??_scale+6,w
  4414     0E37  00A8               	movwf	___flmul@a
  4415     0E38  160A  118A  2527   	fcall	___flmul
  4416     0E3B  0827               	movf	?___flmul+3,w
  4417     0E3C  00C1               	movwf	?_scale+3
  4418     0E3D  0826               	movf	?___flmul+2,w
  4419     0E3E  00C0               	movwf	?_scale+2
  4420     0E3F  0825               	movf	?___flmul+1,w
  4421     0E40  00BF               	movwf	?_scale+1
  4422     0E41  0824               	movf	?___flmul,w
  4423     0E42  00BE               	movwf	?_scale
  4424     0E43  0008               	return
  4425     0E44                     l3630:
  4426                           
  4427                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 442:   return _np
      +                          owers_[(unsigned char)scl];
  4428     0E44  0850               	movf	scale@scl,w
  4429     0E45  00C2               	movwf	??_scale
  4430     0E46  3001               	movlw	1
  4431     0E47                     u5415:
  4432     0E47  1003               	clrc
  4433     0E48  0DC2               	rlf	??_scale,f
  4434     0E49  3EFF               	addlw	-1
  4435     0E4A  1D03               	skipz
  4436     0E4B  2E47               	goto	u5415
  4437     0E4C  1003               	clrc
  4438     0E4D  0D42               	rlf	??_scale,w
  4439     0E4E  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4440     0E4F  0084               	movwf	4
  4441     0E50  120A  118A  200D  120A  158A  	fcall	stringdir
  4442     0E55  00C3               	movwf	??_scale+1
  4443     0E56  120A  118A  200D  120A  158A  	fcall	stringdir
  4444     0E5B  00C4               	movwf	??_scale+2
  4445     0E5C  120A  118A  200D  120A  158A  	fcall	stringdir
  4446     0E61  00C5               	movwf	??_scale+3
  4447     0E62  120A  118A  200D   	fcall	stringdir
  4448     0E65  00C6               	movwf	??_scale+4
  4449     0E66  0846               	movf	??_scale+4,w
  4450     0E67  00C1               	movwf	?_scale+3
  4451     0E68  0845               	movf	??_scale+3,w
  4452     0E69  00C0               	movwf	?_scale+2
  4453     0E6A  0844               	movf	??_scale+2,w
  4454     0E6B  00BF               	movwf	?_scale+1
  4455     0E6C  0843               	movf	??_scale+1,w
  4456     0E6D  00BE               	movwf	?_scale
  4457     0E6E  0008               	return
  4458     0E6F                     l3634:
  4459                           
  4460                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 444:  if(scl>=110
      +                          )
  4461     0E6F  0850               	movf	scale@scl,w
  4462     0E70  3A80               	xorlw	128
  4463     0E71  3E12               	addlw	-238
  4464     0E72  1C03               	skipc
  4465     0E73  2F50               	goto	l3642
  4466                           
  4467                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 445:   return _po
      +                          wers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers
      +                          _[(unsigned char)(scl%10)];
  4468     0E74  300A               	movlw	10
  4469     0E75  00F7               	movwf	___awdiv@divisor
  4470     0E76  3000               	movlw	0
  4471     0E77  00F8               	movwf	___awdiv@divisor+1
  4472     0E78  0850               	movf	scale@scl,w
  4473     0E79  00F2               	movwf	___awmod@dividend
  4474     0E7A  01F3               	clrf	___awmod@dividend+1
  4475     0E7B  1BF2               	btfsc	___awmod@dividend,7
  4476     0E7C  03F3               	decf	___awmod@dividend+1,f
  4477     0E7D  3064               	movlw	100
  4478     0E7E  00F0               	movwf	___awmod@divisor
  4479     0E7F  3000               	movlw	0
  4480     0E80  00F1               	movwf	___awmod@divisor+1
  4481     0E81  160A  158A  2608  120A  158A  	fcall	___awmod
  4482     0E86  0871               	movf	?___awmod+1,w
  4483     0E87  00FA               	movwf	___awdiv@dividend+1
  4484     0E88  0870               	movf	?___awmod,w
  4485     0E89  00F9               	movwf	___awdiv@dividend
  4486     0E8A  160A  158A  26ED  120A  158A  	fcall	___awdiv
  4487     0E8F  0877               	movf	?___awdiv,w
  4488     0E90  00C2               	movwf	??_scale
  4489     0E91  3001               	movlw	1
  4490     0E92                     u5435:
  4491     0E92  1003               	clrc
  4492     0E93  0DC2               	rlf	??_scale,f
  4493     0E94  3EFF               	addlw	-1
  4494     0E95  1D03               	skipz
  4495     0E96  2E92               	goto	u5435
  4496     0E97  1003               	clrc
  4497     0E98  0D42               	rlf	??_scale,w
  4498     0E99  3E25               	addlw	low (((__powers_-__stringbase)| (0+32768)+36))
  4499     0E9A  0084               	movwf	4
  4500     0E9B  120A  118A  200D  120A  158A  	fcall	stringdir
  4501     0EA0  00C3               	movwf	??_scale+1
  4502     0EA1  120A  118A  200D  120A  158A  	fcall	stringdir
  4503     0EA6  00C4               	movwf	??_scale+2
  4504     0EA7  120A  118A  200D  120A  158A  	fcall	stringdir
  4505     0EAC  00C5               	movwf	??_scale+3
  4506     0EAD  120A  118A  200D  120A  158A  	fcall	stringdir
  4507     0EB2  00C6               	movwf	??_scale+4
  4508     0EB3  0846               	movf	??_scale+4,w
  4509     0EB4  00A7               	movwf	___flmul@b+3
  4510     0EB5  0845               	movf	??_scale+3,w
  4511     0EB6  00A6               	movwf	___flmul@b+2
  4512     0EB7  0844               	movf	??_scale+2,w
  4513     0EB8  00A5               	movwf	___flmul@b+1
  4514     0EB9  0843               	movf	??_scale+1,w
  4515     0EBA  00A4               	movwf	___flmul@b
  4516     0EBB  3064               	movlw	100
  4517     0EBC  00F7               	movwf	___awdiv@divisor
  4518     0EBD  3000               	movlw	0
  4519     0EBE  00F8               	movwf	___awdiv@divisor+1
  4520     0EBF  0850               	movf	scale@scl,w
  4521     0EC0  00F9               	movwf	___awdiv@dividend
  4522     0EC1  01FA               	clrf	___awdiv@dividend+1
  4523     0EC2  1BF9               	btfsc	___awdiv@dividend,7
  4524     0EC3  03FA               	decf	___awdiv@dividend+1,f
  4525     0EC4  160A  158A  26ED  120A  158A  	fcall	___awdiv
  4526     0EC9  0877               	movf	?___awdiv,w
  4527     0ECA  00C7               	movwf	??_scale+5
  4528     0ECB  3001               	movlw	1
  4529     0ECC                     u5445:
  4530     0ECC  1003               	clrc
  4531     0ECD  0DC7               	rlf	??_scale+5,f
  4532     0ECE  3EFF               	addlw	-1
  4533     0ECF  1D03               	skipz
  4534     0ED0  2ECC               	goto	u5445
  4535     0ED1  1003               	clrc
  4536     0ED2  0D47               	rlf	??_scale+5,w
  4537     0ED3  3E49               	addlw	low (((__powers_-__stringbase)| (0+32768)+72))
  4538     0ED4  0084               	movwf	4
  4539     0ED5  120A  118A  200D  120A  158A  	fcall	stringdir
  4540     0EDA  00C8               	movwf	??_scale+6
  4541     0EDB  120A  118A  200D  120A  158A  	fcall	stringdir
  4542     0EE0  00C9               	movwf	??_scale+7
  4543     0EE1  120A  118A  200D  120A  158A  	fcall	stringdir
  4544     0EE6  00CA               	movwf	??_scale+8
  4545     0EE7  120A  118A  200D  120A  158A  	fcall	stringdir
  4546     0EEC  00CB               	movwf	??_scale+9
  4547     0EED  084B               	movf	??_scale+9,w
  4548     0EEE  00AB               	movwf	___flmul@a+3
  4549     0EEF  084A               	movf	??_scale+8,w
  4550     0EF0  00AA               	movwf	___flmul@a+2
  4551     0EF1  0849               	movf	??_scale+7,w
  4552     0EF2  00A9               	movwf	___flmul@a+1
  4553     0EF3  0848               	movf	??_scale+6,w
  4554     0EF4  00A8               	movwf	___flmul@a
  4555     0EF5  160A  118A  2527  120A  158A  	fcall	___flmul
  4556     0EFA  0827               	movf	?___flmul+3,w
  4557     0EFB  00CF               	movwf	_scale$1117+3
  4558     0EFC  0826               	movf	?___flmul+2,w
  4559     0EFD  00CE               	movwf	_scale$1117+2
  4560     0EFE  0825               	movf	?___flmul+1,w
  4561     0EFF  00CD               	movwf	_scale$1117+1
  4562     0F00  0824               	movf	?___flmul,w
  4563     0F01  00CC               	movwf	_scale$1117
  4564                           
  4565                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 445:   return _po
      +                          wers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers
      +                          _[(unsigned char)(scl%10)];
  4566     0F02  300A               	movlw	10
  4567     0F03  00F0               	movwf	___awmod@divisor
  4568     0F04  3000               	movlw	0
  4569     0F05  00F1               	movwf	___awmod@divisor+1
  4570     0F06  0850               	movf	scale@scl,w
  4571     0F07  00F2               	movwf	___awmod@dividend
  4572     0F08  01F3               	clrf	___awmod@dividend+1
  4573     0F09  1BF2               	btfsc	___awmod@dividend,7
  4574     0F0A  03F3               	decf	___awmod@dividend+1,f
  4575     0F0B  160A  158A  2608  120A  158A  	fcall	___awmod
  4576     0F10  0870               	movf	?___awmod,w
  4577     0F11  00C2               	movwf	??_scale
  4578     0F12  3001               	movlw	1
  4579     0F13                     u5455:
  4580     0F13  1003               	clrc
  4581     0F14  0DC2               	rlf	??_scale,f
  4582     0F15  3EFF               	addlw	-1
  4583     0F16  1D03               	skipz
  4584     0F17  2F13               	goto	u5455
  4585     0F18  1003               	clrc
  4586     0F19  0D42               	rlf	??_scale,w
  4587     0F1A  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  4588     0F1B  0084               	movwf	4
  4589     0F1C  120A  118A  200D  120A  158A  	fcall	stringdir
  4590     0F21  00C3               	movwf	??_scale+1
  4591     0F22  120A  118A  200D  120A  158A  	fcall	stringdir
  4592     0F27  00C4               	movwf	??_scale+2
  4593     0F28  120A  118A  200D  120A  158A  	fcall	stringdir
  4594     0F2D  00C5               	movwf	??_scale+3
  4595     0F2E  120A  118A  200D  120A  158A  	fcall	stringdir
  4596     0F33  00C6               	movwf	??_scale+4
  4597     0F34  0846               	movf	??_scale+4,w
  4598     0F35  00A7               	movwf	___flmul@b+3
  4599     0F36  0845               	movf	??_scale+3,w
  4600     0F37  00A6               	movwf	___flmul@b+2
  4601     0F38  0844               	movf	??_scale+2,w
  4602     0F39  00A5               	movwf	___flmul@b+1
  4603     0F3A  0843               	movf	??_scale+1,w
  4604     0F3B  00A4               	movwf	___flmul@b
  4605     0F3C  084F               	movf	_scale$1117+3,w
  4606     0F3D  00AB               	movwf	___flmul@a+3
  4607     0F3E  084E               	movf	_scale$1117+2,w
  4608     0F3F  00AA               	movwf	___flmul@a+2
  4609     0F40  084D               	movf	_scale$1117+1,w
  4610     0F41  00A9               	movwf	___flmul@a+1
  4611     0F42  084C               	movf	_scale$1117,w
  4612     0F43  00A8               	movwf	___flmul@a
  4613     0F44  160A  118A  2527   	fcall	___flmul
  4614     0F47  0827               	movf	?___flmul+3,w
  4615     0F48  00C1               	movwf	?_scale+3
  4616     0F49  0826               	movf	?___flmul+2,w
  4617     0F4A  00C0               	movwf	?_scale+2
  4618     0F4B  0825               	movf	?___flmul+1,w
  4619     0F4C  00BF               	movwf	?_scale+1
  4620     0F4D  0824               	movf	?___flmul,w
  4621     0F4E  00BE               	movwf	?_scale
  4622     0F4F  0008               	return
  4623     0F50                     l3642:
  4624     0F50  0850               	movf	scale@scl,w
  4625     0F51  3A80               	xorlw	128
  4626     0F52  3E75               	addlw	-139
  4627     0F53  1C03               	skipc
  4628     0F54  2FD5               	goto	l3648
  4629                           
  4630                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 447:   return _po
      +                          wers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(scl%10)];
  4631     0F55  300A               	movlw	10
  4632     0F56  00F0               	movwf	___awmod@divisor
  4633     0F57  3000               	movlw	0
  4634     0F58  00F1               	movwf	___awmod@divisor+1
  4635     0F59  0850               	movf	scale@scl,w
  4636     0F5A  00F2               	movwf	___awmod@dividend
  4637     0F5B  01F3               	clrf	___awmod@dividend+1
  4638     0F5C  1BF2               	btfsc	___awmod@dividend,7
  4639     0F5D  03F3               	decf	___awmod@dividend+1,f
  4640     0F5E  160A  158A  2608  120A  158A  	fcall	___awmod
  4641     0F63  0870               	movf	?___awmod,w
  4642     0F64  00C2               	movwf	??_scale
  4643     0F65  3001               	movlw	1
  4644     0F66                     u5475:
  4645     0F66  1003               	clrc
  4646     0F67  0DC2               	rlf	??_scale,f
  4647     0F68  3EFF               	addlw	-1
  4648     0F69  1D03               	skipz
  4649     0F6A  2F66               	goto	u5475
  4650     0F6B  1003               	clrc
  4651     0F6C  0D42               	rlf	??_scale,w
  4652     0F6D  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  4653     0F6E  0084               	movwf	4
  4654     0F6F  120A  118A  200D  120A  158A  	fcall	stringdir
  4655     0F74  00C3               	movwf	??_scale+1
  4656     0F75  120A  118A  200D  120A  158A  	fcall	stringdir
  4657     0F7A  00C4               	movwf	??_scale+2
  4658     0F7B  120A  118A  200D  120A  158A  	fcall	stringdir
  4659     0F80  00C5               	movwf	??_scale+3
  4660     0F81  120A  118A  200D  120A  158A  	fcall	stringdir
  4661     0F86  00C6               	movwf	??_scale+4
  4662     0F87  0846               	movf	??_scale+4,w
  4663     0F88  00A7               	movwf	___flmul@b+3
  4664     0F89  0845               	movf	??_scale+3,w
  4665     0F8A  00A6               	movwf	___flmul@b+2
  4666     0F8B  0844               	movf	??_scale+2,w
  4667     0F8C  00A5               	movwf	___flmul@b+1
  4668     0F8D  0843               	movf	??_scale+1,w
  4669     0F8E  00A4               	movwf	___flmul@b
  4670     0F8F  300A               	movlw	10
  4671     0F90  00F7               	movwf	___awdiv@divisor
  4672     0F91  3000               	movlw	0
  4673     0F92  00F8               	movwf	___awdiv@divisor+1
  4674     0F93  0850               	movf	scale@scl,w
  4675     0F94  00F9               	movwf	___awdiv@dividend
  4676     0F95  01FA               	clrf	___awdiv@dividend+1
  4677     0F96  1BF9               	btfsc	___awdiv@dividend,7
  4678     0F97  03FA               	decf	___awdiv@dividend+1,f
  4679     0F98  160A  158A  26ED  120A  158A  	fcall	___awdiv
  4680     0F9D  0877               	movf	?___awdiv,w
  4681     0F9E  00C7               	movwf	??_scale+5
  4682     0F9F  3001               	movlw	1
  4683     0FA0                     u5485:
  4684     0FA0  1003               	clrc
  4685     0FA1  0DC7               	rlf	??_scale+5,f
  4686     0FA2  3EFF               	addlw	-1
  4687     0FA3  1D03               	skipz
  4688     0FA4  2FA0               	goto	u5485
  4689     0FA5  1003               	clrc
  4690     0FA6  0D47               	rlf	??_scale+5,w
  4691     0FA7  3E25               	addlw	low (((__powers_-__stringbase)| (0+32768)+36))
  4692     0FA8  0084               	movwf	4
  4693     0FA9  120A  118A  200D  120A  158A  	fcall	stringdir
  4694     0FAE  00C8               	movwf	??_scale+6
  4695     0FAF  120A  118A  200D  120A  158A  	fcall	stringdir
  4696     0FB4  00C9               	movwf	??_scale+7
  4697     0FB5  120A  118A  200D  120A  158A  	fcall	stringdir
  4698     0FBA  00CA               	movwf	??_scale+8
  4699     0FBB  120A  118A  200D  120A  158A  	fcall	stringdir
  4700     0FC0  00CB               	movwf	??_scale+9
  4701     0FC1  084B               	movf	??_scale+9,w
  4702     0FC2  00AB               	movwf	___flmul@a+3
  4703     0FC3  084A               	movf	??_scale+8,w
  4704     0FC4  00AA               	movwf	___flmul@a+2
  4705     0FC5  0849               	movf	??_scale+7,w
  4706     0FC6  00A9               	movwf	___flmul@a+1
  4707     0FC7  0848               	movf	??_scale+6,w
  4708     0FC8  00A8               	movwf	___flmul@a
  4709     0FC9  160A  118A  2527   	fcall	___flmul
  4710     0FCC  0827               	movf	?___flmul+3,w
  4711     0FCD  00C1               	movwf	?_scale+3
  4712     0FCE  0826               	movf	?___flmul+2,w
  4713     0FCF  00C0               	movwf	?_scale+2
  4714     0FD0  0825               	movf	?___flmul+1,w
  4715     0FD1  00BF               	movwf	?_scale+1
  4716     0FD2  0824               	movf	?___flmul,w
  4717     0FD3  00BE               	movwf	?_scale
  4718     0FD4  0008               	return
  4719     0FD5                     l3648:
  4720                           
  4721                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 448:  return _pow
      +                          ers_[(unsigned char)scl];
  4722     0FD5  0850               	movf	scale@scl,w
  4723     0FD6  00C2               	movwf	??_scale
  4724     0FD7  3001               	movlw	1
  4725     0FD8                     u5495:
  4726     0FD8  1003               	clrc
  4727     0FD9  0DC2               	rlf	??_scale,f
  4728     0FDA  3EFF               	addlw	-1
  4729     0FDB  1D03               	skipz
  4730     0FDC  2FD8               	goto	u5495
  4731     0FDD  1003               	clrc
  4732     0FDE  0D42               	rlf	??_scale,w
  4733     0FDF  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  4734     0FE0  0084               	movwf	4
  4735     0FE1  120A  118A  200D  120A  158A  	fcall	stringdir
  4736     0FE6  00C3               	movwf	??_scale+1
  4737     0FE7  120A  118A  200D  120A  158A  	fcall	stringdir
  4738     0FEC  00C4               	movwf	??_scale+2
  4739     0FED  120A  118A  200D  120A  158A  	fcall	stringdir
  4740     0FF2  00C5               	movwf	??_scale+3
  4741     0FF3  120A  118A  200D   	fcall	stringdir
  4742     0FF6  00C6               	movwf	??_scale+4
  4743     0FF7  0846               	movf	??_scale+4,w
  4744     0FF8  00C1               	movwf	?_scale+3
  4745     0FF9  0845               	movf	??_scale+3,w
  4746     0FFA  00C0               	movwf	?_scale+2
  4747     0FFB  0844               	movf	??_scale+2,w
  4748     0FFC  00BF               	movwf	?_scale+1
  4749     0FFD  0843               	movf	??_scale+1,w
  4750     0FFE  00BE               	movwf	?_scale
  4751     0FFF  0008               	return
  4752     1000                     __end_of_scale:
  4753                           
  4754                           	psect	text3
  4755     1E08                     __ptext3:	
  4756 ;; *************** function ___awmod *****************
  4757 ;; Defined at:
  4758 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;  divisor         2    0[COMMON] int 
  4761 ;;  dividend        2    2[COMMON] int 
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;  sign            1    6[COMMON] unsigned char 
  4764 ;;  counter         1    5[COMMON] unsigned char 
  4765 ;; Return value:  Size  Location     Type
  4766 ;;                  2    0[COMMON] int 
  4767 ;; Registers used:
  4768 ;;		wreg, status,2, status,0
  4769 ;; Tracked objects:
  4770 ;;		On entry : 300/0
  4771 ;;		On exit  : 300/0
  4772 ;;		Unchanged: 300/0
  4773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4774 ;;      Params:         4       0       0       0       0
  4775 ;;      Locals:         2       0       0       0       0
  4776 ;;      Temps:          1       0       0       0       0
  4777 ;;      Totals:         7       0       0       0       0
  4778 ;;Total ram usage:        7 bytes
  4779 ;; Hardware stack levels used: 1
  4780 ;; This function calls:
  4781 ;;		Nothing
  4782 ;; This function is called by:
  4783 ;;		_scale
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787     1E08                     ___awmod:	
  4788                           ;psect for function ___awmod
  4789                           
  4790                           
  4791                           ;incstack = 0
  4792                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4793     1E08  01F6               	clrf	___awmod@sign
  4794     1E09  1FF3               	btfss	___awmod@dividend+1,7
  4795     1E0A  2E12               	goto	l2978
  4796     1E0B  09F2               	comf	___awmod@dividend,f
  4797     1E0C  09F3               	comf	___awmod@dividend+1,f
  4798     1E0D  0AF2               	incf	___awmod@dividend,f
  4799     1E0E  1903               	skipnz
  4800     1E0F  0AF3               	incf	___awmod@dividend+1,f
  4801     1E10  01F6               	clrf	___awmod@sign
  4802     1E11  0AF6               	incf	___awmod@sign,f
  4803     1E12                     l2978:
  4804     1E12  1FF1               	btfss	___awmod@divisor+1,7
  4805     1E13  2E19               	goto	l2982
  4806     1E14  09F0               	comf	___awmod@divisor,f
  4807     1E15  09F1               	comf	___awmod@divisor+1,f
  4808     1E16  0AF0               	incf	___awmod@divisor,f
  4809     1E17  1903               	skipnz
  4810     1E18  0AF1               	incf	___awmod@divisor+1,f
  4811     1E19                     l2982:
  4812     1E19  0870               	movf	___awmod@divisor,w
  4813     1E1A  0471               	iorwf	___awmod@divisor+1,w
  4814     1E1B  1903               	btfsc	3,2
  4815     1E1C  2E46               	goto	l3000
  4816     1E1D  01F5               	clrf	___awmod@counter
  4817     1E1E  0AF5               	incf	___awmod@counter,f
  4818     1E1F                     l2990:
  4819     1E1F  1BF1               	btfsc	___awmod@divisor+1,7
  4820     1E20  2E2D               	goto	l2992
  4821     1E21  3001               	movlw	1
  4822     1E22                     u4045:
  4823     1E22  1003               	clrc
  4824     1E23  0DF0               	rlf	___awmod@divisor,f
  4825     1E24  0DF1               	rlf	___awmod@divisor+1,f
  4826     1E25  3EFF               	addlw	-1
  4827     1E26  1D03               	skipz
  4828     1E27  2E22               	goto	u4045
  4829     1E28  3001               	movlw	1
  4830     1E29  00F4               	movwf	??___awmod
  4831     1E2A  0874               	movf	??___awmod,w
  4832     1E2B  07F5               	addwf	___awmod@counter,f
  4833     1E2C  2E1F               	goto	l2990
  4834     1E2D                     l2992:
  4835     1E2D  0871               	movf	___awmod@divisor+1,w
  4836     1E2E  0273               	subwf	___awmod@dividend+1,w
  4837     1E2F  1D03               	skipz
  4838     1E30  2E33               	goto	u4065
  4839     1E31  0870               	movf	___awmod@divisor,w
  4840     1E32  0272               	subwf	___awmod@dividend,w
  4841     1E33                     u4065:
  4842     1E33  1C03               	skipc
  4843     1E34  2E3B               	goto	l2996
  4844     1E35  0870               	movf	___awmod@divisor,w
  4845     1E36  02F2               	subwf	___awmod@dividend,f
  4846     1E37  0871               	movf	___awmod@divisor+1,w
  4847     1E38  1C03               	skipc
  4848     1E39  03F3               	decf	___awmod@dividend+1,f
  4849     1E3A  02F3               	subwf	___awmod@dividend+1,f
  4850     1E3B                     l2996:
  4851     1E3B  3001               	movlw	1
  4852     1E3C                     u4075:
  4853     1E3C  1003               	clrc
  4854     1E3D  0CF1               	rrf	___awmod@divisor+1,f
  4855     1E3E  0CF0               	rrf	___awmod@divisor,f
  4856     1E3F  3EFF               	addlw	-1
  4857     1E40  1D03               	skipz
  4858     1E41  2E3C               	goto	u4075
  4859     1E42  3001               	movlw	1
  4860     1E43  02F5               	subwf	___awmod@counter,f
  4861     1E44  1D03               	btfss	3,2
  4862     1E45  2E2D               	goto	l2992
  4863     1E46                     l3000:
  4864     1E46  0876               	movf	___awmod@sign,w
  4865     1E47  1903               	btfsc	3,2
  4866     1E48  2E4E               	goto	l3004
  4867     1E49  09F2               	comf	___awmod@dividend,f
  4868     1E4A  09F3               	comf	___awmod@dividend+1,f
  4869     1E4B  0AF2               	incf	___awmod@dividend,f
  4870     1E4C  1903               	skipnz
  4871     1E4D  0AF3               	incf	___awmod@dividend+1,f
  4872     1E4E                     l3004:
  4873     1E4E  0873               	movf	___awmod@dividend+1,w
  4874     1E4F  00F1               	movwf	?___awmod+1
  4875     1E50  0872               	movf	___awmod@dividend,w
  4876     1E51  00F0               	movwf	?___awmod
  4877     1E52  0008               	return
  4878     1E53                     __end_of___awmod:
  4879                           
  4880                           	psect	text4
  4881     1EED                     __ptext4:	
  4882 ;; *************** function ___awdiv *****************
  4883 ;; Defined at:
  4884 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;  divisor         2    7[COMMON] int 
  4887 ;;  dividend        2    9[COMMON] int 
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;  quotient        2    2[BANK0 ] int 
  4890 ;;  sign            1    1[BANK0 ] unsigned char 
  4891 ;;  counter         1    0[BANK0 ] unsigned char 
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  2    7[COMMON] int 
  4894 ;; Registers used:
  4895 ;;		wreg, status,2, status,0
  4896 ;; Tracked objects:
  4897 ;;		On entry : 200/100
  4898 ;;		On exit  : 300/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4901 ;;      Params:         4       0       0       0       0
  4902 ;;      Locals:         0       4       0       0       0
  4903 ;;      Temps:          1       0       0       0       0
  4904 ;;      Totals:         5       4       0       0       0
  4905 ;;Total ram usage:        9 bytes
  4906 ;; Hardware stack levels used: 1
  4907 ;; This function calls:
  4908 ;;		Nothing
  4909 ;; This function is called by:
  4910 ;;		_scale
  4911 ;;		_sprintf
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915     1EED                     ___awdiv:	
  4916                           ;psect for function ___awdiv
  4917                           
  4918                           
  4919                           ;incstack = 0
  4920                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4921     1EED  1283               	bcf	3,5	;RP0=0, select bank0
  4922     1EEE  01A1               	clrf	___awdiv@sign
  4923     1EEF  1FF8               	btfss	___awdiv@divisor+1,7
  4924     1EF0  2EF8               	goto	l2934
  4925     1EF1  09F7               	comf	___awdiv@divisor,f
  4926     1EF2  09F8               	comf	___awdiv@divisor+1,f
  4927     1EF3  0AF7               	incf	___awdiv@divisor,f
  4928     1EF4  1903               	skipnz
  4929     1EF5  0AF8               	incf	___awdiv@divisor+1,f
  4930     1EF6  01A1               	clrf	___awdiv@sign
  4931     1EF7  0AA1               	incf	___awdiv@sign,f
  4932     1EF8                     l2934:
  4933     1EF8  1FFA               	btfss	___awdiv@dividend+1,7
  4934     1EF9  2F03               	goto	l2940
  4935     1EFA  09F9               	comf	___awdiv@dividend,f
  4936     1EFB  09FA               	comf	___awdiv@dividend+1,f
  4937     1EFC  0AF9               	incf	___awdiv@dividend,f
  4938     1EFD  1903               	skipnz
  4939     1EFE  0AFA               	incf	___awdiv@dividend+1,f
  4940     1EFF  3001               	movlw	1
  4941     1F00  00FB               	movwf	??___awdiv
  4942     1F01  087B               	movf	??___awdiv,w
  4943     1F02  06A1               	xorwf	___awdiv@sign,f
  4944     1F03                     l2940:
  4945     1F03  01A2               	clrf	___awdiv@quotient
  4946     1F04  01A3               	clrf	___awdiv@quotient+1
  4947     1F05  0877               	movf	___awdiv@divisor,w
  4948     1F06  0478               	iorwf	___awdiv@divisor+1,w
  4949     1F07  1903               	btfsc	3,2
  4950     1F08  2F3A               	goto	l2962
  4951     1F09  01A0               	clrf	___awdiv@counter
  4952     1F0A  0AA0               	incf	___awdiv@counter,f
  4953     1F0B                     l2950:
  4954     1F0B  1BF8               	btfsc	___awdiv@divisor+1,7
  4955     1F0C  2F19               	goto	l2952
  4956     1F0D  3001               	movlw	1
  4957     1F0E                     u3945:
  4958     1F0E  1003               	clrc
  4959     1F0F  0DF7               	rlf	___awdiv@divisor,f
  4960     1F10  0DF8               	rlf	___awdiv@divisor+1,f
  4961     1F11  3EFF               	addlw	-1
  4962     1F12  1D03               	skipz
  4963     1F13  2F0E               	goto	u3945
  4964     1F14  3001               	movlw	1
  4965     1F15  00FB               	movwf	??___awdiv
  4966     1F16  087B               	movf	??___awdiv,w
  4967     1F17  07A0               	addwf	___awdiv@counter,f
  4968     1F18  2F0B               	goto	l2950
  4969     1F19                     l2952:
  4970     1F19  3001               	movlw	1
  4971     1F1A                     u3965:
  4972     1F1A  1003               	clrc
  4973     1F1B  0DA2               	rlf	___awdiv@quotient,f
  4974     1F1C  0DA3               	rlf	___awdiv@quotient+1,f
  4975     1F1D  3EFF               	addlw	-1
  4976     1F1E  1D03               	skipz
  4977     1F1F  2F1A               	goto	u3965
  4978     1F20  0878               	movf	___awdiv@divisor+1,w
  4979     1F21  027A               	subwf	___awdiv@dividend+1,w
  4980     1F22  1D03               	skipz
  4981     1F23  2F26               	goto	u3975
  4982     1F24  0877               	movf	___awdiv@divisor,w
  4983     1F25  0279               	subwf	___awdiv@dividend,w
  4984     1F26                     u3975:
  4985     1F26  1C03               	skipc
  4986     1F27  2F2F               	goto	l2958
  4987     1F28  0877               	movf	___awdiv@divisor,w
  4988     1F29  02F9               	subwf	___awdiv@dividend,f
  4989     1F2A  0878               	movf	___awdiv@divisor+1,w
  4990     1F2B  1C03               	skipc
  4991     1F2C  03FA               	decf	___awdiv@dividend+1,f
  4992     1F2D  02FA               	subwf	___awdiv@dividend+1,f
  4993     1F2E  1422               	bsf	___awdiv@quotient,0
  4994     1F2F                     l2958:
  4995     1F2F  3001               	movlw	1
  4996     1F30                     u3985:
  4997     1F30  1003               	clrc
  4998     1F31  0CF8               	rrf	___awdiv@divisor+1,f
  4999     1F32  0CF7               	rrf	___awdiv@divisor,f
  5000     1F33  3EFF               	addlw	-1
  5001     1F34  1D03               	skipz
  5002     1F35  2F30               	goto	u3985
  5003     1F36  3001               	movlw	1
  5004     1F37  02A0               	subwf	___awdiv@counter,f
  5005     1F38  1D03               	btfss	3,2
  5006     1F39  2F19               	goto	l2952
  5007     1F3A                     l2962:
  5008     1F3A  0821               	movf	___awdiv@sign,w
  5009     1F3B  1903               	btfsc	3,2
  5010     1F3C  2F42               	goto	l2966
  5011     1F3D  09A2               	comf	___awdiv@quotient,f
  5012     1F3E  09A3               	comf	___awdiv@quotient+1,f
  5013     1F3F  0AA2               	incf	___awdiv@quotient,f
  5014     1F40  1903               	skipnz
  5015     1F41  0AA3               	incf	___awdiv@quotient+1,f
  5016     1F42                     l2966:
  5017     1F42  0823               	movf	___awdiv@quotient+1,w
  5018     1F43  00F8               	movwf	?___awdiv+1
  5019     1F44  0822               	movf	___awdiv@quotient,w
  5020     1F45  00F7               	movwf	?___awdiv
  5021     1F46  0008               	return
  5022     1F47                     __end_of___awdiv:
  5023                           
  5024                           	psect	text5
  5025     1AB3                     __ptext5:	
  5026 ;; *************** function _isdigit *****************
  5027 ;; Defined at:
  5028 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\isdigit.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  c               1    wreg     unsigned char 
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  c               1    1[COMMON] unsigned char 
  5033 ;; Return value:  Size  Location     Type
  5034 ;;		None               void
  5035 ;; Registers used:
  5036 ;;		wreg, status,2, status,0
  5037 ;; Tracked objects:
  5038 ;;		On entry : 300/100
  5039 ;;		On exit  : 300/100
  5040 ;;		Unchanged: 300/0
  5041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5042 ;;      Params:         0       0       0       0       0
  5043 ;;      Locals:         2       0       0       0       0
  5044 ;;      Temps:          0       0       0       0       0
  5045 ;;      Totals:         2       0       0       0       0
  5046 ;;Total ram usage:        2 bytes
  5047 ;; Hardware stack levels used: 1
  5048 ;; This function calls:
  5049 ;;		Nothing
  5050 ;; This function is called by:
  5051 ;;		_sprintf
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055     1AB3                     _isdigit:	
  5056                           ;psect for function _isdigit
  5057                           
  5058                           
  5059                           ;incstack = 0
  5060                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5061                           ;isdigit@c stored from wreg
  5062     1AB3  00F1               	movwf	isdigit@c
  5063     1AB4  01F0               	clrf	_isdigit$939
  5064     1AB5  303A               	movlw	58
  5065     1AB6  0271               	subwf	isdigit@c,w
  5066     1AB7  1803               	skipnc
  5067     1AB8  2ABF               	goto	l3660
  5068     1AB9  3030               	movlw	48
  5069     1ABA  0271               	subwf	isdigit@c,w
  5070     1ABB  1C03               	skipc
  5071     1ABC  2ABF               	goto	l3660
  5072     1ABD  01F0               	clrf	_isdigit$939
  5073     1ABE  0AF0               	incf	_isdigit$939,f
  5074     1ABF                     l3660:
  5075     1ABF  0C70               	rrf	_isdigit$939,w
  5076     1AC0  0008               	return
  5077     1AC1                     __end_of_isdigit:
  5078                           
  5079                           	psect	text6
  5080     080C                     __ptext6:	
  5081 ;; *************** function _fround *****************
  5082 ;; Defined at:
  5083 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  prec            1    wreg     unsigned char 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  prec            1   47[BANK0 ] unsigned char 
  5088 ;; Return value:  Size  Location     Type
  5089 ;;                  4   30[BANK0 ] unsigned char 
  5090 ;; Registers used:
  5091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5092 ;; Tracked objects:
  5093 ;;		On entry : 300/100
  5094 ;;		On exit  : 300/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5097 ;;      Params:         0       4       0       0       0
  5098 ;;      Locals:         0       9       0       0       0
  5099 ;;      Temps:          0       5       0       0       0
  5100 ;;      Totals:         0      18       0       0       0
  5101 ;;Total ram usage:       18 bytes
  5102 ;; Hardware stack levels used: 1
  5103 ;; Hardware stack levels required when called: 2
  5104 ;; This function calls:
  5105 ;;		___flmul
  5106 ;;		___lbdiv
  5107 ;;		___lbmod
  5108 ;; This function is called by:
  5109 ;;		_sprintf
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113     080C                     _fround:	
  5114                           ;psect for function _fround
  5115                           
  5116                           
  5117                           ;incstack = 0
  5118                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5119                           ;fround@prec stored from wreg
  5120     080C  1283               	bcf	3,5	;RP0=0, select bank0
  5121     080D  00CF               	movwf	fround@prec
  5122                           
  5123                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 417: fround(unsig
      +                          ned char prec);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 418
      +                          : {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 421:  if(prec>
      +                          =110)
  5124     080E  306E               	movlw	110
  5125     080F  024F               	subwf	fround@prec,w
  5126     0810  1C03               	skipc
  5127     0811  28F0               	goto	l3602
  5128                           
  5129                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  5130     0812  303F               	movlw	63
  5131     0813  00A7               	movwf	___flmul@b+3
  5132     0814  3000               	movlw	0
  5133     0815  00A6               	movwf	___flmul@b+2
  5134     0816  3000               	movlw	0
  5135     0817  00A5               	movwf	___flmul@b+1
  5136     0818  3000               	movlw	0
  5137     0819  00A4               	movwf	___flmul@b
  5138     081A  3064               	movlw	100
  5139     081B  00F6               	movwf	___lbdiv@divisor
  5140     081C  084F               	movf	fround@prec,w
  5141     081D  160A  158A  234E  120A  158A  	fcall	___lbdiv
  5142     0822  00C2               	movwf	??_fround
  5143     0823  3001               	movlw	1
  5144     0824                     u5265:
  5145     0824  1003               	clrc
  5146     0825  0DC2               	rlf	??_fround,f
  5147     0826  3EFF               	addlw	-1
  5148     0827  1D03               	skipz
  5149     0828  2824               	goto	u5265
  5150     0829  1003               	clrc
  5151     082A  0D42               	rlf	??_fround,w
  5152     082B  3E7D               	addlw	low (((__npowers_-__stringbase)| (0+32768)+72))
  5153     082C  0084               	movwf	4
  5154     082D  120A  118A  200D  120A  158A  	fcall	stringdir
  5155     0832  00C3               	movwf	??_fround+1
  5156     0833  120A  118A  200D  120A  158A  	fcall	stringdir
  5157     0838  00C4               	movwf	??_fround+2
  5158     0839  120A  118A  200D  120A  158A  	fcall	stringdir
  5159     083E  00C5               	movwf	??_fround+3
  5160     083F  120A  118A  200D  120A  158A  	fcall	stringdir
  5161     0844  00C6               	movwf	??_fround+4
  5162     0845  0846               	movf	??_fround+4,w
  5163     0846  00AB               	movwf	___flmul@a+3
  5164     0847  0845               	movf	??_fround+3,w
  5165     0848  00AA               	movwf	___flmul@a+2
  5166     0849  0844               	movf	??_fround+2,w
  5167     084A  00A9               	movwf	___flmul@a+1
  5168     084B  0843               	movf	??_fround+1,w
  5169     084C  00A8               	movwf	___flmul@a
  5170     084D  160A  118A  2527  120A  158A  	fcall	___flmul
  5171     0852  0827               	movf	?___flmul+3,w
  5172     0853  00CE               	movwf	_fround$1115+3
  5173     0854  0826               	movf	?___flmul+2,w
  5174     0855  00CD               	movwf	_fround$1115+2
  5175     0856  0825               	movf	?___flmul+1,w
  5176     0857  00CC               	movwf	_fround$1115+1
  5177     0858  0824               	movf	?___flmul,w
  5178     0859  00CB               	movwf	_fround$1115
  5179                           
  5180                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  5181     085A  300A               	movlw	10
  5182     085B  00F6               	movwf	___lbdiv@divisor
  5183     085C  3064               	movlw	100
  5184     085D  00F0               	movwf	___lbmod@divisor
  5185     085E  084F               	movf	fround@prec,w
  5186     085F  160A  158A  230F  120A  158A  	fcall	___lbmod
  5187     0864  160A  158A  234E  120A  158A  	fcall	___lbdiv
  5188     0869  00C2               	movwf	??_fround
  5189     086A  3001               	movlw	1
  5190     086B                     u5275:
  5191     086B  1003               	clrc
  5192     086C  0DC2               	rlf	??_fround,f
  5193     086D  3EFF               	addlw	-1
  5194     086E  1D03               	skipz
  5195     086F  286B               	goto	u5275
  5196     0870  1003               	clrc
  5197     0871  0D42               	rlf	??_fround,w
  5198     0872  3E59               	addlw	low (((__npowers_-__stringbase)| (0+32768)+36))
  5199     0873  0084               	movwf	4
  5200     0874  120A  118A  200D  120A  158A  	fcall	stringdir
  5201     0879  00C3               	movwf	??_fround+1
  5202     087A  120A  118A  200D  120A  158A  	fcall	stringdir
  5203     087F  00C4               	movwf	??_fround+2
  5204     0880  120A  118A  200D  120A  158A  	fcall	stringdir
  5205     0885  00C5               	movwf	??_fround+3
  5206     0886  120A  118A  200D  120A  158A  	fcall	stringdir
  5207     088B  00C6               	movwf	??_fround+4
  5208     088C  0846               	movf	??_fround+4,w
  5209     088D  00A7               	movwf	___flmul@b+3
  5210     088E  0845               	movf	??_fround+3,w
  5211     088F  00A6               	movwf	___flmul@b+2
  5212     0890  0844               	movf	??_fround+2,w
  5213     0891  00A5               	movwf	___flmul@b+1
  5214     0892  0843               	movf	??_fround+1,w
  5215     0893  00A4               	movwf	___flmul@b
  5216     0894  084E               	movf	_fround$1115+3,w
  5217     0895  00AB               	movwf	___flmul@a+3
  5218     0896  084D               	movf	_fround$1115+2,w
  5219     0897  00AA               	movwf	___flmul@a+2
  5220     0898  084C               	movf	_fround$1115+1,w
  5221     0899  00A9               	movwf	___flmul@a+1
  5222     089A  084B               	movf	_fround$1115,w
  5223     089B  00A8               	movwf	___flmul@a
  5224     089C  160A  118A  2527  120A  158A  	fcall	___flmul
  5225     08A1  0827               	movf	?___flmul+3,w
  5226     08A2  00CA               	movwf	_fround$1116+3
  5227     08A3  0826               	movf	?___flmul+2,w
  5228     08A4  00C9               	movwf	_fround$1116+2
  5229     08A5  0825               	movf	?___flmul+1,w
  5230     08A6  00C8               	movwf	_fround$1116+1
  5231     08A7  0824               	movf	?___flmul,w
  5232     08A8  00C7               	movwf	_fround$1116
  5233                           
  5234                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  5235     08A9  300A               	movlw	10
  5236     08AA  00F0               	movwf	___lbmod@divisor
  5237     08AB  084F               	movf	fround@prec,w
  5238     08AC  160A  158A  230F  120A  158A  	fcall	___lbmod
  5239     08B1  00C2               	movwf	??_fround
  5240     08B2  3001               	movlw	1
  5241     08B3                     u5285:
  5242     08B3  1003               	clrc
  5243     08B4  0DC2               	rlf	??_fround,f
  5244     08B5  3EFF               	addlw	-1
  5245     08B6  1D03               	skipz
  5246     08B7  28B3               	goto	u5285
  5247     08B8  1003               	clrc
  5248     08B9  0D42               	rlf	??_fround,w
  5249     08BA  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5250     08BB  0084               	movwf	4
  5251     08BC  120A  118A  200D  120A  158A  	fcall	stringdir
  5252     08C1  00C3               	movwf	??_fround+1
  5253     08C2  120A  118A  200D  120A  158A  	fcall	stringdir
  5254     08C7  00C4               	movwf	??_fround+2
  5255     08C8  120A  118A  200D  120A  158A  	fcall	stringdir
  5256     08CD  00C5               	movwf	??_fround+3
  5257     08CE  120A  118A  200D  120A  158A  	fcall	stringdir
  5258     08D3  00C6               	movwf	??_fround+4
  5259     08D4  0846               	movf	??_fround+4,w
  5260     08D5  00A7               	movwf	___flmul@b+3
  5261     08D6  0845               	movf	??_fround+3,w
  5262     08D7  00A6               	movwf	___flmul@b+2
  5263     08D8  0844               	movf	??_fround+2,w
  5264     08D9  00A5               	movwf	___flmul@b+1
  5265     08DA  0843               	movf	??_fround+1,w
  5266     08DB  00A4               	movwf	___flmul@b
  5267     08DC  084A               	movf	_fround$1116+3,w
  5268     08DD  00AB               	movwf	___flmul@a+3
  5269     08DE  0849               	movf	_fround$1116+2,w
  5270     08DF  00AA               	movwf	___flmul@a+2
  5271     08E0  0848               	movf	_fround$1116+1,w
  5272     08E1  00A9               	movwf	___flmul@a+1
  5273     08E2  0847               	movf	_fround$1116,w
  5274     08E3  00A8               	movwf	___flmul@a
  5275     08E4  160A  118A  2527   	fcall	___flmul
  5276     08E7  0827               	movf	?___flmul+3,w
  5277     08E8  00C1               	movwf	?_fround+3
  5278     08E9  0826               	movf	?___flmul+2,w
  5279     08EA  00C0               	movwf	?_fround+2
  5280     08EB  0825               	movf	?___flmul+1,w
  5281     08EC  00BF               	movwf	?_fround+1
  5282     08ED  0824               	movf	?___flmul,w
  5283     08EE  00BE               	movwf	?_fround
  5284     08EF  0008               	return
  5285     08F0                     l3602:
  5286     08F0  300B               	movlw	11
  5287     08F1  024F               	subwf	fround@prec,w
  5288     08F2  1C03               	skipc
  5289     08F3  2983               	goto	l3608
  5290                           
  5291                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 424:   return 0.5
      +                           * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  5292     08F4  303F               	movlw	63
  5293     08F5  00A7               	movwf	___flmul@b+3
  5294     08F6  3000               	movlw	0
  5295     08F7  00A6               	movwf	___flmul@b+2
  5296     08F8  3000               	movlw	0
  5297     08F9  00A5               	movwf	___flmul@b+1
  5298     08FA  3000               	movlw	0
  5299     08FB  00A4               	movwf	___flmul@b
  5300     08FC  300A               	movlw	10
  5301     08FD  00F6               	movwf	___lbdiv@divisor
  5302     08FE  084F               	movf	fround@prec,w
  5303     08FF  160A  158A  234E  120A  158A  	fcall	___lbdiv
  5304     0904  00C2               	movwf	??_fround
  5305     0905  3001               	movlw	1
  5306     0906                     u5305:
  5307     0906  1003               	clrc
  5308     0907  0DC2               	rlf	??_fround,f
  5309     0908  3EFF               	addlw	-1
  5310     0909  1D03               	skipz
  5311     090A  2906               	goto	u5305
  5312     090B  1003               	clrc
  5313     090C  0D42               	rlf	??_fround,w
  5314     090D  3E59               	addlw	low (((__npowers_-__stringbase)| (0+32768)+36))
  5315     090E  0084               	movwf	4
  5316     090F  120A  118A  200D  120A  158A  	fcall	stringdir
  5317     0914  00C3               	movwf	??_fround+1
  5318     0915  120A  118A  200D  120A  158A  	fcall	stringdir
  5319     091A  00C4               	movwf	??_fround+2
  5320     091B  120A  118A  200D  120A  158A  	fcall	stringdir
  5321     0920  00C5               	movwf	??_fround+3
  5322     0921  120A  118A  200D  120A  158A  	fcall	stringdir
  5323     0926  00C6               	movwf	??_fround+4
  5324     0927  0846               	movf	??_fround+4,w
  5325     0928  00AB               	movwf	___flmul@a+3
  5326     0929  0845               	movf	??_fround+3,w
  5327     092A  00AA               	movwf	___flmul@a+2
  5328     092B  0844               	movf	??_fround+2,w
  5329     092C  00A9               	movwf	___flmul@a+1
  5330     092D  0843               	movf	??_fround+1,w
  5331     092E  00A8               	movwf	___flmul@a
  5332     092F  160A  118A  2527  120A  158A  	fcall	___flmul
  5333     0934  0827               	movf	?___flmul+3,w
  5334     0935  00CE               	movwf	_fround$1115+3
  5335     0936  0826               	movf	?___flmul+2,w
  5336     0937  00CD               	movwf	_fround$1115+2
  5337     0938  0825               	movf	?___flmul+1,w
  5338     0939  00CC               	movwf	_fround$1115+1
  5339     093A  0824               	movf	?___flmul,w
  5340     093B  00CB               	movwf	_fround$1115
  5341                           
  5342                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 424:   return 0.5
      +                           * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  5343     093C  300A               	movlw	10
  5344     093D  00F0               	movwf	___lbmod@divisor
  5345     093E  084F               	movf	fround@prec,w
  5346     093F  160A  158A  230F  120A  158A  	fcall	___lbmod
  5347     0944  00C2               	movwf	??_fround
  5348     0945  3001               	movlw	1
  5349     0946                     u5315:
  5350     0946  1003               	clrc
  5351     0947  0DC2               	rlf	??_fround,f
  5352     0948  3EFF               	addlw	-1
  5353     0949  1D03               	skipz
  5354     094A  2946               	goto	u5315
  5355     094B  1003               	clrc
  5356     094C  0D42               	rlf	??_fround,w
  5357     094D  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5358     094E  0084               	movwf	4
  5359     094F  120A  118A  200D  120A  158A  	fcall	stringdir
  5360     0954  00C3               	movwf	??_fround+1
  5361     0955  120A  118A  200D  120A  158A  	fcall	stringdir
  5362     095A  00C4               	movwf	??_fround+2
  5363     095B  120A  118A  200D  120A  158A  	fcall	stringdir
  5364     0960  00C5               	movwf	??_fround+3
  5365     0961  120A  118A  200D  120A  158A  	fcall	stringdir
  5366     0966  00C6               	movwf	??_fround+4
  5367     0967  0846               	movf	??_fround+4,w
  5368     0968  00A7               	movwf	___flmul@b+3
  5369     0969  0845               	movf	??_fround+3,w
  5370     096A  00A6               	movwf	___flmul@b+2
  5371     096B  0844               	movf	??_fround+2,w
  5372     096C  00A5               	movwf	___flmul@b+1
  5373     096D  0843               	movf	??_fround+1,w
  5374     096E  00A4               	movwf	___flmul@b
  5375     096F  084E               	movf	_fround$1115+3,w
  5376     0970  00AB               	movwf	___flmul@a+3
  5377     0971  084D               	movf	_fround$1115+2,w
  5378     0972  00AA               	movwf	___flmul@a+2
  5379     0973  084C               	movf	_fround$1115+1,w
  5380     0974  00A9               	movwf	___flmul@a+1
  5381     0975  084B               	movf	_fround$1115,w
  5382     0976  00A8               	movwf	___flmul@a
  5383     0977  160A  118A  2527   	fcall	___flmul
  5384     097A  0827               	movf	?___flmul+3,w
  5385     097B  00C1               	movwf	?_fround+3
  5386     097C  0826               	movf	?___flmul+2,w
  5387     097D  00C0               	movwf	?_fround+2
  5388     097E  0825               	movf	?___flmul+1,w
  5389     097F  00BF               	movwf	?_fround+1
  5390     0980  0824               	movf	?___flmul,w
  5391     0981  00BE               	movwf	?_fround
  5392     0982  0008               	return
  5393     0983                     l3608:
  5394                           
  5395                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 425:  return 0.5 
      +                          * _npowers_[prec];
  5396     0983  303F               	movlw	63
  5397     0984  00A7               	movwf	___flmul@b+3
  5398     0985  3000               	movlw	0
  5399     0986  00A6               	movwf	___flmul@b+2
  5400     0987  3000               	movlw	0
  5401     0988  00A5               	movwf	___flmul@b+1
  5402     0989  3000               	movlw	0
  5403     098A  00A4               	movwf	___flmul@b
  5404     098B  084F               	movf	fround@prec,w
  5405     098C  00C2               	movwf	??_fround
  5406     098D  3001               	movlw	1
  5407     098E                     u5325:
  5408     098E  1003               	clrc
  5409     098F  0DC2               	rlf	??_fround,f
  5410     0990  3EFF               	addlw	-1
  5411     0991  1D03               	skipz
  5412     0992  298E               	goto	u5325
  5413     0993  1003               	clrc
  5414     0994  0D42               	rlf	??_fround,w
  5415     0995  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5416     0996  0084               	movwf	4
  5417     0997  120A  118A  200D  120A  158A  	fcall	stringdir
  5418     099C  00C3               	movwf	??_fround+1
  5419     099D  120A  118A  200D  120A  158A  	fcall	stringdir
  5420     09A2  00C4               	movwf	??_fround+2
  5421     09A3  120A  118A  200D  120A  158A  	fcall	stringdir
  5422     09A8  00C5               	movwf	??_fround+3
  5423     09A9  120A  118A  200D  120A  158A  	fcall	stringdir
  5424     09AE  00C6               	movwf	??_fround+4
  5425     09AF  0846               	movf	??_fround+4,w
  5426     09B0  00AB               	movwf	___flmul@a+3
  5427     09B1  0845               	movf	??_fround+3,w
  5428     09B2  00AA               	movwf	___flmul@a+2
  5429     09B3  0844               	movf	??_fround+2,w
  5430     09B4  00A9               	movwf	___flmul@a+1
  5431     09B5  0843               	movf	??_fround+1,w
  5432     09B6  00A8               	movwf	___flmul@a
  5433     09B7  160A  118A  2527   	fcall	___flmul
  5434     09BA  0827               	movf	?___flmul+3,w
  5435     09BB  00C1               	movwf	?_fround+3
  5436     09BC  0826               	movf	?___flmul+2,w
  5437     09BD  00C0               	movwf	?_fround+2
  5438     09BE  0825               	movf	?___flmul+1,w
  5439     09BF  00BF               	movwf	?_fround+1
  5440     09C0  0824               	movf	?___flmul,w
  5441     09C1  00BE               	movwf	?_fround
  5442     09C2  0008               	return
  5443     09C3                     __end_of_fround:
  5444                           
  5445                           	psect	text7
  5446     1527                     __ptext7:	
  5447 ;; *************** function ___flmul *****************
  5448 ;; Defined at:
  5449 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\sprcmul.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;  b               4    4[BANK0 ] unsigned char 
  5452 ;;  a               4    8[BANK0 ] unsigned char 
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;  prod            4   24[BANK0 ] struct .
  5455 ;;  grs             4   19[BANK0 ] unsigned long 
  5456 ;;  temp            2   28[BANK0 ] struct .
  5457 ;;  bexp            1   23[BANK0 ] unsigned char 
  5458 ;;  aexp            1   18[BANK0 ] unsigned char 
  5459 ;;  sign            1   17[BANK0 ] unsigned char 
  5460 ;; Return value:  Size  Location     Type
  5461 ;;                  4    4[BANK0 ] unsigned char 
  5462 ;; Registers used:
  5463 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5464 ;; Tracked objects:
  5465 ;;		On entry : 300/0
  5466 ;;		On exit  : 300/0
  5467 ;;		Unchanged: 0/0
  5468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5469 ;;      Params:         0       8       0       0       0
  5470 ;;      Locals:         0      13       0       0       0
  5471 ;;      Temps:          0       5       0       0       0
  5472 ;;      Totals:         0      26       0       0       0
  5473 ;;Total ram usage:       26 bytes
  5474 ;; Hardware stack levels used: 1
  5475 ;; Hardware stack levels required when called: 1
  5476 ;; This function calls:
  5477 ;;		__Umul8_16
  5478 ;; This function is called by:
  5479 ;;		_main
  5480 ;;		_fround
  5481 ;;		_scale
  5482 ;;		_sprintf
  5483 ;; This function uses a non-reentrant model
  5484 ;;
  5485                           
  5486     1527                     ___flmul:	
  5487                           ;psect for function ___flmul
  5488                           
  5489                           
  5490                           ;incstack = 0
  5491                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5492     1527  0827               	movf	___flmul@b+3,w
  5493     1528  3980               	andlw	128
  5494     1529  00B1               	movwf	___flmul@sign
  5495     152A  0827               	movf	___flmul@b+3,w
  5496     152B  00AC               	movwf	??___flmul
  5497     152C  072C               	addwf	??___flmul,w
  5498     152D  00B7               	movwf	___flmul@bexp
  5499     152E  1BA6               	btfsc	___flmul@b+2,7
  5500     152F  1437               	bsf	___flmul@bexp,0
  5501     1530  0837               	movf	___flmul@bexp,w
  5502     1531  1903               	btfsc	3,2
  5503     1532  2D40               	goto	l3260
  5504     1533  0A37               	incf	___flmul@bexp,w
  5505     1534  1D03               	btfss	3,2
  5506     1535  2D3E               	goto	l3258
  5507     1536  3000               	movlw	0
  5508     1537  00A7               	movwf	___flmul@b+3
  5509     1538  3000               	movlw	0
  5510     1539  00A6               	movwf	___flmul@b+2
  5511     153A  3000               	movlw	0
  5512     153B  00A5               	movwf	___flmul@b+1
  5513     153C  3000               	movlw	0
  5514     153D  00A4               	movwf	___flmul@b
  5515     153E                     l3258:
  5516     153E  17A6               	bsf	___flmul@b+2,7
  5517     153F  2D48               	goto	l3262
  5518     1540                     l3260:
  5519     1540  3000               	movlw	0
  5520     1541  00A7               	movwf	___flmul@b+3
  5521     1542  3000               	movlw	0
  5522     1543  00A6               	movwf	___flmul@b+2
  5523     1544  3000               	movlw	0
  5524     1545  00A5               	movwf	___flmul@b+1
  5525     1546  3000               	movlw	0
  5526     1547  00A4               	movwf	___flmul@b
  5527     1548                     l3262:
  5528     1548  082B               	movf	___flmul@a+3,w
  5529     1549  3980               	andlw	128
  5530     154A  00AC               	movwf	??___flmul
  5531     154B  082C               	movf	??___flmul,w
  5532     154C  06B1               	xorwf	___flmul@sign,f
  5533     154D  082B               	movf	___flmul@a+3,w
  5534     154E  00AC               	movwf	??___flmul
  5535     154F  072C               	addwf	??___flmul,w
  5536     1550  00B2               	movwf	___flmul@aexp
  5537     1551  1BAA               	btfsc	___flmul@a+2,7
  5538     1552  1432               	bsf	___flmul@aexp,0
  5539     1553  0832               	movf	___flmul@aexp,w
  5540     1554  1903               	btfsc	3,2
  5541     1555  2D63               	goto	l3278
  5542     1556  0A32               	incf	___flmul@aexp,w
  5543     1557  1D03               	btfss	3,2
  5544     1558  2D61               	goto	l3276
  5545     1559  3000               	movlw	0
  5546     155A  00AB               	movwf	___flmul@a+3
  5547     155B  3000               	movlw	0
  5548     155C  00AA               	movwf	___flmul@a+2
  5549     155D  3000               	movlw	0
  5550     155E  00A9               	movwf	___flmul@a+1
  5551     155F  3000               	movlw	0
  5552     1560  00A8               	movwf	___flmul@a
  5553     1561                     l3276:
  5554     1561  17AA               	bsf	___flmul@a+2,7
  5555     1562  2D6B               	goto	l3280
  5556     1563                     l3278:
  5557     1563  3000               	movlw	0
  5558     1564  00AB               	movwf	___flmul@a+3
  5559     1565  3000               	movlw	0
  5560     1566  00AA               	movwf	___flmul@a+2
  5561     1567  3000               	movlw	0
  5562     1568  00A9               	movwf	___flmul@a+1
  5563     1569  3000               	movlw	0
  5564     156A  00A8               	movwf	___flmul@a
  5565     156B                     l3280:
  5566     156B  0832               	movf	___flmul@aexp,w
  5567     156C  1D03               	btfss	3,2
  5568     156D  0837               	movf	___flmul@bexp,w
  5569     156E  1D03               	btfss	3,2
  5570     156F  2D79               	goto	l3288
  5571     1570  3000               	movlw	0
  5572     1571  00A7               	movwf	?___flmul+3
  5573     1572  3000               	movlw	0
  5574     1573  00A6               	movwf	?___flmul+2
  5575     1574  3000               	movlw	0
  5576     1575  00A5               	movwf	?___flmul+1
  5577     1576  3000               	movlw	0
  5578     1577  00A4               	movwf	?___flmul
  5579     1578  0008               	return
  5580     1579                     l3288:
  5581     1579  0824               	movf	___flmul@b,w
  5582     157A  00F0               	movwf	__Umul8_16@multiplicand
  5583     157B  082A               	movf	___flmul@a+2,w
  5584     157C  160A  158A  23B2  160A  118A  	fcall	__Umul8_16
  5585     1581  0871               	movf	?__Umul8_16+1,w
  5586     1582  00BD               	movwf	___flmul@temp+1
  5587     1583  0870               	movf	?__Umul8_16,w
  5588     1584  00BC               	movwf	___flmul@temp
  5589     1585  083C               	movf	___flmul@temp,w
  5590     1586  00AC               	movwf	??___flmul
  5591     1587  01AD               	clrf	??___flmul+1
  5592     1588  01AE               	clrf	??___flmul+2
  5593     1589  01AF               	clrf	??___flmul+3
  5594     158A  082F               	movf	??___flmul+3,w
  5595     158B  00B6               	movwf	___flmul@grs+3
  5596     158C  082E               	movf	??___flmul+2,w
  5597     158D  00B5               	movwf	___flmul@grs+2
  5598     158E  082D               	movf	??___flmul+1,w
  5599     158F  00B4               	movwf	___flmul@grs+1
  5600     1590  082C               	movf	??___flmul,w
  5601     1591  00B3               	movwf	___flmul@grs
  5602     1592  083D               	movf	___flmul@temp+1,w
  5603     1593  00AC               	movwf	??___flmul
  5604     1594  01AD               	clrf	??___flmul+1
  5605     1595  01AE               	clrf	??___flmul+2
  5606     1596  01AF               	clrf	??___flmul+3
  5607     1597  082F               	movf	??___flmul+3,w
  5608     1598  00BB               	movwf	___flmul@prod+3
  5609     1599  082E               	movf	??___flmul+2,w
  5610     159A  00BA               	movwf	___flmul@prod+2
  5611     159B  082D               	movf	??___flmul+1,w
  5612     159C  00B9               	movwf	___flmul@prod+1
  5613     159D  082C               	movf	??___flmul,w
  5614     159E  00B8               	movwf	___flmul@prod
  5615     159F  0825               	movf	___flmul@b+1,w
  5616     15A0  00F0               	movwf	__Umul8_16@multiplicand
  5617     15A1  0829               	movf	___flmul@a+1,w
  5618     15A2  160A  158A  23B2  160A  118A  	fcall	__Umul8_16
  5619     15A7  0871               	movf	?__Umul8_16+1,w
  5620     15A8  00BD               	movwf	___flmul@temp+1
  5621     15A9  0870               	movf	?__Umul8_16,w
  5622     15AA  00BC               	movwf	___flmul@temp
  5623     15AB  083C               	movf	___flmul@temp,w
  5624     15AC  00AC               	movwf	??___flmul
  5625     15AD  01AD               	clrf	??___flmul+1
  5626     15AE  01AE               	clrf	??___flmul+2
  5627     15AF  01AF               	clrf	??___flmul+3
  5628     15B0  082C               	movf	??___flmul,w
  5629     15B1  07B3               	addwf	___flmul@grs,f
  5630     15B2  082D               	movf	??___flmul+1,w
  5631     15B3  1103               	clrz
  5632     15B4  1803               	skipnc
  5633     15B5  3E01               	addlw	1
  5634     15B6  1D03               	btfss	3,2
  5635     15B7  07B4               	addwf	___flmul@grs+1,f
  5636     15B8  082E               	movf	??___flmul+2,w
  5637     15B9  1103               	clrz
  5638     15BA  1803               	skipnc
  5639     15BB  3E01               	addlw	1
  5640     15BC  1D03               	btfss	3,2
  5641     15BD  07B5               	addwf	___flmul@grs+2,f
  5642     15BE  082F               	movf	??___flmul+3,w
  5643     15BF  1103               	clrz
  5644     15C0  1803               	skipnc
  5645     15C1  3E01               	addlw	1
  5646     15C2  1D03               	btfss	3,2
  5647     15C3  07B6               	addwf	___flmul@grs+3,f
  5648     15C4  083D               	movf	___flmul@temp+1,w
  5649     15C5  00AC               	movwf	??___flmul
  5650     15C6  01AD               	clrf	??___flmul+1
  5651     15C7  01AE               	clrf	??___flmul+2
  5652     15C8  01AF               	clrf	??___flmul+3
  5653     15C9  082C               	movf	??___flmul,w
  5654     15CA  07B8               	addwf	___flmul@prod,f
  5655     15CB  082D               	movf	??___flmul+1,w
  5656     15CC  1103               	clrz
  5657     15CD  1803               	skipnc
  5658     15CE  3E01               	addlw	1
  5659     15CF  1D03               	btfss	3,2
  5660     15D0  07B9               	addwf	___flmul@prod+1,f
  5661     15D1  082E               	movf	??___flmul+2,w
  5662     15D2  1103               	clrz
  5663     15D3  1803               	skipnc
  5664     15D4  3E01               	addlw	1
  5665     15D5  1D03               	btfss	3,2
  5666     15D6  07BA               	addwf	___flmul@prod+2,f
  5667     15D7  082F               	movf	??___flmul+3,w
  5668     15D8  1103               	clrz
  5669     15D9  1803               	skipnc
  5670     15DA  3E01               	addlw	1
  5671     15DB  1D03               	btfss	3,2
  5672     15DC  07BB               	addwf	___flmul@prod+3,f
  5673     15DD  0826               	movf	___flmul@b+2,w
  5674     15DE  00F0               	movwf	__Umul8_16@multiplicand
  5675     15DF  0828               	movf	___flmul@a,w
  5676     15E0  160A  158A  23B2  160A  118A  	fcall	__Umul8_16
  5677     15E5  0871               	movf	?__Umul8_16+1,w
  5678     15E6  00BD               	movwf	___flmul@temp+1
  5679     15E7  0870               	movf	?__Umul8_16,w
  5680     15E8  00BC               	movwf	___flmul@temp
  5681     15E9  083C               	movf	___flmul@temp,w
  5682     15EA  00AC               	movwf	??___flmul
  5683     15EB  01AD               	clrf	??___flmul+1
  5684     15EC  01AE               	clrf	??___flmul+2
  5685     15ED  01AF               	clrf	??___flmul+3
  5686     15EE  082C               	movf	??___flmul,w
  5687     15EF  07B3               	addwf	___flmul@grs,f
  5688     15F0  082D               	movf	??___flmul+1,w
  5689     15F1  1103               	clrz
  5690     15F2  1803               	skipnc
  5691     15F3  3E01               	addlw	1
  5692     15F4  1D03               	btfss	3,2
  5693     15F5  07B4               	addwf	___flmul@grs+1,f
  5694     15F6  082E               	movf	??___flmul+2,w
  5695     15F7  1103               	clrz
  5696     15F8  1803               	skipnc
  5697     15F9  3E01               	addlw	1
  5698     15FA  1D03               	btfss	3,2
  5699     15FB  07B5               	addwf	___flmul@grs+2,f
  5700     15FC  082F               	movf	??___flmul+3,w
  5701     15FD  1103               	clrz
  5702     15FE  1803               	skipnc
  5703     15FF  3E01               	addlw	1
  5704     1600  1D03               	btfss	3,2
  5705     1601  07B6               	addwf	___flmul@grs+3,f
  5706     1602  083D               	movf	___flmul@temp+1,w
  5707     1603  00AC               	movwf	??___flmul
  5708     1604  01AD               	clrf	??___flmul+1
  5709     1605  01AE               	clrf	??___flmul+2
  5710     1606  01AF               	clrf	??___flmul+3
  5711     1607  082C               	movf	??___flmul,w
  5712     1608  07B8               	addwf	___flmul@prod,f
  5713     1609  082D               	movf	??___flmul+1,w
  5714     160A  1103               	clrz
  5715     160B  1803               	skipnc
  5716     160C  3E01               	addlw	1
  5717     160D  1D03               	btfss	3,2
  5718     160E  07B9               	addwf	___flmul@prod+1,f
  5719     160F  082E               	movf	??___flmul+2,w
  5720     1610  1103               	clrz
  5721     1611  1803               	skipnc
  5722     1612  3E01               	addlw	1
  5723     1613  1D03               	btfss	3,2
  5724     1614  07BA               	addwf	___flmul@prod+2,f
  5725     1615  082F               	movf	??___flmul+3,w
  5726     1616  1103               	clrz
  5727     1617  1803               	skipnc
  5728     1618  3E01               	addlw	1
  5729     1619  1D03               	btfss	3,2
  5730     161A  07BB               	addwf	___flmul@prod+3,f
  5731     161B  3008               	movlw	8
  5732     161C  00AC               	movwf	??___flmul
  5733     161D                     u4755:
  5734     161D  1003               	clrc
  5735     161E  0DB3               	rlf	___flmul@grs,f
  5736     161F  0DB4               	rlf	___flmul@grs+1,f
  5737     1620  0DB5               	rlf	___flmul@grs+2,f
  5738     1621  0DB6               	rlf	___flmul@grs+3,f
  5739     1622  0BAC               	decfsz	??___flmul,f
  5740     1623  2E1D               	goto	u4755
  5741     1624  0825               	movf	___flmul@b+1,w
  5742     1625  00F0               	movwf	__Umul8_16@multiplicand
  5743     1626  0828               	movf	___flmul@a,w
  5744     1627  160A  158A  23B2  160A  118A  	fcall	__Umul8_16
  5745     162C  0871               	movf	?__Umul8_16+1,w
  5746     162D  00BD               	movwf	___flmul@temp+1
  5747     162E  0870               	movf	?__Umul8_16,w
  5748     162F  00BC               	movwf	___flmul@temp
  5749     1630  083C               	movf	___flmul@temp,w
  5750     1631  00AC               	movwf	??___flmul
  5751     1632  083D               	movf	___flmul@temp+1,w
  5752     1633  00AD               	movwf	??___flmul+1
  5753     1634  01AE               	clrf	??___flmul+2
  5754     1635  01AF               	clrf	??___flmul+3
  5755     1636  082C               	movf	??___flmul,w
  5756     1637  07B3               	addwf	___flmul@grs,f
  5757     1638  082D               	movf	??___flmul+1,w
  5758     1639  1103               	clrz
  5759     163A  1803               	skipnc
  5760     163B  3E01               	addlw	1
  5761     163C  1D03               	btfss	3,2
  5762     163D  07B4               	addwf	___flmul@grs+1,f
  5763     163E  082E               	movf	??___flmul+2,w
  5764     163F  1103               	clrz
  5765     1640  1803               	skipnc
  5766     1641  3E01               	addlw	1
  5767     1642  1D03               	btfss	3,2
  5768     1643  07B5               	addwf	___flmul@grs+2,f
  5769     1644  082F               	movf	??___flmul+3,w
  5770     1645  1103               	clrz
  5771     1646  1803               	skipnc
  5772     1647  3E01               	addlw	1
  5773     1648  1D03               	btfss	3,2
  5774     1649  07B6               	addwf	___flmul@grs+3,f
  5775     164A  0824               	movf	___flmul@b,w
  5776     164B  00F0               	movwf	__Umul8_16@multiplicand
  5777     164C  0829               	movf	___flmul@a+1,w
  5778     164D  160A  158A  23B2  160A  118A  	fcall	__Umul8_16
  5779     1652  0871               	movf	?__Umul8_16+1,w
  5780     1653  00BD               	movwf	___flmul@temp+1
  5781     1654  0870               	movf	?__Umul8_16,w
  5782     1655  00BC               	movwf	___flmul@temp
  5783     1656  083C               	movf	___flmul@temp,w
  5784     1657  00AC               	movwf	??___flmul
  5785     1658  083D               	movf	___flmul@temp+1,w
  5786     1659  00AD               	movwf	??___flmul+1
  5787     165A  01AE               	clrf	??___flmul+2
  5788     165B  01AF               	clrf	??___flmul+3
  5789     165C  082C               	movf	??___flmul,w
  5790     165D  07B3               	addwf	___flmul@grs,f
  5791     165E  082D               	movf	??___flmul+1,w
  5792     165F  1103               	clrz
  5793     1660  1803               	skipnc
  5794     1661  3E01               	addlw	1
  5795     1662  1D03               	btfss	3,2
  5796     1663  07B4               	addwf	___flmul@grs+1,f
  5797     1664  082E               	movf	??___flmul+2,w
  5798     1665  1103               	clrz
  5799     1666  1803               	skipnc
  5800     1667  3E01               	addlw	1
  5801     1668  1D03               	btfss	3,2
  5802     1669  07B5               	addwf	___flmul@grs+2,f
  5803     166A  082F               	movf	??___flmul+3,w
  5804     166B  1103               	clrz
  5805     166C  1803               	skipnc
  5806     166D  3E01               	addlw	1
  5807     166E  1D03               	btfss	3,2
  5808     166F  07B6               	addwf	___flmul@grs+3,f
  5809     1670  3008               	movlw	8
  5810     1671  00AC               	movwf	??___flmul
  5811     1672                     u4785:
  5812     1672  1003               	clrc
  5813     1673  0DB3               	rlf	___flmul@grs,f
  5814     1674  0DB4               	rlf	___flmul@grs+1,f
  5815     1675  0DB5               	rlf	___flmul@grs+2,f
  5816     1676  0DB6               	rlf	___flmul@grs+3,f
  5817     1677  0BAC               	decfsz	??___flmul,f
  5818     1678  2E72               	goto	u4785
  5819     1679  0824               	movf	___flmul@b,w
  5820     167A  00F0               	movwf	__Umul8_16@multiplicand
  5821     167B  0828               	movf	___flmul@a,w
  5822     167C  160A  158A  23B2  160A  118A  	fcall	__Umul8_16
  5823     1681  0871               	movf	?__Umul8_16+1,w
  5824     1682  00BD               	movwf	___flmul@temp+1
  5825     1683  0870               	movf	?__Umul8_16,w
  5826     1684  00BC               	movwf	___flmul@temp
  5827     1685  083C               	movf	___flmul@temp,w
  5828     1686  00AC               	movwf	??___flmul
  5829     1687  083D               	movf	___flmul@temp+1,w
  5830     1688  00AD               	movwf	??___flmul+1
  5831     1689  01AE               	clrf	??___flmul+2
  5832     168A  01AF               	clrf	??___flmul+3
  5833     168B  082C               	movf	??___flmul,w
  5834     168C  07B3               	addwf	___flmul@grs,f
  5835     168D  082D               	movf	??___flmul+1,w
  5836     168E  1103               	clrz
  5837     168F  1803               	skipnc
  5838     1690  3E01               	addlw	1
  5839     1691  1D03               	btfss	3,2
  5840     1692  07B4               	addwf	___flmul@grs+1,f
  5841     1693  082E               	movf	??___flmul+2,w
  5842     1694  1103               	clrz
  5843     1695  1803               	skipnc
  5844     1696  3E01               	addlw	1
  5845     1697  1D03               	btfss	3,2
  5846     1698  07B5               	addwf	___flmul@grs+2,f
  5847     1699  082F               	movf	??___flmul+3,w
  5848     169A  1103               	clrz
  5849     169B  1803               	skipnc
  5850     169C  3E01               	addlw	1
  5851     169D  1D03               	btfss	3,2
  5852     169E  07B6               	addwf	___flmul@grs+3,f
  5853     169F  0825               	movf	___flmul@b+1,w
  5854     16A0  00F0               	movwf	__Umul8_16@multiplicand
  5855     16A1  082A               	movf	___flmul@a+2,w
  5856     16A2  160A  158A  23B2  160A  118A  	fcall	__Umul8_16
  5857     16A7  0871               	movf	?__Umul8_16+1,w
  5858     16A8  00BD               	movwf	___flmul@temp+1
  5859     16A9  0870               	movf	?__Umul8_16,w
  5860     16AA  00BC               	movwf	___flmul@temp
  5861     16AB  083C               	movf	___flmul@temp,w
  5862     16AC  00AC               	movwf	??___flmul
  5863     16AD  083D               	movf	___flmul@temp+1,w
  5864     16AE  00AD               	movwf	??___flmul+1
  5865     16AF  01AE               	clrf	??___flmul+2
  5866     16B0  01AF               	clrf	??___flmul+3
  5867     16B1  082C               	movf	??___flmul,w
  5868     16B2  07B8               	addwf	___flmul@prod,f
  5869     16B3  082D               	movf	??___flmul+1,w
  5870     16B4  1103               	clrz
  5871     16B5  1803               	skipnc
  5872     16B6  3E01               	addlw	1
  5873     16B7  1D03               	btfss	3,2
  5874     16B8  07B9               	addwf	___flmul@prod+1,f
  5875     16B9  082E               	movf	??___flmul+2,w
  5876     16BA  1103               	clrz
  5877     16BB  1803               	skipnc
  5878     16BC  3E01               	addlw	1
  5879     16BD  1D03               	btfss	3,2
  5880     16BE  07BA               	addwf	___flmul@prod+2,f
  5881     16BF  082F               	movf	??___flmul+3,w
  5882     16C0  1103               	clrz
  5883     16C1  1803               	skipnc
  5884     16C2  3E01               	addlw	1
  5885     16C3  1D03               	btfss	3,2
  5886     16C4  07BB               	addwf	___flmul@prod+3,f
  5887     16C5  0826               	movf	___flmul@b+2,w
  5888     16C6  00F0               	movwf	__Umul8_16@multiplicand
  5889     16C7  0829               	movf	___flmul@a+1,w
  5890     16C8  160A  158A  23B2  160A  118A  	fcall	__Umul8_16
  5891     16CD  0871               	movf	?__Umul8_16+1,w
  5892     16CE  00BD               	movwf	___flmul@temp+1
  5893     16CF  0870               	movf	?__Umul8_16,w
  5894     16D0  00BC               	movwf	___flmul@temp
  5895     16D1  083C               	movf	___flmul@temp,w
  5896     16D2  00AC               	movwf	??___flmul
  5897     16D3  083D               	movf	___flmul@temp+1,w
  5898     16D4  00AD               	movwf	??___flmul+1
  5899     16D5  01AE               	clrf	??___flmul+2
  5900     16D6  01AF               	clrf	??___flmul+3
  5901     16D7  082C               	movf	??___flmul,w
  5902     16D8  07B8               	addwf	___flmul@prod,f
  5903     16D9  082D               	movf	??___flmul+1,w
  5904     16DA  1103               	clrz
  5905     16DB  1803               	skipnc
  5906     16DC  3E01               	addlw	1
  5907     16DD  1D03               	btfss	3,2
  5908     16DE  07B9               	addwf	___flmul@prod+1,f
  5909     16DF  082E               	movf	??___flmul+2,w
  5910     16E0  1103               	clrz
  5911     16E1  1803               	skipnc
  5912     16E2  3E01               	addlw	1
  5913     16E3  1D03               	btfss	3,2
  5914     16E4  07BA               	addwf	___flmul@prod+2,f
  5915     16E5  082F               	movf	??___flmul+3,w
  5916     16E6  1103               	clrz
  5917     16E7  1803               	skipnc
  5918     16E8  3E01               	addlw	1
  5919     16E9  1D03               	btfss	3,2
  5920     16EA  07BB               	addwf	___flmul@prod+3,f
  5921     16EB  0826               	movf	___flmul@b+2,w
  5922     16EC  00F0               	movwf	__Umul8_16@multiplicand
  5923     16ED  082A               	movf	___flmul@a+2,w
  5924     16EE  160A  158A  23B2  160A  118A  	fcall	__Umul8_16
  5925     16F3  0871               	movf	?__Umul8_16+1,w
  5926     16F4  00BD               	movwf	___flmul@temp+1
  5927     16F5  0870               	movf	?__Umul8_16,w
  5928     16F6  00BC               	movwf	___flmul@temp
  5929     16F7  083C               	movf	___flmul@temp,w
  5930     16F8  00AC               	movwf	??___flmul
  5931     16F9  083D               	movf	___flmul@temp+1,w
  5932     16FA  00AD               	movwf	??___flmul+1
  5933     16FB  01AE               	clrf	??___flmul+2
  5934     16FC  01AF               	clrf	??___flmul+3
  5935     16FD  3008               	movlw	8
  5936     16FE                     u4825:
  5937     16FE  1003               	clrc
  5938     16FF  0DAC               	rlf	??___flmul,f
  5939     1700  0DAD               	rlf	??___flmul+1,f
  5940     1701  0DAE               	rlf	??___flmul+2,f
  5941     1702  0DAF               	rlf	??___flmul+3,f
  5942     1703  3EFF               	addlw	-1
  5943     1704  1D03               	skipz
  5944     1705  2EFE               	goto	u4825
  5945     1706  082C               	movf	??___flmul,w
  5946     1707  07B8               	addwf	___flmul@prod,f
  5947     1708  082D               	movf	??___flmul+1,w
  5948     1709  1103               	clrz
  5949     170A  1803               	skipnc
  5950     170B  3E01               	addlw	1
  5951     170C  1D03               	btfss	3,2
  5952     170D  07B9               	addwf	___flmul@prod+1,f
  5953     170E  082E               	movf	??___flmul+2,w
  5954     170F  1103               	clrz
  5955     1710  1803               	skipnc
  5956     1711  3E01               	addlw	1
  5957     1712  1D03               	btfss	3,2
  5958     1713  07BA               	addwf	___flmul@prod+2,f
  5959     1714  082F               	movf	??___flmul+3,w
  5960     1715  1103               	clrz
  5961     1716  1803               	skipnc
  5962     1717  3E01               	addlw	1
  5963     1718  1D03               	btfss	3,2
  5964     1719  07BB               	addwf	___flmul@prod+3,f
  5965     171A  0836               	movf	___flmul@grs+3,w
  5966     171B  00AC               	movwf	??___flmul
  5967     171C  01AD               	clrf	??___flmul+1
  5968     171D  01AE               	clrf	??___flmul+2
  5969     171E  01AF               	clrf	??___flmul+3
  5970     171F  082C               	movf	??___flmul,w
  5971     1720  07B8               	addwf	___flmul@prod,f
  5972     1721  082D               	movf	??___flmul+1,w
  5973     1722  1103               	clrz
  5974     1723  1803               	skipnc
  5975     1724  3E01               	addlw	1
  5976     1725  1D03               	btfss	3,2
  5977     1726  07B9               	addwf	___flmul@prod+1,f
  5978     1727  082E               	movf	??___flmul+2,w
  5979     1728  1103               	clrz
  5980     1729  1803               	skipnc
  5981     172A  3E01               	addlw	1
  5982     172B  1D03               	btfss	3,2
  5983     172C  07BA               	addwf	___flmul@prod+2,f
  5984     172D  082F               	movf	??___flmul+3,w
  5985     172E  1103               	clrz
  5986     172F  1803               	skipnc
  5987     1730  3E01               	addlw	1
  5988     1731  1D03               	btfss	3,2
  5989     1732  07BB               	addwf	___flmul@prod+3,f
  5990     1733  3008               	movlw	8
  5991     1734  00AC               	movwf	??___flmul
  5992     1735                     u4855:
  5993     1735  1003               	clrc
  5994     1736  0DB3               	rlf	___flmul@grs,f
  5995     1737  0DB4               	rlf	___flmul@grs+1,f
  5996     1738  0DB5               	rlf	___flmul@grs+2,f
  5997     1739  0DB6               	rlf	___flmul@grs+3,f
  5998     173A  0BAC               	decfsz	??___flmul,f
  5999     173B  2F35               	goto	u4855
  6000     173C  0837               	movf	___flmul@bexp,w
  6001     173D  0732               	addwf	___flmul@aexp,w
  6002     173E  00AC               	movwf	??___flmul
  6003     173F  01AD               	clrf	??___flmul+1
  6004     1740  0DAD               	rlf	??___flmul+1,f
  6005     1741  082C               	movf	??___flmul,w
  6006     1742  3E82               	addlw	130
  6007     1743  00BC               	movwf	___flmul@temp
  6008     1744  082D               	movf	??___flmul+1,w
  6009     1745  1803               	skipnc
  6010     1746  3E01               	addlw	1
  6011     1747  3EFF               	addlw	255
  6012     1748  00BD               	movwf	___flmul@temp+1
  6013     1749                     l3340:
  6014     1749  1BBA               	btfsc	___flmul@prod+2,7
  6015     174A  2F66               	goto	l3342
  6016     174B  3001               	movlw	1
  6017     174C  00AC               	movwf	??___flmul
  6018     174D                     u4865:
  6019     174D  1003               	clrc
  6020     174E  0DB8               	rlf	___flmul@prod,f
  6021     174F  0DB9               	rlf	___flmul@prod+1,f
  6022     1750  0DBA               	rlf	___flmul@prod+2,f
  6023     1751  0DBB               	rlf	___flmul@prod+3,f
  6024     1752  0BAC               	decfsz	??___flmul,f
  6025     1753  2F4D               	goto	u4865
  6026     1754  1BB6               	btfsc	___flmul@grs+3,7
  6027     1755  1438               	bsf	___flmul@prod,0
  6028     1756  3001               	movlw	1
  6029     1757  00AC               	movwf	??___flmul
  6030     1758                     u4885:
  6031     1758  1003               	clrc
  6032     1759  0DB3               	rlf	___flmul@grs,f
  6033     175A  0DB4               	rlf	___flmul@grs+1,f
  6034     175B  0DB5               	rlf	___flmul@grs+2,f
  6035     175C  0DB6               	rlf	___flmul@grs+3,f
  6036     175D  0BAC               	decfsz	??___flmul,f
  6037     175E  2F58               	goto	u4885
  6038     175F  30FF               	movlw	255
  6039     1760  07BC               	addwf	___flmul@temp,f
  6040     1761  1803               	skipnc
  6041     1762  0ABD               	incf	___flmul@temp+1,f
  6042     1763  30FF               	movlw	255
  6043     1764  07BD               	addwf	___flmul@temp+1,f
  6044     1765  2F49               	goto	l3340
  6045     1766                     l3342:
  6046     1766  01B2               	clrf	___flmul@aexp
  6047     1767  1FB6               	btfss	___flmul@grs+3,7
  6048     1768  2F7F               	goto	l3352
  6049     1769  30FF               	movlw	255
  6050     176A  0533               	andwf	___flmul@grs,w
  6051     176B  00AC               	movwf	??___flmul
  6052     176C  30FF               	movlw	255
  6053     176D  0534               	andwf	___flmul@grs+1,w
  6054     176E  00AD               	movwf	??___flmul+1
  6055     176F  30FF               	movlw	255
  6056     1770  0535               	andwf	___flmul@grs+2,w
  6057     1771  00AE               	movwf	??___flmul+2
  6058     1772  307F               	movlw	127
  6059     1773  0536               	andwf	___flmul@grs+3,w
  6060     1774  00AF               	movwf	??___flmul+3
  6061     1775  082F               	movf	??___flmul+3,w
  6062     1776  042E               	iorwf	??___flmul+2,w
  6063     1777  042D               	iorwf	??___flmul+1,w
  6064     1778  042C               	iorwf	??___flmul,w
  6065     1779  1903               	skipnz
  6066     177A  1838               	btfsc	___flmul@prod,0
  6067     177B  2F7D               	goto	l3348
  6068     177C  2F7F               	goto	l3352
  6069     177D                     l3348:
  6070     177D  01B2               	clrf	___flmul@aexp
  6071     177E  0AB2               	incf	___flmul@aexp,f
  6072     177F                     l3352:
  6073     177F  0832               	movf	___flmul@aexp,w
  6074     1780  1903               	btfsc	3,2
  6075     1781  2FB1               	goto	l3362
  6076     1782  3001               	movlw	1
  6077     1783  07B8               	addwf	___flmul@prod,f
  6078     1784  3000               	movlw	0
  6079     1785  1803               	skipnc
  6080     1786  3001               	movlw	1
  6081     1787  07B9               	addwf	___flmul@prod+1,f
  6082     1788  3000               	movlw	0
  6083     1789  1803               	skipnc
  6084     178A  3001               	movlw	1
  6085     178B  07BA               	addwf	___flmul@prod+2,f
  6086     178C  3000               	movlw	0
  6087     178D  1803               	skipnc
  6088     178E  3001               	movlw	1
  6089     178F  07BB               	addwf	___flmul@prod+3,f
  6090     1790  1C3B               	btfss	___flmul@prod+3,0
  6091     1791  2FB1               	goto	l3362
  6092     1792  0838               	movf	___flmul@prod,w
  6093     1793  00AC               	movwf	??___flmul
  6094     1794  0839               	movf	___flmul@prod+1,w
  6095     1795  00AD               	movwf	??___flmul+1
  6096     1796  083A               	movf	___flmul@prod+2,w
  6097     1797  00AE               	movwf	??___flmul+2
  6098     1798  083B               	movf	___flmul@prod+3,w
  6099     1799  00AF               	movwf	??___flmul+3
  6100     179A  3001               	movlw	1
  6101     179B  00B0               	movwf	??___flmul+4
  6102     179C                     u4955:
  6103     179C  0D2F               	rlf	??___flmul+3,w
  6104     179D  0CAF               	rrf	??___flmul+3,f
  6105     179E  0CAE               	rrf	??___flmul+2,f
  6106     179F  0CAD               	rrf	??___flmul+1,f
  6107     17A0  0CAC               	rrf	??___flmul,f
  6108     17A1  0BB0               	decfsz	??___flmul+4,f
  6109     17A2  2F9C               	goto	u4955
  6110     17A3  082F               	movf	??___flmul+3,w
  6111     17A4  00BB               	movwf	___flmul@prod+3
  6112     17A5  082E               	movf	??___flmul+2,w
  6113     17A6  00BA               	movwf	___flmul@prod+2
  6114     17A7  082D               	movf	??___flmul+1,w
  6115     17A8  00B9               	movwf	___flmul@prod+1
  6116     17A9  082C               	movf	??___flmul,w
  6117     17AA  00B8               	movwf	___flmul@prod
  6118     17AB  3001               	movlw	1
  6119     17AC  07BC               	addwf	___flmul@temp,f
  6120     17AD  1803               	skipnc
  6121     17AE  0ABD               	incf	___flmul@temp+1,f
  6122     17AF  3000               	movlw	0
  6123     17B0  07BD               	addwf	___flmul@temp+1,f
  6124     17B1                     l3362:
  6125     17B1  083D               	movf	___flmul@temp+1,w
  6126     17B2  3A80               	xorlw	128
  6127     17B3  00FF               	movwf	127
  6128     17B4  3080               	movlw	128
  6129     17B5  027F               	subwf	127,w
  6130     17B6  1D03               	skipz
  6131     17B7  2FBA               	goto	u4965
  6132     17B8  30FF               	movlw	255
  6133     17B9  023C               	subwf	___flmul@temp,w
  6134     17BA                     u4965:
  6135     17BA  1C03               	skipc
  6136     17BB  2FC7               	goto	l3366
  6137     17BC  307F               	movlw	127
  6138     17BD  1283               	bcf	3,5	;RP0=0, select bank0
  6139     17BE  1303               	bcf	3,6	;RP1=0, select bank0
  6140     17BF  00BB               	movwf	___flmul@prod+3
  6141     17C0  3080               	movlw	128
  6142     17C1  00BA               	movwf	___flmul@prod+2
  6143     17C2  3000               	movlw	0
  6144     17C3  00B9               	movwf	___flmul@prod+1
  6145     17C4  3000               	movlw	0
  6146     17C5  00B8               	movwf	___flmul@prod
  6147     17C6  2FF3               	goto	l952
  6148     17C7                     l3366:
  6149     17C7  1283               	bcf	3,5	;RP0=0, select bank0
  6150     17C8  1303               	bcf	3,6	;RP1=0, select bank0
  6151     17C9  083D               	movf	___flmul@temp+1,w
  6152     17CA  3A80               	xorlw	128
  6153     17CB  00FF               	movwf	127
  6154     17CC  3080               	movlw	128
  6155     17CD  027F               	subwf	127,w
  6156     17CE  1D03               	skipz
  6157     17CF  2FD2               	goto	u4975
  6158     17D0  3001               	movlw	1
  6159     17D1  023C               	subwf	___flmul@temp,w
  6160     17D2                     u4975:
  6161     17D2  1803               	skipnc
  6162     17D3  2FE0               	goto	l3372
  6163     17D4  3000               	movlw	0
  6164     17D5  1283               	bcf	3,5	;RP0=0, select bank0
  6165     17D6  1303               	bcf	3,6	;RP1=0, select bank0
  6166     17D7  00BB               	movwf	___flmul@prod+3
  6167     17D8  3000               	movlw	0
  6168     17D9  00BA               	movwf	___flmul@prod+2
  6169     17DA  3000               	movlw	0
  6170     17DB  00B9               	movwf	___flmul@prod+1
  6171     17DC  3000               	movlw	0
  6172     17DD  00B8               	movwf	___flmul@prod
  6173     17DE  01B1               	clrf	___flmul@sign
  6174     17DF  2FF3               	goto	l952
  6175     17E0                     l3372:
  6176     17E0  1283               	bcf	3,5	;RP0=0, select bank0
  6177     17E1  1303               	bcf	3,6	;RP1=0, select bank0
  6178     17E2  083C               	movf	___flmul@temp,w
  6179     17E3  00B7               	movwf	___flmul@bexp
  6180     17E4  30FF               	movlw	255
  6181     17E5  05B8               	andwf	___flmul@prod,f
  6182     17E6  30FF               	movlw	255
  6183     17E7  05B9               	andwf	___flmul@prod+1,f
  6184     17E8  307F               	movlw	127
  6185     17E9  05BA               	andwf	___flmul@prod+2,f
  6186     17EA  3000               	movlw	0
  6187     17EB  05BB               	andwf	___flmul@prod+3,f
  6188     17EC  1837               	btfsc	___flmul@bexp,0
  6189     17ED  17BA               	bsf	___flmul@prod+2,7
  6190     17EE  0837               	movf	___flmul@bexp,w
  6191     17EF  00AC               	movwf	??___flmul
  6192     17F0  1003               	clrc
  6193     17F1  0C2C               	rrf	??___flmul,w
  6194     17F2  00BB               	movwf	___flmul@prod+3
  6195     17F3                     l952:
  6196     17F3  0831               	movf	___flmul@sign,w
  6197     17F4  00AC               	movwf	??___flmul
  6198     17F5  082C               	movf	??___flmul,w
  6199     17F6  04BB               	iorwf	___flmul@prod+3,f
  6200     17F7  083B               	movf	___flmul@prod+3,w
  6201     17F8  00A7               	movwf	?___flmul+3
  6202     17F9  083A               	movf	___flmul@prod+2,w
  6203     17FA  00A6               	movwf	?___flmul+2
  6204     17FB  0839               	movf	___flmul@prod+1,w
  6205     17FC  00A5               	movwf	?___flmul+1
  6206     17FD  0838               	movf	___flmul@prod,w
  6207     17FE  00A4               	movwf	?___flmul
  6208     17FF  0008               	return
  6209     1800                     __end_of___flmul:
  6210                           
  6211                           	psect	text8
  6212     1BB2                     __ptext8:	
  6213 ;; *************** function __Umul8_16 *****************
  6214 ;; Defined at:
  6215 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul8_16.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  multiplier      1    wreg     unsigned char 
  6218 ;;  multiplicand    1    0[COMMON] unsigned char 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  multiplier      1    8[COMMON] unsigned char 
  6221 ;;  word_mpld       2    6[COMMON] unsigned int 
  6222 ;;  product         2    4[COMMON] unsigned int 
  6223 ;; Return value:  Size  Location     Type
  6224 ;;                  2    0[COMMON] unsigned int 
  6225 ;; Registers used:
  6226 ;;		wreg, status,2, status,0
  6227 ;; Tracked objects:
  6228 ;;		On entry : 300/0
  6229 ;;		On exit  : 300/0
  6230 ;;		Unchanged: 300/0
  6231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6232 ;;      Params:         2       0       0       0       0
  6233 ;;      Locals:         5       0       0       0       0
  6234 ;;      Temps:          2       0       0       0       0
  6235 ;;      Totals:         9       0       0       0       0
  6236 ;;Total ram usage:        9 bytes
  6237 ;; Hardware stack levels used: 1
  6238 ;; This function calls:
  6239 ;;		Nothing
  6240 ;; This function is called by:
  6241 ;;		___flmul
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245     1BB2                     __Umul8_16:	
  6246                           ;psect for function __Umul8_16
  6247                           
  6248                           
  6249                           ;incstack = 0
  6250                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  6251                           ;__Umul8_16@multiplier stored from wreg
  6252     1BB2  00F8               	movwf	__Umul8_16@multiplier
  6253     1BB3  01F4               	clrf	__Umul8_16@product
  6254     1BB4  01F5               	clrf	__Umul8_16@product+1
  6255     1BB5  0870               	movf	__Umul8_16@multiplicand,w
  6256     1BB6  00F2               	movwf	??__Umul8_16
  6257     1BB7  01F3               	clrf	??__Umul8_16+1
  6258     1BB8  0872               	movf	??__Umul8_16,w
  6259     1BB9  00F6               	movwf	__Umul8_16@word_mpld
  6260     1BBA  0873               	movf	??__Umul8_16+1,w
  6261     1BBB  00F7               	movwf	__Umul8_16@word_mpld+1
  6262     1BBC                     l2864:
  6263     1BBC  1C78               	btfss	__Umul8_16@multiplier,0
  6264     1BBD  2BC4               	goto	l959
  6265     1BBE  0876               	movf	__Umul8_16@word_mpld,w
  6266     1BBF  07F4               	addwf	__Umul8_16@product,f
  6267     1BC0  1803               	skipnc
  6268     1BC1  0AF5               	incf	__Umul8_16@product+1,f
  6269     1BC2  0877               	movf	__Umul8_16@word_mpld+1,w
  6270     1BC3  07F5               	addwf	__Umul8_16@product+1,f
  6271     1BC4                     l959:
  6272     1BC4  3001               	movlw	1
  6273     1BC5                     u3785:
  6274     1BC5  1003               	clrc
  6275     1BC6  0DF6               	rlf	__Umul8_16@word_mpld,f
  6276     1BC7  0DF7               	rlf	__Umul8_16@word_mpld+1,f
  6277     1BC8  3EFF               	addlw	-1
  6278     1BC9  1D03               	skipz
  6279     1BCA  2BC5               	goto	u3785
  6280     1BCB  1003               	clrc
  6281     1BCC  0CF8               	rrf	__Umul8_16@multiplier,f
  6282     1BCD  0878               	movf	__Umul8_16@multiplier,w
  6283     1BCE  1D03               	btfss	3,2
  6284     1BCF  2BBC               	goto	l2864
  6285     1BD0  0875               	movf	__Umul8_16@product+1,w
  6286     1BD1  00F1               	movwf	?__Umul8_16+1
  6287     1BD2  0874               	movf	__Umul8_16@product,w
  6288     1BD3  00F0               	movwf	?__Umul8_16
  6289     1BD4  0008               	return
  6290     1BD5                     __end_of__Umul8_16:
  6291                           
  6292                           	psect	text9
  6293     12ED                     __ptext9:	
  6294 ;; *************** function __tdiv_to_l_ *****************
  6295 ;; Defined at:
  6296 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\ftdivl.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;  f1              4    0[COMMON] float 
  6299 ;;  f2              4    4[COMMON] float 
  6300 ;; Auto vars:     Size  Location     Type
  6301 ;;  quot            4    0[BANK0 ] unsigned long 
  6302 ;;  exp1            1    5[BANK0 ] unsigned char 
  6303 ;;  cntr            1    4[BANK0 ] unsigned char 
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  4    0[COMMON] unsigned long 
  6306 ;; Registers used:
  6307 ;;		wreg, status,2, status,0
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 300/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6313 ;;      Params:         8       0       0       0       0
  6314 ;;      Locals:         0       6       0       0       0
  6315 ;;      Temps:          3       0       0       0       0
  6316 ;;      Totals:        11       6       0       0       0
  6317 ;;Total ram usage:       17 bytes
  6318 ;; Hardware stack levels used: 1
  6319 ;; This function calls:
  6320 ;;		Nothing
  6321 ;; This function is called by:
  6322 ;;		_sprintf
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326     12ED                     __tdiv_to_l_:	
  6327                           ;psect for function __tdiv_to_l_
  6328                           
  6329                           
  6330                           ;incstack = 0
  6331                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  6332     12ED  0870               	movf	__tdiv_to_l_@f1,w
  6333     12EE  00F8               	movwf	??__tdiv_to_l_
  6334     12EF  0871               	movf	__tdiv_to_l_@f1+1,w
  6335     12F0  00F9               	movwf	??__tdiv_to_l_+1
  6336     12F1  0872               	movf	__tdiv_to_l_@f1+2,w
  6337     12F2  00FA               	movwf	??__tdiv_to_l_+2
  6338     12F3  1003               	clrc
  6339     12F4  0D79               	rlf	??__tdiv_to_l_+1,w
  6340     12F5  0D7A               	rlf	??__tdiv_to_l_+2,w
  6341     12F6  1283               	bcf	3,5	;RP0=0, select bank0
  6342     12F7  1303               	bcf	3,6	;RP1=0, select bank0
  6343     12F8  00A5               	movwf	__tdiv_to_l_@exp1
  6344     12F9  0825               	movf	__tdiv_to_l_@exp1,w
  6345     12FA  1D03               	btfss	3,2
  6346     12FB  2B05               	goto	l3670
  6347     12FC                     l3666:
  6348     12FC  3000               	movlw	0
  6349     12FD  00F3               	movwf	?__tdiv_to_l_+3
  6350     12FE  3000               	movlw	0
  6351     12FF  00F2               	movwf	?__tdiv_to_l_+2
  6352     1300  3000               	movlw	0
  6353     1301  00F1               	movwf	?__tdiv_to_l_+1
  6354     1302  3000               	movlw	0
  6355     1303  00F0               	movwf	?__tdiv_to_l_
  6356     1304  0008               	return
  6357     1305                     l3670:
  6358     1305  0874               	movf	__tdiv_to_l_@f2,w
  6359     1306  00F8               	movwf	??__tdiv_to_l_
  6360     1307  0875               	movf	__tdiv_to_l_@f2+1,w
  6361     1308  00F9               	movwf	??__tdiv_to_l_+1
  6362     1309  0876               	movf	__tdiv_to_l_@f2+2,w
  6363     130A  00FA               	movwf	??__tdiv_to_l_+2
  6364     130B  1003               	clrc
  6365     130C  0D79               	rlf	??__tdiv_to_l_+1,w
  6366     130D  0D7A               	rlf	??__tdiv_to_l_+2,w
  6367     130E  00A4               	movwf	__tdiv_to_l_@cntr
  6368     130F  0824               	movf	__tdiv_to_l_@cntr,w
  6369     1310  1903               	btfsc	3,2
  6370     1311  2AFC               	goto	l3666
  6371     1312  17F1               	bsf	__tdiv_to_l_@f1+1,7
  6372     1313  30FF               	movlw	255
  6373     1314  05F0               	andwf	__tdiv_to_l_@f1,f
  6374     1315  30FF               	movlw	255
  6375     1316  05F1               	andwf	__tdiv_to_l_@f1+1,f
  6376     1317  3000               	movlw	0
  6377     1318  05F2               	andwf	__tdiv_to_l_@f1+2,f
  6378     1319  17F5               	bsf	__tdiv_to_l_@f2+1,7
  6379     131A  30FF               	movlw	255
  6380     131B  05F4               	andwf	__tdiv_to_l_@f2,f
  6381     131C  30FF               	movlw	255
  6382     131D  05F5               	andwf	__tdiv_to_l_@f2+1,f
  6383     131E  3000               	movlw	0
  6384     131F  05F6               	andwf	__tdiv_to_l_@f2+2,f
  6385     1320  3000               	movlw	0
  6386     1321  00A3               	movwf	__tdiv_to_l_@quot+3
  6387     1322  3000               	movlw	0
  6388     1323  00A2               	movwf	__tdiv_to_l_@quot+2
  6389     1324  3000               	movlw	0
  6390     1325  00A1               	movwf	__tdiv_to_l_@quot+1
  6391     1326  3000               	movlw	0
  6392     1327  00A0               	movwf	__tdiv_to_l_@quot
  6393     1328  307F               	movlw	127
  6394     1329  02A5               	subwf	__tdiv_to_l_@exp1,f
  6395     132A  3098               	movlw	152
  6396     132B  0724               	addwf	__tdiv_to_l_@cntr,w
  6397     132C  00F8               	movwf	??__tdiv_to_l_
  6398     132D  0878               	movf	??__tdiv_to_l_,w
  6399     132E  02A5               	subwf	__tdiv_to_l_@exp1,f
  6400     132F  3018               	movlw	24
  6401     1330  00A4               	movwf	__tdiv_to_l_@cntr
  6402     1331                     l3684:
  6403     1331  3001               	movlw	1
  6404     1332  00F8               	movwf	??__tdiv_to_l_
  6405     1333                     u5545:
  6406     1333  1003               	clrc
  6407     1334  0DA0               	rlf	__tdiv_to_l_@quot,f
  6408     1335  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  6409     1336  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  6410     1337  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  6411     1338  0BF8               	decfsz	??__tdiv_to_l_,f
  6412     1339  2B33               	goto	u5545
  6413     133A  0876               	movf	__tdiv_to_l_@f2+2,w
  6414     133B  0272               	subwf	__tdiv_to_l_@f1+2,w
  6415     133C  1D03               	skipz
  6416     133D  2B44               	goto	u5555
  6417     133E  0875               	movf	__tdiv_to_l_@f2+1,w
  6418     133F  0271               	subwf	__tdiv_to_l_@f1+1,w
  6419     1340  1D03               	skipz
  6420     1341  2B44               	goto	u5555
  6421     1342  0874               	movf	__tdiv_to_l_@f2,w
  6422     1343  0270               	subwf	__tdiv_to_l_@f1,w
  6423     1344                     u5555:
  6424     1344  1C03               	skipc
  6425     1345  2B51               	goto	l3692
  6426     1346  0874               	movf	__tdiv_to_l_@f2,w
  6427     1347  02F0               	subwf	__tdiv_to_l_@f1,f
  6428     1348  0875               	movf	__tdiv_to_l_@f2+1,w
  6429     1349  1C03               	skipc
  6430     134A  0F75               	incfsz	__tdiv_to_l_@f2+1,w
  6431     134B  02F1               	subwf	__tdiv_to_l_@f1+1,f
  6432     134C  0876               	movf	__tdiv_to_l_@f2+2,w
  6433     134D  1C03               	skipc
  6434     134E  0A76               	incf	__tdiv_to_l_@f2+2,w
  6435     134F  02F2               	subwf	__tdiv_to_l_@f1+2,f
  6436     1350  1420               	bsf	__tdiv_to_l_@quot,0
  6437     1351                     l3692:
  6438     1351  3001               	movlw	1
  6439     1352                     u5565:
  6440     1352  1003               	clrc
  6441     1353  0DF0               	rlf	__tdiv_to_l_@f1,f
  6442     1354  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  6443     1355  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  6444     1356  3EFF               	addlw	-1
  6445     1357  1D03               	skipz
  6446     1358  2B52               	goto	u5565
  6447     1359  3001               	movlw	1
  6448     135A  02A4               	subwf	__tdiv_to_l_@cntr,f
  6449     135B  1D03               	btfss	3,2
  6450     135C  2B31               	goto	l3684
  6451     135D  1FA5               	btfss	__tdiv_to_l_@exp1,7
  6452     135E  2B74               	goto	l3704
  6453     135F  0825               	movf	__tdiv_to_l_@exp1,w
  6454     1360  3A80               	xorlw	128
  6455     1361  3E97               	addlw	151
  6456     1362  1C03               	btfss	3,0
  6457     1363  2AFC               	goto	l3666
  6458     1364                     l3702:
  6459     1364  3001               	movlw	1
  6460     1365                     u5605:
  6461     1365  1003               	clrc
  6462     1366  0CA3               	rrf	__tdiv_to_l_@quot+3,f
  6463     1367  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  6464     1368  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  6465     1369  0CA0               	rrf	__tdiv_to_l_@quot,f
  6466     136A  3EFF               	addlw	-1
  6467     136B  1D03               	skipz
  6468     136C  2B65               	goto	u5605
  6469     136D  3001               	movlw	1
  6470     136E  00F8               	movwf	??__tdiv_to_l_
  6471     136F  0878               	movf	??__tdiv_to_l_,w
  6472     1370  07A5               	addwf	__tdiv_to_l_@exp1,f
  6473     1371  1903               	btfsc	3,2
  6474     1372  2B87               	goto	l3712
  6475     1373  2B64               	goto	l3702
  6476     1374                     l3704:
  6477     1374  3018               	movlw	24
  6478     1375  0225               	subwf	__tdiv_to_l_@exp1,w
  6479     1376  1803               	btfsc	3,0
  6480     1377  2AFC               	goto	l3666
  6481     1378                     l745:
  6482     1378  0825               	movf	__tdiv_to_l_@exp1,w
  6483     1379  1903               	btfsc	3,2
  6484     137A  2B87               	goto	l3712
  6485     137B  3001               	movlw	1
  6486     137C  00F8               	movwf	??__tdiv_to_l_
  6487     137D                     u5635:
  6488     137D  1003               	clrc
  6489     137E  0DA0               	rlf	__tdiv_to_l_@quot,f
  6490     137F  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  6491     1380  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  6492     1381  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  6493     1382  0BF8               	decfsz	??__tdiv_to_l_,f
  6494     1383  2B7D               	goto	u5635
  6495     1384  3001               	movlw	1
  6496     1385  02A5               	subwf	__tdiv_to_l_@exp1,f
  6497     1386  2B78               	goto	l745
  6498     1387                     l3712:
  6499     1387  0823               	movf	__tdiv_to_l_@quot+3,w
  6500     1388  00F3               	movwf	?__tdiv_to_l_+3
  6501     1389  0822               	movf	__tdiv_to_l_@quot+2,w
  6502     138A  00F2               	movwf	?__tdiv_to_l_+2
  6503     138B  0821               	movf	__tdiv_to_l_@quot+1,w
  6504     138C  00F1               	movwf	?__tdiv_to_l_+1
  6505     138D  0820               	movf	__tdiv_to_l_@quot,w
  6506     138E  00F0               	movwf	?__tdiv_to_l_
  6507     138F  0008               	return
  6508     1390                     __end_of__tdiv_to_l_:
  6509                           
  6510                           	psect	text10
  6511     124A                     __ptext10:	
  6512 ;; *************** function __div_to_l_ *****************
  6513 ;; Defined at:
  6514 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\fldivl.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;  f1              4    0[COMMON] unsigned long 
  6517 ;;  f2              4    4[COMMON] unsigned long 
  6518 ;; Auto vars:     Size  Location     Type
  6519 ;;  quot            4    0[BANK0 ] unsigned long 
  6520 ;;  exp1            1    5[BANK0 ] unsigned char 
  6521 ;;  cntr            1    4[BANK0 ] unsigned char 
  6522 ;; Return value:  Size  Location     Type
  6523 ;;                  4    0[COMMON] unsigned long 
  6524 ;; Registers used:
  6525 ;;		wreg, status,2, status,0
  6526 ;; Tracked objects:
  6527 ;;		On entry : 300/100
  6528 ;;		On exit  : 300/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6531 ;;      Params:         8       0       0       0       0
  6532 ;;      Locals:         0       6       0       0       0
  6533 ;;      Temps:          1       0       0       0       0
  6534 ;;      Totals:         9       6       0       0       0
  6535 ;;Total ram usage:       15 bytes
  6536 ;; Hardware stack levels used: 1
  6537 ;; This function calls:
  6538 ;;		Nothing
  6539 ;; This function is called by:
  6540 ;;		_sprintf
  6541 ;; This function uses a non-reentrant model
  6542 ;;
  6543                           
  6544     124A                     __div_to_l_:	
  6545                           ;psect for function __div_to_l_
  6546                           
  6547                           
  6548                           ;incstack = 0
  6549                           ; Regs used in __div_to_l_: [wreg+status,2+status,0]
  6550     124A  1003               	clrc
  6551     124B  0D72               	rlf	__div_to_l_@f1+2,w
  6552     124C  0D73               	rlf	__div_to_l_@f1+3,w
  6553     124D  1283               	bcf	3,5	;RP0=0, select bank0
  6554     124E  00A5               	movwf	__div_to_l_@exp1
  6555     124F  0825               	movf	__div_to_l_@exp1,w
  6556     1250  1D03               	btfss	3,2
  6557     1251  2A5B               	goto	l3722
  6558     1252                     l3718:
  6559     1252  3000               	movlw	0
  6560     1253  00F3               	movwf	?__div_to_l_+3
  6561     1254  3000               	movlw	0
  6562     1255  00F2               	movwf	?__div_to_l_+2
  6563     1256  3000               	movlw	0
  6564     1257  00F1               	movwf	?__div_to_l_+1
  6565     1258  3000               	movlw	0
  6566     1259  00F0               	movwf	?__div_to_l_
  6567     125A  0008               	return
  6568     125B                     l3722:
  6569     125B  1003               	clrc
  6570     125C  0D76               	rlf	__div_to_l_@f2+2,w
  6571     125D  0D77               	rlf	__div_to_l_@f2+3,w
  6572     125E  00A4               	movwf	__div_to_l_@cntr
  6573     125F  0824               	movf	__div_to_l_@cntr,w
  6574     1260  1903               	btfsc	3,2
  6575     1261  2A52               	goto	l3718
  6576     1262  17F2               	bsf	__div_to_l_@f1+2,7
  6577     1263  30FF               	movlw	255
  6578     1264  05F0               	andwf	__div_to_l_@f1,f
  6579     1265  30FF               	movlw	255
  6580     1266  05F1               	andwf	__div_to_l_@f1+1,f
  6581     1267  30FF               	movlw	255
  6582     1268  05F2               	andwf	__div_to_l_@f1+2,f
  6583     1269  3000               	movlw	0
  6584     126A  05F3               	andwf	__div_to_l_@f1+3,f
  6585     126B  17F6               	bsf	__div_to_l_@f2+2,7
  6586     126C  30FF               	movlw	255
  6587     126D  05F4               	andwf	__div_to_l_@f2,f
  6588     126E  30FF               	movlw	255
  6589     126F  05F5               	andwf	__div_to_l_@f2+1,f
  6590     1270  30FF               	movlw	255
  6591     1271  05F6               	andwf	__div_to_l_@f2+2,f
  6592     1272  3000               	movlw	0
  6593     1273  05F7               	andwf	__div_to_l_@f2+3,f
  6594     1274  3000               	movlw	0
  6595     1275  00A3               	movwf	__div_to_l_@quot+3
  6596     1276  3000               	movlw	0
  6597     1277  00A2               	movwf	__div_to_l_@quot+2
  6598     1278  3000               	movlw	0
  6599     1279  00A1               	movwf	__div_to_l_@quot+1
  6600     127A  3000               	movlw	0
  6601     127B  00A0               	movwf	__div_to_l_@quot
  6602     127C  307F               	movlw	127
  6603     127D  02A5               	subwf	__div_to_l_@exp1,f
  6604     127E  30A0               	movlw	160
  6605     127F  0724               	addwf	__div_to_l_@cntr,w
  6606     1280  00F8               	movwf	??__div_to_l_
  6607     1281  0878               	movf	??__div_to_l_,w
  6608     1282  02A5               	subwf	__div_to_l_@exp1,f
  6609     1283  3020               	movlw	32
  6610     1284  00A4               	movwf	__div_to_l_@cntr
  6611     1285                     l3736:
  6612     1285  3001               	movlw	1
  6613     1286  00F8               	movwf	??__div_to_l_
  6614     1287                     u5675:
  6615     1287  1003               	clrc
  6616     1288  0DA0               	rlf	__div_to_l_@quot,f
  6617     1289  0DA1               	rlf	__div_to_l_@quot+1,f
  6618     128A  0DA2               	rlf	__div_to_l_@quot+2,f
  6619     128B  0DA3               	rlf	__div_to_l_@quot+3,f
  6620     128C  0BF8               	decfsz	??__div_to_l_,f
  6621     128D  2A87               	goto	u5675
  6622     128E  0877               	movf	__div_to_l_@f2+3,w
  6623     128F  0273               	subwf	__div_to_l_@f1+3,w
  6624     1290  1D03               	skipz
  6625     1291  2A9C               	goto	u5685
  6626     1292  0876               	movf	__div_to_l_@f2+2,w
  6627     1293  0272               	subwf	__div_to_l_@f1+2,w
  6628     1294  1D03               	skipz
  6629     1295  2A9C               	goto	u5685
  6630     1296  0875               	movf	__div_to_l_@f2+1,w
  6631     1297  0271               	subwf	__div_to_l_@f1+1,w
  6632     1298  1D03               	skipz
  6633     1299  2A9C               	goto	u5685
  6634     129A  0874               	movf	__div_to_l_@f2,w
  6635     129B  0270               	subwf	__div_to_l_@f1,w
  6636     129C                     u5685:
  6637     129C  1C03               	skipc
  6638     129D  2AAD               	goto	l3744
  6639     129E  0874               	movf	__div_to_l_@f2,w
  6640     129F  02F0               	subwf	__div_to_l_@f1,f
  6641     12A0  0875               	movf	__div_to_l_@f2+1,w
  6642     12A1  1C03               	skipc
  6643     12A2  0F75               	incfsz	__div_to_l_@f2+1,w
  6644     12A3  02F1               	subwf	__div_to_l_@f1+1,f
  6645     12A4  0876               	movf	__div_to_l_@f2+2,w
  6646     12A5  1C03               	skipc
  6647     12A6  0F76               	incfsz	__div_to_l_@f2+2,w
  6648     12A7  02F2               	subwf	__div_to_l_@f1+2,f
  6649     12A8  0877               	movf	__div_to_l_@f2+3,w
  6650     12A9  1C03               	skipc
  6651     12AA  0F77               	incfsz	__div_to_l_@f2+3,w
  6652     12AB  02F3               	subwf	__div_to_l_@f1+3,f
  6653     12AC  1420               	bsf	__div_to_l_@quot,0
  6654     12AD                     l3744:
  6655     12AD  3001               	movlw	1
  6656     12AE  00F8               	movwf	??__div_to_l_
  6657     12AF                     u5695:
  6658     12AF  1003               	clrc
  6659     12B0  0DF0               	rlf	__div_to_l_@f1,f
  6660     12B1  0DF1               	rlf	__div_to_l_@f1+1,f
  6661     12B2  0DF2               	rlf	__div_to_l_@f1+2,f
  6662     12B3  0DF3               	rlf	__div_to_l_@f1+3,f
  6663     12B4  0BF8               	decfsz	??__div_to_l_,f
  6664     12B5  2AAF               	goto	u5695
  6665     12B6  3001               	movlw	1
  6666     12B7  02A4               	subwf	__div_to_l_@cntr,f
  6667     12B8  1D03               	btfss	3,2
  6668     12B9  2A85               	goto	l3736
  6669     12BA  1FA5               	btfss	__div_to_l_@exp1,7
  6670     12BB  2AD1               	goto	l3756
  6671     12BC  0825               	movf	__div_to_l_@exp1,w
  6672     12BD  3A80               	xorlw	128
  6673     12BE  3E9F               	addlw	159
  6674     12BF  1C03               	btfss	3,0
  6675     12C0  2A52               	goto	l3718
  6676     12C1                     l3754:
  6677     12C1  3001               	movlw	1
  6678     12C2                     u5735:
  6679     12C2  1003               	clrc
  6680     12C3  0CA3               	rrf	__div_to_l_@quot+3,f
  6681     12C4  0CA2               	rrf	__div_to_l_@quot+2,f
  6682     12C5  0CA1               	rrf	__div_to_l_@quot+1,f
  6683     12C6  0CA0               	rrf	__div_to_l_@quot,f
  6684     12C7  3EFF               	addlw	-1
  6685     12C8  1D03               	skipz
  6686     12C9  2AC2               	goto	u5735
  6687     12CA  3001               	movlw	1
  6688     12CB  00F8               	movwf	??__div_to_l_
  6689     12CC  0878               	movf	??__div_to_l_,w
  6690     12CD  07A5               	addwf	__div_to_l_@exp1,f
  6691     12CE  1903               	btfsc	3,2
  6692     12CF  2AE4               	goto	l3764
  6693     12D0  2AC1               	goto	l3754
  6694     12D1                     l3756:
  6695     12D1  3020               	movlw	32
  6696     12D2  0225               	subwf	__div_to_l_@exp1,w
  6697     12D3  1803               	btfsc	3,0
  6698     12D4  2A52               	goto	l3718
  6699     12D5                     l698:
  6700     12D5  0825               	movf	__div_to_l_@exp1,w
  6701     12D6  1903               	btfsc	3,2
  6702     12D7  2AE4               	goto	l3764
  6703     12D8  3001               	movlw	1
  6704     12D9  00F8               	movwf	??__div_to_l_
  6705     12DA                     u5765:
  6706     12DA  1003               	clrc
  6707     12DB  0DA0               	rlf	__div_to_l_@quot,f
  6708     12DC  0DA1               	rlf	__div_to_l_@quot+1,f
  6709     12DD  0DA2               	rlf	__div_to_l_@quot+2,f
  6710     12DE  0DA3               	rlf	__div_to_l_@quot+3,f
  6711     12DF  0BF8               	decfsz	??__div_to_l_,f
  6712     12E0  2ADA               	goto	u5765
  6713     12E1  3001               	movlw	1
  6714     12E2  02A5               	subwf	__div_to_l_@exp1,f
  6715     12E3  2AD5               	goto	l698
  6716     12E4                     l3764:
  6717     12E4  0823               	movf	__div_to_l_@quot+3,w
  6718     12E5  00F3               	movwf	?__div_to_l_+3
  6719     12E6  0822               	movf	__div_to_l_@quot+2,w
  6720     12E7  00F2               	movwf	?__div_to_l_+2
  6721     12E8  0821               	movf	__div_to_l_@quot+1,w
  6722     12E9  00F1               	movwf	?__div_to_l_+1
  6723     12EA  0820               	movf	__div_to_l_@quot,w
  6724     12EB  00F0               	movwf	?__div_to_l_
  6725     12EC  0008               	return
  6726     12ED                     __end_of__div_to_l_:
  6727                           
  6728                           	psect	text11
  6729     11A9                     __ptext11:	
  6730 ;; *************** function ___xxtofl *****************
  6731 ;; Defined at:
  6732 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\xxtofl.c"
  6733 ;; Parameters:    Size  Location     Type
  6734 ;;  sign            1    wreg     unsigned char 
  6735 ;;  val             4    0[COMMON] long 
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;  sign            1    8[COMMON] unsigned char 
  6738 ;;  arg             4   10[COMMON] unsigned long 
  6739 ;;  exp             1    9[COMMON] unsigned char 
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  4    0[COMMON] unsigned char 
  6742 ;; Registers used:
  6743 ;;		wreg, status,2, status,0
  6744 ;; Tracked objects:
  6745 ;;		On entry : 200/0
  6746 ;;		On exit  : 200/0
  6747 ;;		Unchanged: 200/0
  6748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6749 ;;      Params:         4       0       0       0       0
  6750 ;;      Locals:         6       0       0       0       0
  6751 ;;      Temps:          4       0       0       0       0
  6752 ;;      Totals:        14       0       0       0       0
  6753 ;;Total ram usage:       14 bytes
  6754 ;; Hardware stack levels used: 1
  6755 ;; This function calls:
  6756 ;;		Nothing
  6757 ;; This function is called by:
  6758 ;;		_main
  6759 ;;		_sprintf
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763     11A9                     ___xxtofl:	
  6764                           ;psect for function ___xxtofl
  6765                           
  6766                           
  6767                           ;incstack = 0
  6768                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  6769                           ;___xxtofl@sign stored from wreg
  6770     11A9  00F8               	movwf	___xxtofl@sign
  6771     11AA  0878               	movf	___xxtofl@sign,w
  6772     11AB  1D03               	btfss	3,2
  6773     11AC  1FF3               	btfss	___xxtofl@val+3,7
  6774     11AD  29BE               	goto	l3890
  6775     11AE  0970               	comf	___xxtofl@val,w
  6776     11AF  00FA               	movwf	___xxtofl@arg
  6777     11B0  0971               	comf	___xxtofl@val+1,w
  6778     11B1  00FB               	movwf	___xxtofl@arg+1
  6779     11B2  0972               	comf	___xxtofl@val+2,w
  6780     11B3  00FC               	movwf	___xxtofl@arg+2
  6781     11B4  0973               	comf	___xxtofl@val+3,w
  6782     11B5  00FD               	movwf	___xxtofl@arg+3
  6783     11B6  0AFA               	incf	___xxtofl@arg,f
  6784     11B7  1903               	skipnz
  6785     11B8  0AFB               	incf	___xxtofl@arg+1,f
  6786     11B9  1903               	skipnz
  6787     11BA  0AFC               	incf	___xxtofl@arg+2,f
  6788     11BB  1903               	skipnz
  6789     11BC  0AFD               	incf	___xxtofl@arg+3,f
  6790     11BD  29C6               	goto	l984
  6791     11BE                     l3890:
  6792     11BE  0873               	movf	___xxtofl@val+3,w
  6793     11BF  00FD               	movwf	___xxtofl@arg+3
  6794     11C0  0872               	movf	___xxtofl@val+2,w
  6795     11C1  00FC               	movwf	___xxtofl@arg+2
  6796     11C2  0871               	movf	___xxtofl@val+1,w
  6797     11C3  00FB               	movwf	___xxtofl@arg+1
  6798     11C4  0870               	movf	___xxtofl@val,w
  6799     11C5  00FA               	movwf	___xxtofl@arg
  6800     11C6                     l984:
  6801     11C6  0873               	movf	___xxtofl@val+3,w
  6802     11C7  0472               	iorwf	___xxtofl@val+2,w
  6803     11C8  0471               	iorwf	___xxtofl@val+1,w
  6804     11C9  0470               	iorwf	___xxtofl@val,w
  6805     11CA  1D03               	skipz
  6806     11CB  29D5               	goto	l3896
  6807     11CC  3000               	movlw	0
  6808     11CD  00F3               	movwf	?___xxtofl+3
  6809     11CE  3000               	movlw	0
  6810     11CF  00F2               	movwf	?___xxtofl+2
  6811     11D0  3000               	movlw	0
  6812     11D1  00F1               	movwf	?___xxtofl+1
  6813     11D2  3000               	movlw	0
  6814     11D3  00F0               	movwf	?___xxtofl
  6815     11D4  0008               	return
  6816     11D5                     l3896:
  6817     11D5  3096               	movlw	150
  6818     11D6  00F9               	movwf	___xxtofl@exp
  6819     11D7                     l3900:
  6820     11D7  30FE               	movlw	254
  6821     11D8  057D               	andwf	___xxtofl@arg+3,w
  6822     11D9  1903               	btfsc	3,2
  6823     11DA  2A04               	goto	l990
  6824     11DB  3001               	movlw	1
  6825     11DC  00F4               	movwf	??___xxtofl
  6826     11DD  0874               	movf	??___xxtofl,w
  6827     11DE  07F9               	addwf	___xxtofl@exp,f
  6828     11DF  3001               	movlw	1
  6829     11E0                     u6125:
  6830     11E0  1003               	clrc
  6831     11E1  0CFD               	rrf	___xxtofl@arg+3,f
  6832     11E2  0CFC               	rrf	___xxtofl@arg+2,f
  6833     11E3  0CFB               	rrf	___xxtofl@arg+1,f
  6834     11E4  0CFA               	rrf	___xxtofl@arg,f
  6835     11E5  3EFF               	addlw	-1
  6836     11E6  1D03               	skipz
  6837     11E7  29E0               	goto	u6125
  6838     11E8  29D7               	goto	l3900
  6839     11E9                     l3902:
  6840     11E9  3001               	movlw	1
  6841     11EA  00F4               	movwf	??___xxtofl
  6842     11EB  0874               	movf	??___xxtofl,w
  6843     11EC  07F9               	addwf	___xxtofl@exp,f
  6844     11ED  3001               	movlw	1
  6845     11EE  07FA               	addwf	___xxtofl@arg,f
  6846     11EF  3000               	movlw	0
  6847     11F0  1803               	skipnc
  6848     11F1  3001               	movlw	1
  6849     11F2  07FB               	addwf	___xxtofl@arg+1,f
  6850     11F3  3000               	movlw	0
  6851     11F4  1803               	skipnc
  6852     11F5  3001               	movlw	1
  6853     11F6  07FC               	addwf	___xxtofl@arg+2,f
  6854     11F7  3000               	movlw	0
  6855     11F8  1803               	skipnc
  6856     11F9  3001               	movlw	1
  6857     11FA  07FD               	addwf	___xxtofl@arg+3,f
  6858     11FB  3001               	movlw	1
  6859     11FC                     u6145:
  6860     11FC  1003               	clrc
  6861     11FD  0CFD               	rrf	___xxtofl@arg+3,f
  6862     11FE  0CFC               	rrf	___xxtofl@arg+2,f
  6863     11FF  0CFB               	rrf	___xxtofl@arg+1,f
  6864     1200  0CFA               	rrf	___xxtofl@arg,f
  6865     1201  3EFF               	addlw	-1
  6866     1202  1D03               	skipz
  6867     1203  29FC               	goto	u6145
  6868     1204                     l990:
  6869     1204  30FF               	movlw	255
  6870     1205  057D               	andwf	___xxtofl@arg+3,w
  6871     1206  1903               	btfsc	3,2
  6872     1207  2A18               	goto	l3910
  6873     1208  29E9               	goto	l3902
  6874     1209                     l3912:
  6875     1209  3002               	movlw	2
  6876     120A  0279               	subwf	___xxtofl@exp,w
  6877     120B  1C03               	btfss	3,0
  6878     120C  2A1A               	goto	l997
  6879     120D  3001               	movlw	1
  6880     120E  02F9               	subwf	___xxtofl@exp,f
  6881     120F  3001               	movlw	1
  6882     1210  00F4               	movwf	??___xxtofl
  6883     1211                     u6165:
  6884     1211  1003               	clrc
  6885     1212  0DFA               	rlf	___xxtofl@arg,f
  6886     1213  0DFB               	rlf	___xxtofl@arg+1,f
  6887     1214  0DFC               	rlf	___xxtofl@arg+2,f
  6888     1215  0DFD               	rlf	___xxtofl@arg+3,f
  6889     1216  0BF4               	decfsz	??___xxtofl,f
  6890     1217  2A11               	goto	u6165
  6891     1218                     l3910:
  6892     1218  1FFC               	btfss	___xxtofl@arg+2,7
  6893     1219  2A09               	goto	l3912
  6894     121A                     l997:
  6895     121A  1879               	btfsc	___xxtofl@exp,0
  6896     121B  2A24               	goto	l998
  6897     121C  30FF               	movlw	255
  6898     121D  05FA               	andwf	___xxtofl@arg,f
  6899     121E  30FF               	movlw	255
  6900     121F  05FB               	andwf	___xxtofl@arg+1,f
  6901     1220  307F               	movlw	127
  6902     1221  05FC               	andwf	___xxtofl@arg+2,f
  6903     1222  30FF               	movlw	255
  6904     1223  05FD               	andwf	___xxtofl@arg+3,f
  6905     1224                     l998:
  6906     1224  1003               	clrc
  6907     1225  0CF9               	rrf	___xxtofl@exp,f
  6908     1226  0879               	movf	___xxtofl@exp,w
  6909     1227  00F4               	movwf	??___xxtofl
  6910     1228  01F5               	clrf	??___xxtofl+1
  6911     1229  01F6               	clrf	??___xxtofl+2
  6912     122A  01F7               	clrf	??___xxtofl+3
  6913     122B  3018               	movlw	24
  6914     122C                     u6205:
  6915     122C  1003               	clrc
  6916     122D  0DF4               	rlf	??___xxtofl,f
  6917     122E  0DF5               	rlf	??___xxtofl+1,f
  6918     122F  0DF6               	rlf	??___xxtofl+2,f
  6919     1230  0DF7               	rlf	??___xxtofl+3,f
  6920     1231  3EFF               	addlw	-1
  6921     1232  1D03               	skipz
  6922     1233  2A2C               	goto	u6205
  6923     1234  0874               	movf	??___xxtofl,w
  6924     1235  04FA               	iorwf	___xxtofl@arg,f
  6925     1236  0875               	movf	??___xxtofl+1,w
  6926     1237  04FB               	iorwf	___xxtofl@arg+1,f
  6927     1238  0876               	movf	??___xxtofl+2,w
  6928     1239  04FC               	iorwf	___xxtofl@arg+2,f
  6929     123A  0877               	movf	??___xxtofl+3,w
  6930     123B  04FD               	iorwf	___xxtofl@arg+3,f
  6931     123C  0878               	movf	___xxtofl@sign,w
  6932     123D  1D03               	btfss	3,2
  6933     123E  1FF3               	btfss	___xxtofl@val+3,7
  6934     123F  2A41               	goto	l3924
  6935     1240  17FD               	bsf	___xxtofl@arg+3,7
  6936     1241                     l3924:
  6937     1241  087D               	movf	___xxtofl@arg+3,w
  6938     1242  00F3               	movwf	?___xxtofl+3
  6939     1243  087C               	movf	___xxtofl@arg+2,w
  6940     1244  00F2               	movwf	?___xxtofl+2
  6941     1245  087B               	movf	___xxtofl@arg+1,w
  6942     1246  00F1               	movwf	?___xxtofl+1
  6943     1247  087A               	movf	___xxtofl@arg,w
  6944     1248  00F0               	movwf	?___xxtofl
  6945     1249  0008               	return
  6946     124A                     __end_of___xxtofl:
  6947                           
  6948                           	psect	text12
  6949     1B6F                     __ptext12:	
  6950 ;; *************** function ___wmul *****************
  6951 ;; Defined at:
  6952 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  6953 ;; Parameters:    Size  Location     Type
  6954 ;;  multiplier      2    0[COMMON] unsigned int 
  6955 ;;  multiplicand    2    2[COMMON] unsigned int 
  6956 ;; Auto vars:     Size  Location     Type
  6957 ;;  product         2    4[COMMON] unsigned int 
  6958 ;; Return value:  Size  Location     Type
  6959 ;;                  2    0[COMMON] unsigned int 
  6960 ;; Registers used:
  6961 ;;		wreg, status,2, status,0
  6962 ;; Tracked objects:
  6963 ;;		On entry : 300/100
  6964 ;;		On exit  : 300/100
  6965 ;;		Unchanged: 300/0
  6966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6967 ;;      Params:         4       0       0       0       0
  6968 ;;      Locals:         2       0       0       0       0
  6969 ;;      Temps:          0       0       0       0       0
  6970 ;;      Totals:         6       0       0       0       0
  6971 ;;Total ram usage:        6 bytes
  6972 ;; Hardware stack levels used: 1
  6973 ;; This function calls:
  6974 ;;		Nothing
  6975 ;; This function is called by:
  6976 ;;		_sprintf
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980     1B6F                     ___wmul:	
  6981                           ;psect for function ___wmul
  6982                           
  6983                           
  6984                           ;incstack = 0
  6985                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6986     1B6F  01F4               	clrf	___wmul@product
  6987     1B70  01F5               	clrf	___wmul@product+1
  6988     1B71                     l3770:
  6989     1B71  1C70               	btfss	___wmul@multiplier,0
  6990     1B72  2B79               	goto	l517
  6991     1B73  0872               	movf	___wmul@multiplicand,w
  6992     1B74  07F4               	addwf	___wmul@product,f
  6993     1B75  1803               	skipnc
  6994     1B76  0AF5               	incf	___wmul@product+1,f
  6995     1B77  0873               	movf	___wmul@multiplicand+1,w
  6996     1B78  07F5               	addwf	___wmul@product+1,f
  6997     1B79                     l517:
  6998     1B79  3001               	movlw	1
  6999     1B7A                     u5795:
  7000     1B7A  1003               	clrc
  7001     1B7B  0DF2               	rlf	___wmul@multiplicand,f
  7002     1B7C  0DF3               	rlf	___wmul@multiplicand+1,f
  7003     1B7D  3EFF               	addlw	-1
  7004     1B7E  1D03               	skipz
  7005     1B7F  2B7A               	goto	u5795
  7006     1B80  3001               	movlw	1
  7007     1B81                     u5805:
  7008     1B81  1003               	clrc
  7009     1B82  0CF1               	rrf	___wmul@multiplier+1,f
  7010     1B83  0CF0               	rrf	___wmul@multiplier,f
  7011     1B84  3EFF               	addlw	-1
  7012     1B85  1D03               	skipz
  7013     1B86  2B81               	goto	u5805
  7014     1B87  0870               	movf	___wmul@multiplier,w
  7015     1B88  0471               	iorwf	___wmul@multiplier+1,w
  7016     1B89  1D03               	btfss	3,2
  7017     1B8A  2B71               	goto	l3770
  7018     1B8B  0875               	movf	___wmul@product+1,w
  7019     1B8C  00F1               	movwf	?___wmul+1
  7020     1B8D  0874               	movf	___wmul@product,w
  7021     1B8E  00F0               	movwf	?___wmul
  7022     1B8F  0008               	return
  7023     1B90                     __end_of___wmul:
  7024                           
  7025                           	psect	text13
  7026     1E53                     __ptext13:	
  7027 ;; *************** function ___llmod *****************
  7028 ;; Defined at:
  7029 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\llmod.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;  divisor         4    0[COMMON] unsigned long 
  7032 ;;  dividend        4    4[COMMON] unsigned long 
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;  counter         1    9[COMMON] unsigned char 
  7035 ;; Return value:  Size  Location     Type
  7036 ;;                  4    0[COMMON] unsigned long 
  7037 ;; Registers used:
  7038 ;;		wreg, status,2, status,0
  7039 ;; Tracked objects:
  7040 ;;		On entry : 300/100
  7041 ;;		On exit  : 300/100
  7042 ;;		Unchanged: 300/0
  7043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7044 ;;      Params:         8       0       0       0       0
  7045 ;;      Locals:         1       0       0       0       0
  7046 ;;      Temps:          1       0       0       0       0
  7047 ;;      Totals:        10       0       0       0       0
  7048 ;;Total ram usage:       10 bytes
  7049 ;; Hardware stack levels used: 1
  7050 ;; This function calls:
  7051 ;;		Nothing
  7052 ;; This function is called by:
  7053 ;;		_sprintf
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057     1E53                     ___llmod:	
  7058                           ;psect for function ___llmod
  7059                           
  7060                           
  7061                           ;incstack = 0
  7062                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7063     1E53  0873               	movf	___llmod@divisor+3,w
  7064     1E54  0472               	iorwf	___llmod@divisor+2,w
  7065     1E55  0471               	iorwf	___llmod@divisor+1,w
  7066     1E56  0470               	iorwf	___llmod@divisor,w
  7067     1E57  1903               	skipnz
  7068     1E58  2E96               	goto	l3874
  7069     1E59  01F9               	clrf	___llmod@counter
  7070     1E5A  0AF9               	incf	___llmod@counter,f
  7071     1E5B                     l3864:
  7072     1E5B  1BF3               	btfsc	___llmod@divisor+3,7
  7073     1E5C  2E6B               	goto	l3866
  7074     1E5D  3001               	movlw	1
  7075     1E5E  00F8               	movwf	??___llmod
  7076     1E5F                     u6045:
  7077     1E5F  1003               	clrc
  7078     1E60  0DF0               	rlf	___llmod@divisor,f
  7079     1E61  0DF1               	rlf	___llmod@divisor+1,f
  7080     1E62  0DF2               	rlf	___llmod@divisor+2,f
  7081     1E63  0DF3               	rlf	___llmod@divisor+3,f
  7082     1E64  0BF8               	decfsz	??___llmod,f
  7083     1E65  2E5F               	goto	u6045
  7084     1E66  3001               	movlw	1
  7085     1E67  00F8               	movwf	??___llmod
  7086     1E68  0878               	movf	??___llmod,w
  7087     1E69  07F9               	addwf	___llmod@counter,f
  7088     1E6A  2E5B               	goto	l3864
  7089     1E6B                     l3866:
  7090     1E6B  0873               	movf	___llmod@divisor+3,w
  7091     1E6C  0277               	subwf	___llmod@dividend+3,w
  7092     1E6D  1D03               	skipz
  7093     1E6E  2E79               	goto	u6065
  7094     1E6F  0872               	movf	___llmod@divisor+2,w
  7095     1E70  0276               	subwf	___llmod@dividend+2,w
  7096     1E71  1D03               	skipz
  7097     1E72  2E79               	goto	u6065
  7098     1E73  0871               	movf	___llmod@divisor+1,w
  7099     1E74  0275               	subwf	___llmod@dividend+1,w
  7100     1E75  1D03               	skipz
  7101     1E76  2E79               	goto	u6065
  7102     1E77  0870               	movf	___llmod@divisor,w
  7103     1E78  0274               	subwf	___llmod@dividend,w
  7104     1E79                     u6065:
  7105     1E79  1C03               	skipc
  7106     1E7A  2E89               	goto	l3870
  7107     1E7B  0870               	movf	___llmod@divisor,w
  7108     1E7C  02F4               	subwf	___llmod@dividend,f
  7109     1E7D  0871               	movf	___llmod@divisor+1,w
  7110     1E7E  1C03               	skipc
  7111     1E7F  0F71               	incfsz	___llmod@divisor+1,w
  7112     1E80  02F5               	subwf	___llmod@dividend+1,f
  7113     1E81  0872               	movf	___llmod@divisor+2,w
  7114     1E82  1C03               	skipc
  7115     1E83  0F72               	incfsz	___llmod@divisor+2,w
  7116     1E84  02F6               	subwf	___llmod@dividend+2,f
  7117     1E85  0873               	movf	___llmod@divisor+3,w
  7118     1E86  1C03               	skipc
  7119     1E87  0F73               	incfsz	___llmod@divisor+3,w
  7120     1E88  02F7               	subwf	___llmod@dividend+3,f
  7121     1E89                     l3870:
  7122     1E89  3001               	movlw	1
  7123     1E8A                     u6075:
  7124     1E8A  1003               	clrc
  7125     1E8B  0CF3               	rrf	___llmod@divisor+3,f
  7126     1E8C  0CF2               	rrf	___llmod@divisor+2,f
  7127     1E8D  0CF1               	rrf	___llmod@divisor+1,f
  7128     1E8E  0CF0               	rrf	___llmod@divisor,f
  7129     1E8F  3EFF               	addlw	-1
  7130     1E90  1D03               	skipz
  7131     1E91  2E8A               	goto	u6075
  7132     1E92  3001               	movlw	1
  7133     1E93  02F9               	subwf	___llmod@counter,f
  7134     1E94  1D03               	btfss	3,2
  7135     1E95  2E6B               	goto	l3866
  7136     1E96                     l3874:
  7137     1E96  0877               	movf	___llmod@dividend+3,w
  7138     1E97  00F3               	movwf	?___llmod+3
  7139     1E98  0876               	movf	___llmod@dividend+2,w
  7140     1E99  00F2               	movwf	?___llmod+2
  7141     1E9A  0875               	movf	___llmod@dividend+1,w
  7142     1E9B  00F1               	movwf	?___llmod+1
  7143     1E9C  0874               	movf	___llmod@dividend,w
  7144     1E9D  00F0               	movwf	?___llmod
  7145     1E9E  0008               	return
  7146     1E9F                     __end_of___llmod:
  7147                           
  7148                           	psect	text14
  7149     1047                     __ptext14:	
  7150 ;; *************** function ___fltol *****************
  7151 ;; Defined at:
  7152 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\fltol.c"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;  f1              4   49[BANK0 ] unsigned long 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  exp1            1   58[BANK0 ] unsigned char 
  7157 ;;  sign1           1   57[BANK0 ] unsigned char 
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  4   49[BANK0 ] long 
  7160 ;; Registers used:
  7161 ;;		wreg, status,2, status,0
  7162 ;; Tracked objects:
  7163 ;;		On entry : 300/0
  7164 ;;		On exit  : 300/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7167 ;;      Params:         0       4       0       0       0
  7168 ;;      Locals:         0       2       0       0       0
  7169 ;;      Temps:          0       4       0       0       0
  7170 ;;      Totals:         0      10       0       0       0
  7171 ;;Total ram usage:       10 bytes
  7172 ;; Hardware stack levels used: 1
  7173 ;; This function calls:
  7174 ;;		Nothing
  7175 ;; This function is called by:
  7176 ;;		_sprintf
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180     1047                     ___fltol:	
  7181                           ;psect for function ___fltol
  7182                           
  7183                           
  7184                           ;incstack = 0
  7185                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  7186     1047  1003               	clrc
  7187     1048  0D53               	rlf	___fltol@f1+2,w
  7188     1049  0D54               	rlf	___fltol@f1+3,w
  7189     104A  00DA               	movwf	___fltol@exp1
  7190     104B  085A               	movf	___fltol@exp1,w
  7191     104C  1D03               	btfss	3,2
  7192     104D  2857               	goto	l3828
  7193     104E                     l3824:
  7194     104E  3000               	movlw	0
  7195     104F  00D4               	movwf	?___fltol+3
  7196     1050  3000               	movlw	0
  7197     1051  00D3               	movwf	?___fltol+2
  7198     1052  3000               	movlw	0
  7199     1053  00D2               	movwf	?___fltol+1
  7200     1054  3000               	movlw	0
  7201     1055  00D1               	movwf	?___fltol
  7202     1056  0008               	return
  7203     1057                     l3828:
  7204     1057  0851               	movf	___fltol@f1,w
  7205     1058  00D5               	movwf	??___fltol
  7206     1059  0852               	movf	___fltol@f1+1,w
  7207     105A  00D6               	movwf	??___fltol+1
  7208     105B  0853               	movf	___fltol@f1+2,w
  7209     105C  00D7               	movwf	??___fltol+2
  7210     105D  0854               	movf	___fltol@f1+3,w
  7211     105E  00D8               	movwf	??___fltol+3
  7212     105F  301F               	movlw	31
  7213     1060                     u5945:
  7214     1060  1003               	clrc
  7215     1061  0CD8               	rrf	??___fltol+3,f
  7216     1062  0CD7               	rrf	??___fltol+2,f
  7217     1063  0CD6               	rrf	??___fltol+1,f
  7218     1064  0CD5               	rrf	??___fltol,f
  7219     1065  3EFF               	addlw	-1
  7220     1066  1D03               	skipz
  7221     1067  2860               	goto	u5945
  7222     1068  0855               	movf	??___fltol,w
  7223     1069  00D9               	movwf	___fltol@sign1
  7224     106A  17D3               	bsf	___fltol@f1+2,7
  7225     106B  30FF               	movlw	255
  7226     106C  05D1               	andwf	___fltol@f1,f
  7227     106D  30FF               	movlw	255
  7228     106E  05D2               	andwf	___fltol@f1+1,f
  7229     106F  30FF               	movlw	255
  7230     1070  05D3               	andwf	___fltol@f1+2,f
  7231     1071  3000               	movlw	0
  7232     1072  05D4               	andwf	___fltol@f1+3,f
  7233     1073  3096               	movlw	150
  7234     1074  02DA               	subwf	___fltol@exp1,f
  7235     1075  1FDA               	btfss	___fltol@exp1,7
  7236     1076  288C               	goto	l3846
  7237     1077  085A               	movf	___fltol@exp1,w
  7238     1078  3A80               	xorlw	128
  7239     1079  3E97               	addlw	151
  7240     107A  1C03               	btfss	3,0
  7241     107B  284E               	goto	l3824
  7242     107C                     l3844:
  7243     107C  3001               	movlw	1
  7244     107D                     u5975:
  7245     107D  1003               	clrc
  7246     107E  0CD4               	rrf	___fltol@f1+3,f
  7247     107F  0CD3               	rrf	___fltol@f1+2,f
  7248     1080  0CD2               	rrf	___fltol@f1+1,f
  7249     1081  0CD1               	rrf	___fltol@f1,f
  7250     1082  3EFF               	addlw	-1
  7251     1083  1D03               	skipz
  7252     1084  287D               	goto	u5975
  7253     1085  3001               	movlw	1
  7254     1086  00D5               	movwf	??___fltol
  7255     1087  0855               	movf	??___fltol,w
  7256     1088  07DA               	addwf	___fltol@exp1,f
  7257     1089  1903               	btfsc	3,2
  7258     108A  289F               	goto	l3854
  7259     108B  287C               	goto	l3844
  7260     108C                     l3846:
  7261     108C  3020               	movlw	32
  7262     108D  025A               	subwf	___fltol@exp1,w
  7263     108E  1803               	btfsc	3,0
  7264     108F  284E               	goto	l3824
  7265     1090                     l727:
  7266     1090  085A               	movf	___fltol@exp1,w
  7267     1091  1903               	btfsc	3,2
  7268     1092  289F               	goto	l3854
  7269     1093  3001               	movlw	1
  7270     1094  00D5               	movwf	??___fltol
  7271     1095                     u6005:
  7272     1095  1003               	clrc
  7273     1096  0DD1               	rlf	___fltol@f1,f
  7274     1097  0DD2               	rlf	___fltol@f1+1,f
  7275     1098  0DD3               	rlf	___fltol@f1+2,f
  7276     1099  0DD4               	rlf	___fltol@f1+3,f
  7277     109A  0BD5               	decfsz	??___fltol,f
  7278     109B  2895               	goto	u6005
  7279     109C  3001               	movlw	1
  7280     109D  02DA               	subwf	___fltol@exp1,f
  7281     109E  2890               	goto	l727
  7282     109F                     l3854:
  7283     109F  0859               	movf	___fltol@sign1,w
  7284     10A0  1903               	btfsc	3,2
  7285     10A1  0008               	return
  7286     10A2  09D1               	comf	___fltol@f1,f
  7287     10A3  09D2               	comf	___fltol@f1+1,f
  7288     10A4  09D3               	comf	___fltol@f1+2,f
  7289     10A5  09D4               	comf	___fltol@f1+3,f
  7290     10A6  0AD1               	incf	___fltol@f1,f
  7291     10A7  1903               	skipnz
  7292     10A8  0AD2               	incf	___fltol@f1+1,f
  7293     10A9  1903               	skipnz
  7294     10AA  0AD3               	incf	___fltol@f1+2,f
  7295     10AB  1903               	skipnz
  7296     10AC  0AD4               	incf	___fltol@f1+3,f
  7297     10AD  0008               	return
  7298     10AE                     __end_of___fltol:
  7299                           
  7300                           	psect	text15
  7301     1AF1                     __ptext15:	
  7302 ;; *************** function ___flsub *****************
  7303 ;; Defined at:
  7304 ;;		line 242 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\sprcadd.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;  a               4   68[BANK0 ] long 
  7307 ;;  b               4   72[BANK0 ] long 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;		None
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  4   68[BANK0 ] long 
  7312 ;; Registers used:
  7313 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7314 ;; Tracked objects:
  7315 ;;		On entry : 300/0
  7316 ;;		On exit  : 300/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7319 ;;      Params:         0       8       0       0       0
  7320 ;;      Locals:         0       0       0       0       0
  7321 ;;      Temps:          0       0       0       0       0
  7322 ;;      Totals:         0       8       0       0       0
  7323 ;;Total ram usage:        8 bytes
  7324 ;; Hardware stack levels used: 1
  7325 ;; Hardware stack levels required when called: 1
  7326 ;; This function calls:
  7327 ;;		___fladd
  7328 ;; This function is called by:
  7329 ;;		_sprintf
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333     1AF1                     ___flsub:	
  7334                           ;psect for function ___flsub
  7335                           
  7336                           
  7337                           ;incstack = 0
  7338                           ; Regs used in ___flsub: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7339     1AF1  3080               	movlw	128
  7340     1AF2  06E7               	xorwf	___flsub@a+3,f
  7341     1AF3  086B               	movf	___flsub@b+3,w
  7342     1AF4  00D3               	movwf	___fladd@b+3
  7343     1AF5  086A               	movf	___flsub@b+2,w
  7344     1AF6  00D2               	movwf	___fladd@b+2
  7345     1AF7  0869               	movf	___flsub@b+1,w
  7346     1AF8  00D1               	movwf	___fladd@b+1
  7347     1AF9  0868               	movf	___flsub@b,w
  7348     1AFA  00D0               	movwf	___fladd@b
  7349     1AFB  0867               	movf	___flsub@a+3,w
  7350     1AFC  00D7               	movwf	___fladd@a+3
  7351     1AFD  0866               	movf	___flsub@a+2,w
  7352     1AFE  00D6               	movwf	___fladd@a+2
  7353     1AFF  0865               	movf	___flsub@a+1,w
  7354     1B00  00D5               	movwf	___fladd@a+1
  7355     1B01  0864               	movf	___flsub@a,w
  7356     1B02  00D4               	movwf	___fladd@a
  7357     1B03  120A  118A  20CE   	fcall	___fladd
  7358     1B06  0853               	movf	?___fladd+3,w
  7359     1B07  00E7               	movwf	?___flsub+3
  7360     1B08  0852               	movf	?___fladd+2,w
  7361     1B09  00E6               	movwf	?___flsub+2
  7362     1B0A  0851               	movf	?___fladd+1,w
  7363     1B0B  00E5               	movwf	?___flsub+1
  7364     1B0C  0850               	movf	?___fladd,w
  7365     1B0D  00E4               	movwf	?___flsub
  7366     1B0E  0008               	return
  7367     1B0F                     __end_of___flsub:
  7368                           
  7369                           	psect	text16
  7370     00CE                     __ptext16:	
  7371 ;; *************** function ___fladd *****************
  7372 ;; Defined at:
  7373 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\sprcadd.c"
  7374 ;; Parameters:    Size  Location     Type
  7375 ;;  b               4   48[BANK0 ] long 
  7376 ;;  a               4   52[BANK0 ] long 
  7377 ;; Auto vars:     Size  Location     Type
  7378 ;;  grs             1   67[BANK0 ] unsigned char 
  7379 ;;  bexp            1   66[BANK0 ] unsigned char 
  7380 ;;  aexp            1   65[BANK0 ] unsigned char 
  7381 ;;  signs           1   64[BANK0 ] unsigned char 
  7382 ;; Return value:  Size  Location     Type
  7383 ;;                  4   48[BANK0 ] unsigned char 
  7384 ;; Registers used:
  7385 ;;		wreg, status,2, status,0, btemp+1
  7386 ;; Tracked objects:
  7387 ;;		On entry : 300/0
  7388 ;;		On exit  : 300/0
  7389 ;;		Unchanged: 0/0
  7390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7391 ;;      Params:         0       8       0       0       0
  7392 ;;      Locals:         0       4       0       0       0
  7393 ;;      Temps:          0       8       0       0       0
  7394 ;;      Totals:         0      20       0       0       0
  7395 ;;Total ram usage:       20 bytes
  7396 ;; Hardware stack levels used: 1
  7397 ;; This function calls:
  7398 ;;		Nothing
  7399 ;; This function is called by:
  7400 ;;		_sprintf
  7401 ;;		___flsub
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405     00CE                     ___fladd:	
  7406                           ;psect for function ___fladd
  7407                           
  7408                           
  7409                           ;incstack = 0
  7410                           ; Regs used in ___fladd: [wreg+status,2+status,0+btemp+1]
  7411     00CE  0853               	movf	___fladd@b+3,w
  7412     00CF  3980               	andlw	128
  7413     00D0  00E0               	movwf	___fladd@signs
  7414     00D1  0853               	movf	___fladd@b+3,w
  7415     00D2  00D8               	movwf	??___fladd
  7416     00D3  0758               	addwf	??___fladd,w
  7417     00D4  00E2               	movwf	___fladd@bexp
  7418     00D5  1BD2               	btfsc	___fladd@b+2,7
  7419     00D6  1462               	bsf	___fladd@bexp,0
  7420     00D7  0862               	movf	___fladd@bexp,w
  7421     00D8  1903               	btfsc	3,2
  7422     00D9  28E8               	goto	l3068
  7423     00DA  0A62               	incf	___fladd@bexp,w
  7424     00DB  1D03               	btfss	3,2
  7425     00DC  28E5               	goto	l3064
  7426     00DD  3000               	movlw	0
  7427     00DE  00D3               	movwf	___fladd@b+3
  7428     00DF  3000               	movlw	0
  7429     00E0  00D2               	movwf	___fladd@b+2
  7430     00E1  3000               	movlw	0
  7431     00E2  00D1               	movwf	___fladd@b+1
  7432     00E3  3000               	movlw	0
  7433     00E4  00D0               	movwf	___fladd@b
  7434     00E5                     l3064:
  7435     00E5  17D2               	bsf	___fladd@b+2,7
  7436     00E6  01D3               	clrf	___fladd@b+3
  7437     00E7  28F0               	goto	l3070
  7438     00E8                     l3068:
  7439     00E8  3000               	movlw	0
  7440     00E9  00D3               	movwf	___fladd@b+3
  7441     00EA  3000               	movlw	0
  7442     00EB  00D2               	movwf	___fladd@b+2
  7443     00EC  3000               	movlw	0
  7444     00ED  00D1               	movwf	___fladd@b+1
  7445     00EE  3000               	movlw	0
  7446     00EF  00D0               	movwf	___fladd@b
  7447     00F0                     l3070:
  7448     00F0  0857               	movf	___fladd@a+3,w
  7449     00F1  3980               	andlw	128
  7450     00F2  00E1               	movwf	___fladd@aexp
  7451     00F3  0861               	movf	___fladd@aexp,w
  7452     00F4  0660               	xorwf	___fladd@signs,w
  7453     00F5  1D03               	btfss	3,2
  7454     00F6  1760               	bsf	___fladd@signs,6
  7455     00F7  0857               	movf	___fladd@a+3,w
  7456     00F8  00D8               	movwf	??___fladd
  7457     00F9  0758               	addwf	??___fladd,w
  7458     00FA  00E1               	movwf	___fladd@aexp
  7459     00FB  1BD6               	btfsc	___fladd@a+2,7
  7460     00FC  1461               	bsf	___fladd@aexp,0
  7461     00FD  0861               	movf	___fladd@aexp,w
  7462     00FE  1903               	btfsc	3,2
  7463     00FF  290E               	goto	l3092
  7464     0100  0A61               	incf	___fladd@aexp,w
  7465     0101  1D03               	btfss	3,2
  7466     0102  290B               	goto	l3088
  7467     0103  3000               	movlw	0
  7468     0104  00D7               	movwf	___fladd@a+3
  7469     0105  3000               	movlw	0
  7470     0106  00D6               	movwf	___fladd@a+2
  7471     0107  3000               	movlw	0
  7472     0108  00D5               	movwf	___fladd@a+1
  7473     0109  3000               	movlw	0
  7474     010A  00D4               	movwf	___fladd@a
  7475     010B                     l3088:
  7476     010B  17D6               	bsf	___fladd@a+2,7
  7477     010C  01D7               	clrf	___fladd@a+3
  7478     010D  2916               	goto	l844
  7479     010E                     l3092:
  7480     010E  3000               	movlw	0
  7481     010F  00D7               	movwf	___fladd@a+3
  7482     0110  3000               	movlw	0
  7483     0111  00D6               	movwf	___fladd@a+2
  7484     0112  3000               	movlw	0
  7485     0113  00D5               	movwf	___fladd@a+1
  7486     0114  3000               	movlw	0
  7487     0115  00D4               	movwf	___fladd@a
  7488     0116                     l844:
  7489     0116  0862               	movf	___fladd@bexp,w
  7490     0117  0261               	subwf	___fladd@aexp,w
  7491     0118  1803               	skipnc
  7492     0119  293E               	goto	l3128
  7493     011A  1F60               	btfss	___fladd@signs,6
  7494     011B  2920               	goto	l3098
  7495     011C  3080               	movlw	128
  7496     011D  00D8               	movwf	??___fladd
  7497     011E  0858               	movf	??___fladd,w
  7498     011F  06E0               	xorwf	___fladd@signs,f
  7499     0120                     l3098:
  7500     0120  0862               	movf	___fladd@bexp,w
  7501     0121  00E3               	movwf	___fladd@grs
  7502     0122  0861               	movf	___fladd@aexp,w
  7503     0123  00E2               	movwf	___fladd@bexp
  7504     0124  0863               	movf	___fladd@grs,w
  7505     0125  00E1               	movwf	___fladd@aexp
  7506     0126  0850               	movf	___fladd@b,w
  7507     0127  00E3               	movwf	___fladd@grs
  7508     0128  0854               	movf	___fladd@a,w
  7509     0129  00D0               	movwf	___fladd@b
  7510     012A  0863               	movf	___fladd@grs,w
  7511     012B  00D4               	movwf	___fladd@a
  7512     012C  0851               	movf	___fladd@b+1,w
  7513     012D  00E3               	movwf	___fladd@grs
  7514     012E  0855               	movf	___fladd@a+1,w
  7515     012F  00D1               	movwf	___fladd@b+1
  7516     0130  0863               	movf	___fladd@grs,w
  7517     0131  00D5               	movwf	___fladd@a+1
  7518     0132  0852               	movf	___fladd@b+2,w
  7519     0133  00E3               	movwf	___fladd@grs
  7520     0134  0856               	movf	___fladd@a+2,w
  7521     0135  00D2               	movwf	___fladd@b+2
  7522     0136  0863               	movf	___fladd@grs,w
  7523     0137  00D6               	movwf	___fladd@a+2
  7524     0138  0853               	movf	___fladd@b+3,w
  7525     0139  00E3               	movwf	___fladd@grs
  7526     013A  0857               	movf	___fladd@a+3,w
  7527     013B  00D3               	movwf	___fladd@b+3
  7528     013C  0863               	movf	___fladd@grs,w
  7529     013D  00D7               	movwf	___fladd@a+3
  7530     013E                     l3128:
  7531     013E  01E3               	clrf	___fladd@grs
  7532     013F  0861               	movf	___fladd@aexp,w
  7533     0140  00D8               	movwf	??___fladd
  7534     0141  01D9               	clrf	??___fladd+1
  7535     0142  0859               	movf	??___fladd+1,w
  7536     0143  00DB               	movwf	??___fladd+3
  7537     0144  0862               	movf	___fladd@bexp,w
  7538     0145  0258               	subwf	??___fladd,w
  7539     0146  00DA               	movwf	??___fladd+2
  7540     0147  1C03               	skipc
  7541     0148  03DB               	decf	??___fladd+3,f
  7542     0149  085B               	movf	??___fladd+3,w
  7543     014A  3A80               	xorlw	128
  7544     014B  00FF               	movwf	127
  7545     014C  3080               	movlw	128
  7546     014D  027F               	subwf	127,w
  7547     014E  1D03               	skipz
  7548     014F  2952               	goto	u4265
  7549     0150  301A               	movlw	26
  7550     0151  025A               	subwf	??___fladd+2,w
  7551     0152                     u4265:
  7552     0152  1C03               	skipc
  7553     0153  2985               	goto	l3146
  7554     0154  1283               	bcf	3,5	;RP0=0, select bank0
  7555     0155  1303               	bcf	3,6	;RP1=0, select bank0
  7556     0156  0853               	movf	___fladd@b+3,w
  7557     0157  0452               	iorwf	___fladd@b+2,w
  7558     0158  0451               	iorwf	___fladd@b+1,w
  7559     0159  0450               	iorwf	___fladd@b,w
  7560     015A  1903               	btfsc	3,2
  7561     015B  295E               	goto	u4270
  7562     015C  3001               	movlw	1
  7563     015D  295F               	goto	u4280
  7564     015E                     u4270:
  7565     015E  3000               	movlw	0
  7566     015F                     u4280:
  7567     015F  00E3               	movwf	___fladd@grs
  7568     0160  3000               	movlw	0
  7569     0161  00D3               	movwf	___fladd@b+3
  7570     0162  3000               	movlw	0
  7571     0163  00D2               	movwf	___fladd@b+2
  7572     0164  3000               	movlw	0
  7573     0165  00D1               	movwf	___fladd@b+1
  7574     0166  3000               	movlw	0
  7575     0167  00D0               	movwf	___fladd@b
  7576     0168  0861               	movf	___fladd@aexp,w
  7577     0169  00E2               	movwf	___fladd@bexp
  7578     016A  298B               	goto	l848
  7579     016B                     l850:
  7580     016B  1C63               	btfss	___fladd@grs,0
  7581     016C  2974               	goto	l3136
  7582     016D  0863               	movf	___fladd@grs,w
  7583     016E  00D8               	movwf	??___fladd
  7584     016F  1003               	clrc
  7585     0170  0C58               	rrf	??___fladd,w
  7586     0171  3801               	iorlw	1
  7587     0172  00E3               	movwf	___fladd@grs
  7588     0173  2976               	goto	l3138
  7589     0174                     l3136:
  7590     0174  1003               	clrc
  7591     0175  0CE3               	rrf	___fladd@grs,f
  7592     0176                     l3138:
  7593     0176  1850               	btfsc	___fladd@b,0
  7594     0177  17E3               	bsf	___fladd@grs,7
  7595     0178  3001               	movlw	1
  7596     0179  00D8               	movwf	??___fladd
  7597     017A                     u4315:
  7598     017A  0D53               	rlf	___fladd@b+3,w
  7599     017B  0CD3               	rrf	___fladd@b+3,f
  7600     017C  0CD2               	rrf	___fladd@b+2,f
  7601     017D  0CD1               	rrf	___fladd@b+1,f
  7602     017E  0CD0               	rrf	___fladd@b,f
  7603     017F  0BD8               	decfsz	??___fladd& (0+127),f
  7604     0180  297A               	goto	u4315
  7605     0181  3001               	movlw	1
  7606     0182  00D8               	movwf	??___fladd
  7607     0183  0858               	movf	??___fladd,w
  7608     0184  07E2               	addwf	___fladd@bexp,f
  7609     0185                     l3146:
  7610     0185  1283               	bcf	3,5	;RP0=0, select bank0
  7611     0186  1303               	bcf	3,6	;RP1=0, select bank0
  7612     0187  0861               	movf	___fladd@aexp,w
  7613     0188  0262               	subwf	___fladd@bexp,w
  7614     0189  1C03               	skipc
  7615     018A  296B               	goto	l850
  7616     018B                     l848:
  7617     018B  1B60               	btfsc	___fladd@signs,6
  7618     018C  29CA               	goto	l3172
  7619     018D  0862               	movf	___fladd@bexp,w
  7620     018E  1D03               	btfss	3,2
  7621     018F  2999               	goto	l3154
  7622     0190  3000               	movlw	0
  7623     0191  00D3               	movwf	?___fladd+3
  7624     0192  3000               	movlw	0
  7625     0193  00D2               	movwf	?___fladd+2
  7626     0194  3000               	movlw	0
  7627     0195  00D1               	movwf	?___fladd+1
  7628     0196  3000               	movlw	0
  7629     0197  00D0               	movwf	?___fladd
  7630     0198  0008               	return
  7631     0199                     l3154:
  7632     0199  0854               	movf	___fladd@a,w
  7633     019A  07D0               	addwf	___fladd@b,f
  7634     019B  0855               	movf	___fladd@a+1,w
  7635     019C  1103               	clrz
  7636     019D  1803               	skipnc
  7637     019E  3E01               	addlw	1
  7638     019F  1D03               	btfss	3,2
  7639     01A0  07D1               	addwf	___fladd@b+1,f
  7640     01A1  0856               	movf	___fladd@a+2,w
  7641     01A2  1103               	clrz
  7642     01A3  1803               	skipnc
  7643     01A4  3E01               	addlw	1
  7644     01A5  1D03               	btfss	3,2
  7645     01A6  07D2               	addwf	___fladd@b+2,f
  7646     01A7  0857               	movf	___fladd@a+3,w
  7647     01A8  1103               	clrz
  7648     01A9  1803               	skipnc
  7649     01AA  3E01               	addlw	1
  7650     01AB  1D03               	btfss	3,2
  7651     01AC  07D3               	addwf	___fladd@b+3,f
  7652     01AD  1C53               	btfss	___fladd@b+3,0
  7653     01AE  2A6C               	goto	l3206
  7654     01AF  1C63               	btfss	___fladd@grs,0
  7655     01B0  29B8               	goto	l3162
  7656     01B1  0863               	movf	___fladd@grs,w
  7657     01B2  00D8               	movwf	??___fladd
  7658     01B3  1003               	clrc
  7659     01B4  0C58               	rrf	??___fladd,w
  7660     01B5  3801               	iorlw	1
  7661     01B6  00E3               	movwf	___fladd@grs
  7662     01B7  29BA               	goto	l3164
  7663     01B8                     l3162:
  7664     01B8  1003               	clrc
  7665     01B9  0CE3               	rrf	___fladd@grs,f
  7666     01BA                     l3164:
  7667     01BA  1850               	btfsc	___fladd@b,0
  7668     01BB  17E3               	bsf	___fladd@grs,7
  7669     01BC  3001               	movlw	1
  7670     01BD  00D8               	movwf	??___fladd
  7671     01BE                     u4395:
  7672     01BE  0D53               	rlf	___fladd@b+3,w
  7673     01BF  0CD3               	rrf	___fladd@b+3,f
  7674     01C0  0CD2               	rrf	___fladd@b+2,f
  7675     01C1  0CD1               	rrf	___fladd@b+1,f
  7676     01C2  0CD0               	rrf	___fladd@b,f
  7677     01C3  0BD8               	decfsz	??___fladd& (0+127),f
  7678     01C4  29BE               	goto	u4395
  7679     01C5  3001               	movlw	1
  7680     01C6  00D8               	movwf	??___fladd
  7681     01C7  0858               	movf	??___fladd,w
  7682     01C8  07E2               	addwf	___fladd@bexp,f
  7683     01C9  2A6C               	goto	l3206
  7684     01CA                     l3172:
  7685     01CA  0853               	movf	___fladd@b+3,w
  7686     01CB  3A80               	xorlw	128
  7687     01CC  00FF               	movwf	127
  7688     01CD  0857               	movf	___fladd@a+3,w
  7689     01CE  3A80               	xorlw	128
  7690     01CF  027F               	subwf	127,w
  7691     01D0  1D03               	skipz
  7692     01D1  29DC               	goto	u4403
  7693     01D2  0856               	movf	___fladd@a+2,w
  7694     01D3  0252               	subwf	___fladd@b+2,w
  7695     01D4  1D03               	skipz
  7696     01D5  29DC               	goto	u4403
  7697     01D6  0855               	movf	___fladd@a+1,w
  7698     01D7  0251               	subwf	___fladd@b+1,w
  7699     01D8  1D03               	skipz
  7700     01D9  29DC               	goto	u4403
  7701     01DA  0854               	movf	___fladd@a,w
  7702     01DB  0250               	subwf	___fladd@b,w
  7703     01DC                     u4403:
  7704     01DC  1803               	skipnc
  7705     01DD  2A34               	goto	l3182
  7706     01DE  30FF               	movlw	255
  7707     01DF  00D8               	movwf	??___fladd
  7708     01E0  30FF               	movlw	255
  7709     01E1  00D9               	movwf	??___fladd+1
  7710     01E2  30FF               	movlw	255
  7711     01E3  00DA               	movwf	??___fladd+2
  7712     01E4  30FF               	movlw	255
  7713     01E5  00DB               	movwf	??___fladd+3
  7714     01E6  0854               	movf	___fladd@a,w
  7715     01E7  00DC               	movwf	??___fladd+4
  7716     01E8  0855               	movf	___fladd@a+1,w
  7717     01E9  00DD               	movwf	??___fladd+5
  7718     01EA  0856               	movf	___fladd@a+2,w
  7719     01EB  00DE               	movwf	??___fladd+6
  7720     01EC  0857               	movf	___fladd@a+3,w
  7721     01ED  00DF               	movwf	??___fladd+7
  7722     01EE  0850               	movf	___fladd@b,w
  7723     01EF  02DC               	subwf	??___fladd+4,f
  7724     01F0  0851               	movf	___fladd@b+1,w
  7725     01F1  1C03               	skipc
  7726     01F2  0F51               	incfsz	___fladd@b+1,w
  7727     01F3  29F5               	goto	u4411
  7728     01F4  29F6               	goto	u4412
  7729     01F5                     u4411:
  7730     01F5  02DD               	subwf	??___fladd+5,f
  7731     01F6                     u4412:
  7732     01F6  0852               	movf	___fladd@b+2,w
  7733     01F7  1C03               	skipc
  7734     01F8  0F52               	incfsz	___fladd@b+2,w
  7735     01F9  29FB               	goto	u4413
  7736     01FA  29FC               	goto	u4414
  7737     01FB                     u4413:
  7738     01FB  02DE               	subwf	??___fladd+6,f
  7739     01FC                     u4414:
  7740     01FC  0853               	movf	___fladd@b+3,w
  7741     01FD  1C03               	skipc
  7742     01FE  0F53               	incfsz	___fladd@b+3,w
  7743     01FF  2A01               	goto	u4415
  7744     0200  2A02               	goto	u4416
  7745     0201                     u4415:
  7746     0201  02DF               	subwf	??___fladd+7,f
  7747     0202                     u4416:
  7748     0202  085C               	movf	??___fladd+4,w
  7749     0203  07D8               	addwf	??___fladd,f
  7750     0204  085D               	movf	??___fladd+5,w
  7751     0205  1803               	skipnc
  7752     0206  0F5D               	incfsz	??___fladd+5,w
  7753     0207  2A09               	goto	u4420
  7754     0208  2A0A               	goto	u4421
  7755     0209                     u4420:
  7756     0209  07D9               	addwf	??___fladd+1,f
  7757     020A                     u4421:
  7758     020A  085E               	movf	??___fladd+6,w
  7759     020B  1803               	skipnc
  7760     020C  0F5E               	incfsz	??___fladd+6,w
  7761     020D  2A0F               	goto	u4422
  7762     020E  2A10               	goto	u4423
  7763     020F                     u4422:
  7764     020F  07DA               	addwf	??___fladd+2,f
  7765     0210                     u4423:
  7766     0210  085F               	movf	??___fladd+7,w
  7767     0211  1803               	skipnc
  7768     0212  0A5F               	incf	??___fladd+7,w
  7769     0213  07DB               	addwf	??___fladd+3,f
  7770     0214  085B               	movf	??___fladd+3,w
  7771     0215  00D3               	movwf	___fladd@b+3
  7772     0216  085A               	movf	??___fladd+2,w
  7773     0217  00D2               	movwf	___fladd@b+2
  7774     0218  0859               	movf	??___fladd+1,w
  7775     0219  00D1               	movwf	___fladd@b+1
  7776     021A  0858               	movf	??___fladd,w
  7777     021B  00D0               	movwf	___fladd@b
  7778     021C  3080               	movlw	128
  7779     021D  00D8               	movwf	??___fladd
  7780     021E  0858               	movf	??___fladd,w
  7781     021F  06E0               	xorwf	___fladd@signs,f
  7782     0220  09E3               	comf	___fladd@grs,f
  7783     0221  0AE3               	incf	___fladd@grs,f
  7784     0222  0863               	movf	___fladd@grs,w
  7785     0223  1D03               	btfss	3,2
  7786     0224  2A42               	goto	l865
  7787     0225  3001               	movlw	1
  7788     0226  07D0               	addwf	___fladd@b,f
  7789     0227  3000               	movlw	0
  7790     0228  1803               	skipnc
  7791     0229  3001               	movlw	1
  7792     022A  07D1               	addwf	___fladd@b+1,f
  7793     022B  3000               	movlw	0
  7794     022C  1803               	skipnc
  7795     022D  3001               	movlw	1
  7796     022E  07D2               	addwf	___fladd@b+2,f
  7797     022F  3000               	movlw	0
  7798     0230  1803               	skipnc
  7799     0231  3001               	movlw	1
  7800     0232  07D3               	addwf	___fladd@b+3,f
  7801     0233  2A42               	goto	l865
  7802     0234                     l3182:
  7803     0234  0854               	movf	___fladd@a,w
  7804     0235  02D0               	subwf	___fladd@b,f
  7805     0236  0855               	movf	___fladd@a+1,w
  7806     0237  1C03               	skipc
  7807     0238  0F55               	incfsz	___fladd@a+1,w
  7808     0239  02D1               	subwf	___fladd@b+1,f
  7809     023A  0856               	movf	___fladd@a+2,w
  7810     023B  1C03               	skipc
  7811     023C  0F56               	incfsz	___fladd@a+2,w
  7812     023D  02D2               	subwf	___fladd@b+2,f
  7813     023E  0857               	movf	___fladd@a+3,w
  7814     023F  1C03               	skipc
  7815     0240  0F57               	incfsz	___fladd@a+3,w
  7816     0241  02D3               	subwf	___fladd@b+3,f
  7817     0242                     l865:
  7818     0242  0853               	movf	___fladd@b+3,w
  7819     0243  0452               	iorwf	___fladd@b+2,w
  7820     0244  0451               	iorwf	___fladd@b+1,w
  7821     0245  0450               	iorwf	___fladd@b,w
  7822     0246  1D03               	skipz
  7823     0247  2A6A               	goto	l3204
  7824     0248  0863               	movf	___fladd@grs,w
  7825     0249  1D03               	btfss	3,2
  7826     024A  2A6A               	goto	l3204
  7827     024B  3000               	movlw	0
  7828     024C  00D3               	movwf	?___fladd+3
  7829     024D  3000               	movlw	0
  7830     024E  00D2               	movwf	?___fladd+2
  7831     024F  3000               	movlw	0
  7832     0250  00D1               	movwf	?___fladd+1
  7833     0251  3000               	movlw	0
  7834     0252  00D0               	movwf	?___fladd
  7835     0253  0008               	return
  7836     0254                     l3190:
  7837     0254  3001               	movlw	1
  7838     0255  00D8               	movwf	??___fladd
  7839     0256                     u4465:
  7840     0256  1003               	clrc
  7841     0257  0DD0               	rlf	___fladd@b,f
  7842     0258  0DD1               	rlf	___fladd@b+1,f
  7843     0259  0DD2               	rlf	___fladd@b+2,f
  7844     025A  0DD3               	rlf	___fladd@b+3,f
  7845     025B  0BD8               	decfsz	??___fladd,f
  7846     025C  2A56               	goto	u4465
  7847     025D  1BE3               	btfsc	___fladd@grs,7
  7848     025E  1450               	bsf	___fladd@b,0
  7849     025F  1C63               	btfss	___fladd@grs,0
  7850     0260  2A63               	goto	l3198
  7851     0261  1403               	setc
  7852     0262  2A64               	goto	L11
  7853     0263                     l3198:
  7854     0263  1003               	clrc
  7855     0264                     L11:
  7856     0264  0DE3               	rlf	___fladd@grs,f
  7857     0265  0862               	movf	___fladd@bexp,w
  7858     0266  1903               	btfsc	3,2
  7859     0267  2A6A               	goto	l3204
  7860     0268  3001               	movlw	1
  7861     0269  02E2               	subwf	___fladd@bexp,f
  7862     026A                     l3204:
  7863     026A  1FD2               	btfss	___fladd@b+2,7
  7864     026B  2A54               	goto	l3190
  7865     026C                     l3206:
  7866     026C  01E1               	clrf	___fladd@aexp
  7867     026D  1FE3               	btfss	___fladd@grs,7
  7868     026E  2A77               	goto	l3216
  7869     026F  0863               	movf	___fladd@grs,w
  7870     0270  397F               	andlw	127
  7871     0271  1903               	btfsc	3,2
  7872     0272  1850               	btfsc	___fladd@b,0
  7873     0273  2A75               	goto	l3212
  7874     0274  2A77               	goto	l3216
  7875     0275                     l3212:
  7876     0275  01E1               	clrf	___fladd@aexp
  7877     0276  0AE1               	incf	___fladd@aexp,f
  7878     0277                     l3216:
  7879     0277  0861               	movf	___fladd@aexp,w
  7880     0278  1903               	btfsc	3,2
  7881     0279  2AAA               	goto	l878
  7882     027A  3001               	movlw	1
  7883     027B  07D0               	addwf	___fladd@b,f
  7884     027C  3000               	movlw	0
  7885     027D  1803               	skipnc
  7886     027E  3001               	movlw	1
  7887     027F  07D1               	addwf	___fladd@b+1,f
  7888     0280  3000               	movlw	0
  7889     0281  1803               	skipnc
  7890     0282  3001               	movlw	1
  7891     0283  07D2               	addwf	___fladd@b+2,f
  7892     0284  3000               	movlw	0
  7893     0285  1803               	skipnc
  7894     0286  3001               	movlw	1
  7895     0287  07D3               	addwf	___fladd@b+3,f
  7896     0288  1C53               	btfss	___fladd@b+3,0
  7897     0289  2AAA               	goto	l878
  7898     028A  0850               	movf	___fladd@b,w
  7899     028B  00D8               	movwf	??___fladd
  7900     028C  0851               	movf	___fladd@b+1,w
  7901     028D  00D9               	movwf	??___fladd+1
  7902     028E  0852               	movf	___fladd@b+2,w
  7903     028F  00DA               	movwf	??___fladd+2
  7904     0290  0853               	movf	___fladd@b+3,w
  7905     0291  00DB               	movwf	??___fladd+3
  7906     0292  3001               	movlw	1
  7907     0293  00DC               	movwf	??___fladd+4
  7908     0294                     u4565:
  7909     0294  0D5B               	rlf	??___fladd+3,w
  7910     0295  0CDB               	rrf	??___fladd+3,f
  7911     0296  0CDA               	rrf	??___fladd+2,f
  7912     0297  0CD9               	rrf	??___fladd+1,f
  7913     0298  0CD8               	rrf	??___fladd,f
  7914     0299  0BDC               	decfsz	??___fladd+4,f
  7915     029A  2A94               	goto	u4565
  7916     029B  085B               	movf	??___fladd+3,w
  7917     029C  00D3               	movwf	___fladd@b+3
  7918     029D  085A               	movf	??___fladd+2,w
  7919     029E  00D2               	movwf	___fladd@b+2
  7920     029F  0859               	movf	??___fladd+1,w
  7921     02A0  00D1               	movwf	___fladd@b+1
  7922     02A1  0858               	movf	??___fladd,w
  7923     02A2  00D0               	movwf	___fladd@b
  7924     02A3  0A62               	incf	___fladd@bexp,w
  7925     02A4  1903               	btfsc	3,2
  7926     02A5  2AAA               	goto	l878
  7927     02A6  3001               	movlw	1
  7928     02A7  00D8               	movwf	??___fladd
  7929     02A8  0858               	movf	??___fladd,w
  7930     02A9  07E2               	addwf	___fladd@bexp,f
  7931     02AA                     l878:
  7932     02AA  0A62               	incf	___fladd@bexp,w
  7933     02AB  1D03               	btfss	3,2
  7934     02AC  0862               	movf	___fladd@bexp,w
  7935     02AD  1D03               	btfss	3,2
  7936     02AE  2ABA               	goto	l3234
  7937     02AF  3000               	movlw	0
  7938     02B0  00D3               	movwf	___fladd@b+3
  7939     02B1  3000               	movlw	0
  7940     02B2  00D2               	movwf	___fladd@b+2
  7941     02B3  3000               	movlw	0
  7942     02B4  00D1               	movwf	___fladd@b+1
  7943     02B5  3000               	movlw	0
  7944     02B6  00D0               	movwf	___fladd@b
  7945     02B7  0862               	movf	___fladd@bexp,w
  7946     02B8  1903               	btfsc	3,2
  7947     02B9  01E0               	clrf	___fladd@signs
  7948     02BA                     l3234:
  7949     02BA  1C62               	btfss	___fladd@bexp,0
  7950     02BB  2ABE               	goto	l3238
  7951     02BC  17D2               	bsf	___fladd@b+2,7
  7952     02BD  2AC2               	goto	l886
  7953     02BE                     l3238:
  7954     02BE  307F               	movlw	127
  7955     02BF  00D8               	movwf	??___fladd
  7956     02C0  0858               	movf	??___fladd,w
  7957     02C1  05D2               	andwf	___fladd@b+2,f
  7958     02C2                     l886:
  7959     02C2  0862               	movf	___fladd@bexp,w
  7960     02C3  00D8               	movwf	??___fladd
  7961     02C4  1003               	clrc
  7962     02C5  0C58               	rrf	??___fladd,w
  7963     02C6  00D3               	movwf	___fladd@b+3
  7964     02C7  1FE0               	btfss	___fladd@signs,7
  7965     02C8  0008               	return
  7966     02C9  17D3               	bsf	___fladd@b+3,7
  7967     02CA  0008               	return
  7968     02CB                     __end_of___fladd:
  7969                           
  7970                           	psect	text17
  7971     1AAA                     __ptext17:	
  7972 ;; *************** function ___flneg *****************
  7973 ;; Defined at:
  7974 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\flneg.c"
  7975 ;; Parameters:    Size  Location     Type
  7976 ;;  f1              4    0[COMMON] unsigned char 
  7977 ;; Auto vars:     Size  Location     Type
  7978 ;;		None
  7979 ;; Return value:  Size  Location     Type
  7980 ;;                  4    0[COMMON] unsigned char 
  7981 ;; Registers used:
  7982 ;;		wreg
  7983 ;; Tracked objects:
  7984 ;;		On entry : 300/100
  7985 ;;		On exit  : 300/100
  7986 ;;		Unchanged: 300/0
  7987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7988 ;;      Params:         4       0       0       0       0
  7989 ;;      Locals:         0       0       0       0       0
  7990 ;;      Temps:          0       0       0       0       0
  7991 ;;      Totals:         4       0       0       0       0
  7992 ;;Total ram usage:        4 bytes
  7993 ;; Hardware stack levels used: 1
  7994 ;; This function calls:
  7995 ;;		Nothing
  7996 ;; This function is called by:
  7997 ;;		_sprintf
  7998 ;; This function uses a non-reentrant model
  7999 ;;
  8000                           
  8001     1AAA                     ___flneg:	
  8002                           ;psect for function ___flneg
  8003                           
  8004                           
  8005                           ;incstack = 0
  8006                           ; Regs used in ___flneg: [wreg]
  8007     1AAA  0873               	movf	___flneg@f1+3,w
  8008     1AAB  0472               	iorwf	___flneg@f1+2,w
  8009     1AAC  0471               	iorwf	___flneg@f1+1,w
  8010     1AAD  0470               	iorwf	___flneg@f1,w
  8011     1AAE  1903               	skipnz
  8012     1AAF  0008               	return
  8013     1AB0  3080               	movlw	128
  8014     1AB1  06F3               	xorwf	___flneg@f1+3,f
  8015     1AB2  0008               	return
  8016     1AB3                     __end_of___flneg:
  8017                           
  8018                           	psect	text18
  8019     1116                     __ptext18:	
  8020 ;; *************** function ___flge *****************
  8021 ;; Defined at:
  8022 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\flge.c"
  8023 ;; Parameters:    Size  Location     Type
  8024 ;;  ff1             4    0[COMMON] unsigned char 
  8025 ;;  ff2             4    4[COMMON] unsigned char 
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;		None
  8028 ;; Return value:  Size  Location     Type
  8029 ;;		None               void
  8030 ;; Registers used:
  8031 ;;		wreg, status,2, status,0
  8032 ;; Tracked objects:
  8033 ;;		On entry : 300/100
  8034 ;;		On exit  : 300/100
  8035 ;;		Unchanged: 300/0
  8036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8037 ;;      Params:         8       0       0       0       0
  8038 ;;      Locals:         0       0       0       0       0
  8039 ;;      Temps:          4       0       0       0       0
  8040 ;;      Totals:        12       0       0       0       0
  8041 ;;Total ram usage:       12 bytes
  8042 ;; Hardware stack levels used: 1
  8043 ;; This function calls:
  8044 ;;		Nothing
  8045 ;; This function is called by:
  8046 ;;		_sprintf
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050     1116                     ___flge:	
  8051                           ;psect for function ___flge
  8052                           
  8053                           
  8054                           ;incstack = 0
  8055                           ; Regs used in ___flge: [wreg+status,2+status,0]
  8056     1116  3000               	movlw	0
  8057     1117  0570               	andwf	___flge@ff1,w
  8058     1118  00F8               	movwf	??___flge
  8059     1119  3000               	movlw	0
  8060     111A  0571               	andwf	___flge@ff1+1,w
  8061     111B  00F9               	movwf	??___flge+1
  8062     111C  3080               	movlw	128
  8063     111D  0572               	andwf	___flge@ff1+2,w
  8064     111E  00FA               	movwf	??___flge+2
  8065     111F  307F               	movlw	127
  8066     1120  0573               	andwf	___flge@ff1+3,w
  8067     1121  00FB               	movwf	??___flge+3
  8068     1122  087B               	movf	??___flge+3,w
  8069     1123  047A               	iorwf	??___flge+2,w
  8070     1124  0479               	iorwf	??___flge+1,w
  8071     1125  0478               	iorwf	??___flge,w
  8072     1126  1D03               	skipz
  8073     1127  2930               	goto	l708
  8074     1128  3000               	movlw	0
  8075     1129  00F3               	movwf	___flge@ff1+3
  8076     112A  3000               	movlw	0
  8077     112B  00F2               	movwf	___flge@ff1+2
  8078     112C  3000               	movlw	0
  8079     112D  00F1               	movwf	___flge@ff1+1
  8080     112E  3000               	movlw	0
  8081     112F  00F0               	movwf	___flge@ff1
  8082     1130                     l708:
  8083     1130  3000               	movlw	0
  8084     1131  0574               	andwf	___flge@ff2,w
  8085     1132  00F8               	movwf	??___flge
  8086     1133  3000               	movlw	0
  8087     1134  0575               	andwf	___flge@ff2+1,w
  8088     1135  00F9               	movwf	??___flge+1
  8089     1136  3080               	movlw	128
  8090     1137  0576               	andwf	___flge@ff2+2,w
  8091     1138  00FA               	movwf	??___flge+2
  8092     1139  307F               	movlw	127
  8093     113A  0577               	andwf	___flge@ff2+3,w
  8094     113B  00FB               	movwf	??___flge+3
  8095     113C  087B               	movf	??___flge+3,w
  8096     113D  047A               	iorwf	??___flge+2,w
  8097     113E  0479               	iorwf	??___flge+1,w
  8098     113F  0478               	iorwf	??___flge,w
  8099     1140  1D03               	skipz
  8100     1141  294A               	goto	l3800
  8101     1142  3000               	movlw	0
  8102     1143  00F7               	movwf	___flge@ff2+3
  8103     1144  3000               	movlw	0
  8104     1145  00F6               	movwf	___flge@ff2+2
  8105     1146  3000               	movlw	0
  8106     1147  00F5               	movwf	___flge@ff2+1
  8107     1148  3000               	movlw	0
  8108     1149  00F4               	movwf	___flge@ff2
  8109     114A                     l3800:
  8110     114A  1FF3               	btfss	___flge@ff1+3,7
  8111     114B  2970               	goto	l3804
  8112     114C  3000               	movlw	0
  8113     114D  00F8               	movwf	??___flge
  8114     114E  3000               	movlw	0
  8115     114F  00F9               	movwf	??___flge+1
  8116     1150  3000               	movlw	0
  8117     1151  00FA               	movwf	??___flge+2
  8118     1152  3080               	movlw	128
  8119     1153  00FB               	movwf	??___flge+3
  8120     1154  0870               	movf	___flge@ff1,w
  8121     1155  02F8               	subwf	??___flge,f
  8122     1156  0871               	movf	___flge@ff1+1,w
  8123     1157  1C03               	skipc
  8124     1158  0F71               	incfsz	___flge@ff1+1,w
  8125     1159  295B               	goto	u5881
  8126     115A  295C               	goto	u5882
  8127     115B                     u5881:
  8128     115B  02F9               	subwf	??___flge+1,f
  8129     115C                     u5882:
  8130     115C  0872               	movf	___flge@ff1+2,w
  8131     115D  1C03               	skipc
  8132     115E  0F72               	incfsz	___flge@ff1+2,w
  8133     115F  2961               	goto	u5883
  8134     1160  2962               	goto	u5884
  8135     1161                     u5883:
  8136     1161  02FA               	subwf	??___flge+2,f
  8137     1162                     u5884:
  8138     1162  0873               	movf	___flge@ff1+3,w
  8139     1163  1C03               	skipc
  8140     1164  0F73               	incfsz	___flge@ff1+3,w
  8141     1165  2967               	goto	u5885
  8142     1166  2968               	goto	u5886
  8143     1167                     u5885:
  8144     1167  02FB               	subwf	??___flge+3,f
  8145     1168                     u5886:
  8146     1168  087B               	movf	??___flge+3,w
  8147     1169  00F3               	movwf	___flge@ff1+3
  8148     116A  087A               	movf	??___flge+2,w
  8149     116B  00F2               	movwf	___flge@ff1+2
  8150     116C  0879               	movf	??___flge+1,w
  8151     116D  00F1               	movwf	___flge@ff1+1
  8152     116E  0878               	movf	??___flge,w
  8153     116F  00F0               	movwf	___flge@ff1
  8154     1170                     l3804:
  8155     1170  1FF7               	btfss	___flge@ff2+3,7
  8156     1171  2996               	goto	l711
  8157     1172  3000               	movlw	0
  8158     1173  00F8               	movwf	??___flge
  8159     1174  3000               	movlw	0
  8160     1175  00F9               	movwf	??___flge+1
  8161     1176  3000               	movlw	0
  8162     1177  00FA               	movwf	??___flge+2
  8163     1178  3080               	movlw	128
  8164     1179  00FB               	movwf	??___flge+3
  8165     117A  0874               	movf	___flge@ff2,w
  8166     117B  02F8               	subwf	??___flge,f
  8167     117C  0875               	movf	___flge@ff2+1,w
  8168     117D  1C03               	skipc
  8169     117E  0F75               	incfsz	___flge@ff2+1,w
  8170     117F  2981               	goto	u5901
  8171     1180  2982               	goto	u5902
  8172     1181                     u5901:
  8173     1181  02F9               	subwf	??___flge+1,f
  8174     1182                     u5902:
  8175     1182  0876               	movf	___flge@ff2+2,w
  8176     1183  1C03               	skipc
  8177     1184  0F76               	incfsz	___flge@ff2+2,w
  8178     1185  2987               	goto	u5903
  8179     1186  2988               	goto	u5904
  8180     1187                     u5903:
  8181     1187  02FA               	subwf	??___flge+2,f
  8182     1188                     u5904:
  8183     1188  0877               	movf	___flge@ff2+3,w
  8184     1189  1C03               	skipc
  8185     118A  0F77               	incfsz	___flge@ff2+3,w
  8186     118B  298D               	goto	u5905
  8187     118C  298E               	goto	u5906
  8188     118D                     u5905:
  8189     118D  02FB               	subwf	??___flge+3,f
  8190     118E                     u5906:
  8191     118E  087B               	movf	??___flge+3,w
  8192     118F  00F7               	movwf	___flge@ff2+3
  8193     1190  087A               	movf	??___flge+2,w
  8194     1191  00F6               	movwf	___flge@ff2+2
  8195     1192  0879               	movf	??___flge+1,w
  8196     1193  00F5               	movwf	___flge@ff2+1
  8197     1194  0878               	movf	??___flge,w
  8198     1195  00F4               	movwf	___flge@ff2
  8199     1196                     l711:
  8200     1196  3080               	movlw	128
  8201     1197  06F3               	xorwf	___flge@ff1+3,f
  8202     1198  3080               	movlw	128
  8203     1199  06F7               	xorwf	___flge@ff2+3,f
  8204     119A  0877               	movf	___flge@ff2+3,w
  8205     119B  0273               	subwf	___flge@ff1+3,w
  8206     119C  1D03               	skipz
  8207     119D  0008               	return
  8208     119E  0876               	movf	___flge@ff2+2,w
  8209     119F  0272               	subwf	___flge@ff1+2,w
  8210     11A0  1D03               	skipz
  8211     11A1  0008               	return
  8212     11A2  0875               	movf	___flge@ff2+1,w
  8213     11A3  0271               	subwf	___flge@ff1+1,w
  8214     11A4  1D03               	skipz
  8215     11A5  0008               	return
  8216     11A6  0874               	movf	___flge@ff2,w
  8217     11A7  0270               	subwf	___flge@ff1,w
  8218     11A8  0008               	return
  8219     11A9                     __end_of___flge:
  8220                           
  8221                           	psect	text19
  8222     1DC0                     __ptext19:	
  8223 ;; *************** function ___fleq *****************
  8224 ;; Defined at:
  8225 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\fleq.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;  ff1             4    0[COMMON] unsigned char 
  8228 ;;  ff2             4    4[COMMON] unsigned char 
  8229 ;; Auto vars:     Size  Location     Type
  8230 ;;		None
  8231 ;; Return value:  Size  Location     Type
  8232 ;;		None               void
  8233 ;; Registers used:
  8234 ;;		wreg, status,2, status,0
  8235 ;; Tracked objects:
  8236 ;;		On entry : 300/100
  8237 ;;		On exit  : 300/100
  8238 ;;		Unchanged: 300/0
  8239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8240 ;;      Params:         8       0       0       0       0
  8241 ;;      Locals:         0       0       0       0       0
  8242 ;;      Temps:          4       0       0       0       0
  8243 ;;      Totals:        12       0       0       0       0
  8244 ;;Total ram usage:       12 bytes
  8245 ;; Hardware stack levels used: 1
  8246 ;; This function calls:
  8247 ;;		Nothing
  8248 ;; This function is called by:
  8249 ;;		_sprintf
  8250 ;; This function uses a non-reentrant model
  8251 ;;
  8252                           
  8253     1DC0                     ___fleq:	
  8254                           ;psect for function ___fleq
  8255                           
  8256                           
  8257                           ;incstack = 0
  8258                           ; Regs used in ___fleq: [wreg+status,2+status,0]
  8259     1DC0  3000               	movlw	0
  8260     1DC1  0570               	andwf	___fleq@ff1,w
  8261     1DC2  00F8               	movwf	??___fleq
  8262     1DC3  3000               	movlw	0
  8263     1DC4  0571               	andwf	___fleq@ff1+1,w
  8264     1DC5  00F9               	movwf	??___fleq+1
  8265     1DC6  3080               	movlw	128
  8266     1DC7  0572               	andwf	___fleq@ff1+2,w
  8267     1DC8  00FA               	movwf	??___fleq+2
  8268     1DC9  307F               	movlw	127
  8269     1DCA  0573               	andwf	___fleq@ff1+3,w
  8270     1DCB  00FB               	movwf	??___fleq+3
  8271     1DCC  087B               	movf	??___fleq+3,w
  8272     1DCD  047A               	iorwf	??___fleq+2,w
  8273     1DCE  0479               	iorwf	??___fleq+1,w
  8274     1DCF  0478               	iorwf	??___fleq,w
  8275     1DD0  1D03               	skipz
  8276     1DD1  2DDA               	goto	l703
  8277     1DD2  3000               	movlw	0
  8278     1DD3  00F3               	movwf	___fleq@ff1+3
  8279     1DD4  3000               	movlw	0
  8280     1DD5  00F2               	movwf	___fleq@ff1+2
  8281     1DD6  3000               	movlw	0
  8282     1DD7  00F1               	movwf	___fleq@ff1+1
  8283     1DD8  3000               	movlw	0
  8284     1DD9  00F0               	movwf	___fleq@ff1
  8285     1DDA                     l703:
  8286     1DDA  3000               	movlw	0
  8287     1DDB  0574               	andwf	___fleq@ff2,w
  8288     1DDC  00F8               	movwf	??___fleq
  8289     1DDD  3000               	movlw	0
  8290     1DDE  0575               	andwf	___fleq@ff2+1,w
  8291     1DDF  00F9               	movwf	??___fleq+1
  8292     1DE0  3080               	movlw	128
  8293     1DE1  0576               	andwf	___fleq@ff2+2,w
  8294     1DE2  00FA               	movwf	??___fleq+2
  8295     1DE3  307F               	movlw	127
  8296     1DE4  0577               	andwf	___fleq@ff2+3,w
  8297     1DE5  00FB               	movwf	??___fleq+3
  8298     1DE6  087B               	movf	??___fleq+3,w
  8299     1DE7  047A               	iorwf	??___fleq+2,w
  8300     1DE8  0479               	iorwf	??___fleq+1,w
  8301     1DE9  0478               	iorwf	??___fleq,w
  8302     1DEA  1D03               	skipz
  8303     1DEB  2DF4               	goto	l704
  8304     1DEC  3000               	movlw	0
  8305     1DED  00F7               	movwf	___fleq@ff2+3
  8306     1DEE  3000               	movlw	0
  8307     1DEF  00F6               	movwf	___fleq@ff2+2
  8308     1DF0  3000               	movlw	0
  8309     1DF1  00F5               	movwf	___fleq@ff2+1
  8310     1DF2  3000               	movlw	0
  8311     1DF3  00F4               	movwf	___fleq@ff2
  8312     1DF4                     l704:
  8313     1DF4  0877               	movf	___fleq@ff2+3,w
  8314     1DF5  0673               	xorwf	___fleq@ff1+3,w
  8315     1DF6  1D03               	skipz
  8316     1DF7  2E02               	goto	u5845
  8317     1DF8  0876               	movf	___fleq@ff2+2,w
  8318     1DF9  0672               	xorwf	___fleq@ff1+2,w
  8319     1DFA  1D03               	skipz
  8320     1DFB  2E02               	goto	u5845
  8321     1DFC  0875               	movf	___fleq@ff2+1,w
  8322     1DFD  0671               	xorwf	___fleq@ff1+1,w
  8323     1DFE  1D03               	skipz
  8324     1DFF  2E02               	goto	u5845
  8325     1E00  0874               	movf	___fleq@ff2,w
  8326     1E01  0670               	xorwf	___fleq@ff1,w
  8327     1E02                     u5845:
  8328     1E02  1903               	skipnz
  8329     1E03  2E06               	goto	l3790
  8330     1E04  1003               	clrc
  8331     1E05  0008               	return
  8332     1E06                     l3790:
  8333     1E06  1403               	setc
  8334     1E07  0008               	return
  8335     1E08                     __end_of___fleq:
  8336                           
  8337                           	psect	text20
  8338     1001                     __ptext20:	
  8339 ;; *************** function _setupINTOSC *****************
  8340 ;; Defined at:
  8341 ;;		line 10 in file "oscilador.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;  IRCF            1    wreg     unsigned char 
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  IRCF            1    0[COMMON] unsigned char 
  8346 ;; Return value:  Size  Location     Type
  8347 ;;                  1    wreg      void 
  8348 ;; Registers used:
  8349 ;;		wreg, status,2, status,0
  8350 ;; Tracked objects:
  8351 ;;		On entry : B00/0
  8352 ;;		On exit  : B00/100
  8353 ;;		Unchanged: 800/0
  8354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8355 ;;      Params:         0       0       0       0       0
  8356 ;;      Locals:         1       0       0       0       0
  8357 ;;      Temps:          0       0       0       0       0
  8358 ;;      Totals:         1       0       0       0       0
  8359 ;;Total ram usage:        1 bytes
  8360 ;; Hardware stack levels used: 1
  8361 ;; This function calls:
  8362 ;;		Nothing
  8363 ;; This function is called by:
  8364 ;;		_main
  8365 ;; This function uses a non-reentrant model
  8366 ;;
  8367                           
  8368     1001                     _setupINTOSC:	
  8369                           ;psect for function _setupINTOSC
  8370                           
  8371                           
  8372                           ;incstack = 0
  8373                           ; Regs used in _setupINTOSC: [wreg+status,2+status,0]
  8374                           ;setupINTOSC@IRCF stored from wreg
  8375     1001  00F0               	movwf	setupINTOSC@IRCF
  8376                           
  8377                           ;oscilador.c: 11:     if (IRCF == 7){
  8378     1002  3007               	movlw	7
  8379     1003  0670               	xorwf	setupINTOSC@IRCF,w
  8380     1004  1D03               	btfss	3,2
  8381     1005  2809               	goto	l259
  8382                           
  8383                           ;oscilador.c: 12:         OSCCONbits.IRCF = 0b111;
  8384     1006  3070               	movlw	112
  8385     1007  1683               	bsf	3,5	;RP0=1, select bank1
  8386     1008  048F               	iorwf	15,f	;volatile
  8387     1009                     l259:	
  8388                           ;oscilador.c: 13:     }
  8389                           
  8390                           
  8391                           ;oscilador.c: 14:     if (IRCF == 6){
  8392     1009  3006               	movlw	6
  8393     100A  0670               	xorwf	setupINTOSC@IRCF,w
  8394     100B  1D03               	btfss	3,2
  8395     100C  2812               	goto	l260
  8396                           
  8397                           ;oscilador.c: 15:         OSCCONbits.IRCF = 0b110;
  8398     100D  1683               	bsf	3,5	;RP0=1, select bank1
  8399     100E  080F               	movf	15,w	;volatile
  8400     100F  398F               	andlw	-113
  8401     1010  3860               	iorlw	96
  8402     1011  008F               	movwf	15	;volatile
  8403     1012                     l260:	
  8404                           ;oscilador.c: 16:     }
  8405                           
  8406                           
  8407                           ;oscilador.c: 17:     if (IRCF == 5){
  8408     1012  3005               	movlw	5
  8409     1013  0670               	xorwf	setupINTOSC@IRCF,w
  8410     1014  1D03               	btfss	3,2
  8411     1015  281B               	goto	l261
  8412                           
  8413                           ;oscilador.c: 18:         OSCCONbits.IRCF = 0b101;
  8414     1016  1683               	bsf	3,5	;RP0=1, select bank1
  8415     1017  080F               	movf	15,w	;volatile
  8416     1018  398F               	andlw	-113
  8417     1019  3850               	iorlw	80
  8418     101A  008F               	movwf	15	;volatile
  8419     101B                     l261:	
  8420                           ;oscilador.c: 19:     }
  8421                           
  8422                           
  8423                           ;oscilador.c: 20:     if (IRCF == 4){
  8424     101B  3004               	movlw	4
  8425     101C  0670               	xorwf	setupINTOSC@IRCF,w
  8426     101D  1D03               	btfss	3,2
  8427     101E  2824               	goto	l262
  8428                           
  8429                           ;oscilador.c: 21:         OSCCONbits.IRCF = 0b100;
  8430     101F  1683               	bsf	3,5	;RP0=1, select bank1
  8431     1020  080F               	movf	15,w	;volatile
  8432     1021  398F               	andlw	-113
  8433     1022  3840               	iorlw	64
  8434     1023  008F               	movwf	15	;volatile
  8435     1024                     l262:	
  8436                           ;oscilador.c: 22:     }
  8437                           
  8438                           
  8439                           ;oscilador.c: 23:     if (IRCF == 3){
  8440     1024  3003               	movlw	3
  8441     1025  0670               	xorwf	setupINTOSC@IRCF,w
  8442     1026  1D03               	btfss	3,2
  8443     1027  282D               	goto	l263
  8444                           
  8445                           ;oscilador.c: 24:         OSCCONbits.IRCF = 0b011;
  8446     1028  1683               	bsf	3,5	;RP0=1, select bank1
  8447     1029  080F               	movf	15,w	;volatile
  8448     102A  398F               	andlw	-113
  8449     102B  3830               	iorlw	48
  8450     102C  008F               	movwf	15	;volatile
  8451     102D                     l263:	
  8452                           ;oscilador.c: 25:     }
  8453                           
  8454                           
  8455                           ;oscilador.c: 26:     if (IRCF == 2){
  8456     102D  3002               	movlw	2
  8457     102E  0670               	xorwf	setupINTOSC@IRCF,w
  8458     102F  1D03               	btfss	3,2
  8459     1030  2836               	goto	l264
  8460                           
  8461                           ;oscilador.c: 27:         OSCCONbits.IRCF = 0b010;
  8462     1031  1683               	bsf	3,5	;RP0=1, select bank1
  8463     1032  080F               	movf	15,w	;volatile
  8464     1033  398F               	andlw	-113
  8465     1034  3820               	iorlw	32
  8466     1035  008F               	movwf	15	;volatile
  8467     1036                     l264:	
  8468                           ;oscilador.c: 28:     }
  8469                           
  8470                           
  8471                           ;oscilador.c: 29:     if (IRCF == 1){
  8472     1036  0370               	decf	setupINTOSC@IRCF,w
  8473     1037  1D03               	btfss	3,2
  8474     1038  283E               	goto	l265
  8475                           
  8476                           ;oscilador.c: 30:         OSCCONbits.IRCF = 0b001;
  8477     1039  1683               	bsf	3,5	;RP0=1, select bank1
  8478     103A  080F               	movf	15,w	;volatile
  8479     103B  398F               	andlw	-113
  8480     103C  3810               	iorlw	16
  8481     103D  008F               	movwf	15	;volatile
  8482     103E                     l265:	
  8483                           ;oscilador.c: 31:     }
  8484                           
  8485                           
  8486                           ;oscilador.c: 32:     if (IRCF == 0){
  8487     103E  0870               	movf	setupINTOSC@IRCF,w
  8488     103F  1D03               	btfss	3,2
  8489     1040  2844               	goto	l3946
  8490                           
  8491                           ;oscilador.c: 33:         OSCCONbits.IRCF = 0b000;
  8492     1041  308F               	movlw	-113
  8493     1042  1683               	bsf	3,5	;RP0=1, select bank1
  8494     1043  058F               	andwf	15,f	;volatile
  8495     1044                     l3946:
  8496                           
  8497                           ;oscilador.c: 36:     OSCCONbits.SCS = 1;
  8498     1044  1683               	bsf	3,5	;RP0=1, select bank1
  8499     1045  140F               	bsf	15,0	;volatile
  8500     1046  0008               	return
  8501     1047                     __end_of_setupINTOSC:
  8502                           
  8503                           	psect	text21
  8504     1B90                     __ptext21:	
  8505 ;; *************** function _portsetup *****************
  8506 ;; Defined at:
  8507 ;;		line 283 in file "main.c"
  8508 ;; Parameters:    Size  Location     Type
  8509 ;;		None
  8510 ;; Auto vars:     Size  Location     Type
  8511 ;;		None
  8512 ;; Return value:  Size  Location     Type
  8513 ;;                  1    wreg      void 
  8514 ;; Registers used:
  8515 ;;		wreg, status,2, status,0, pclath, cstack
  8516 ;; Tracked objects:
  8517 ;;		On entry : B00/100
  8518 ;;		On exit  : 300/100
  8519 ;;		Unchanged: 0/0
  8520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8521 ;;      Params:         0       0       0       0       0
  8522 ;;      Locals:         0       0       0       0       0
  8523 ;;      Temps:          0       0       0       0       0
  8524 ;;      Totals:         0       0       0       0       0
  8525 ;;Total ram usage:        0 bytes
  8526 ;; Hardware stack levels used: 1
  8527 ;; Hardware stack levels required when called: 2
  8528 ;; This function calls:
  8529 ;;		_I2C_Master_Init
  8530 ;; This function is called by:
  8531 ;;		_main
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535     1B90                     _portsetup:	
  8536                           ;psect for function _portsetup
  8537                           
  8538                           
  8539                           ;main.c: 284:     ANSEL = 0;
  8540                           
  8541                           ;incstack = 0
  8542                           ; Regs used in _portsetup: [wreg+status,2+status,0+pclath+cstack]
  8543     1B90  1703               	bsf	3,6	;RP1=1, select bank3
  8544     1B91  0188               	clrf	8	;volatile
  8545                           
  8546                           ;main.c: 285:     ANSELH = 0;
  8547     1B92  0189               	clrf	9	;volatile
  8548                           
  8549                           ;main.c: 286:     TRISA = 0;
  8550     1B93  1303               	bcf	3,6	;RP1=0, select bank1
  8551     1B94  0185               	clrf	5	;volatile
  8552                           
  8553                           ;main.c: 287:     PORTA = 0;
  8554     1B95  1283               	bcf	3,5	;RP0=0, select bank0
  8555     1B96  0185               	clrf	5	;volatile
  8556                           
  8557                           ;main.c: 288:     TRISD = 0;
  8558     1B97  1683               	bsf	3,5	;RP0=1, select bank1
  8559     1B98  0188               	clrf	8	;volatile
  8560                           
  8561                           ;main.c: 289:     PORTD = 0;
  8562     1B99  1283               	bcf	3,5	;RP0=0, select bank0
  8563     1B9A  0188               	clrf	8	;volatile
  8564                           
  8565                           ;main.c: 292:     TRISB = 0b11100000;
  8566     1B9B  30E0               	movlw	224
  8567     1B9C  1683               	bsf	3,5	;RP0=1, select bank1
  8568     1B9D  0086               	movwf	6	;volatile
  8569                           
  8570                           ;main.c: 293:     PORTB = 0b11100000;
  8571     1B9E  30E0               	movlw	224
  8572     1B9F  1283               	bcf	3,5	;RP0=0, select bank0
  8573     1BA0  0086               	movwf	6	;volatile
  8574                           
  8575                           ;main.c: 294:     WPUB = 0b11100000;
  8576     1BA1  30E0               	movlw	224
  8577     1BA2  1683               	bsf	3,5	;RP0=1, select bank1
  8578     1BA3  0095               	movwf	21	;volatile
  8579                           
  8580                           ;main.c: 295:     OPTION_REGbits.nRBPU = 0;
  8581     1BA4  1381               	bcf	1,7	;volatile
  8582                           
  8583                           ;main.c: 297:     I2C_Master_Init(100000);
  8584     1BA5  3000               	movlw	0
  8585     1BA6  1283               	bcf	3,5	;RP0=0, select bank0
  8586     1BA7  00A3               	movwf	I2C_Master_Init@c+3
  8587     1BA8  3001               	movlw	1
  8588     1BA9  00A2               	movwf	I2C_Master_Init@c+2
  8589     1BAA  3086               	movlw	134
  8590     1BAB  00A1               	movwf	I2C_Master_Init@c+1
  8591     1BAC  30A0               	movlw	160
  8592     1BAD  00A0               	movwf	I2C_Master_Init@c
  8593     1BAE  160A  158A  242A   	fcall	_I2C_Master_Init
  8594     1BB1  0008               	return
  8595     1BB2                     __end_of_portsetup:
  8596                           
  8597                           	psect	text22
  8598     1C2A                     __ptext22:	
  8599 ;; *************** function _I2C_Master_Init *****************
  8600 ;; Defined at:
  8601 ;;		line 16 in file "I2C.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;  c               4    0[BANK0 ] const unsigned long 
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;		None
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  1    wreg      void 
  8608 ;; Registers used:
  8609 ;;		wreg, status,2, status,0, pclath, cstack
  8610 ;; Tracked objects:
  8611 ;;		On entry : B00/0
  8612 ;;		On exit  : 300/100
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8615 ;;      Params:         0       4       0       0       0
  8616 ;;      Locals:         0       0       0       0       0
  8617 ;;      Temps:          0       4       0       0       0
  8618 ;;      Totals:         0       8       0       0       0
  8619 ;;Total ram usage:        8 bytes
  8620 ;; Hardware stack levels used: 1
  8621 ;; Hardware stack levels required when called: 1
  8622 ;; This function calls:
  8623 ;;		___lldiv
  8624 ;; This function is called by:
  8625 ;;		_portsetup
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629     1C2A                     _I2C_Master_Init:	
  8630                           ;psect for function _I2C_Master_Init
  8631                           
  8632                           
  8633                           ;I2C.c: 16: void I2C_Master_Init(const unsigned long c);I2C.c: 17: {;I2C.c: 18:     SSPC
      +                          ON = 0b00101000;
  8634                           
  8635                           ;incstack = 0
  8636                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  8637     1C2A  3028               	movlw	40
  8638     1C2B  0094               	movwf	20	;volatile
  8639                           
  8640                           ;I2C.c: 19:     SSPCON2 = 0;
  8641     1C2C  1683               	bsf	3,5	;RP0=1, select bank1
  8642     1C2D  0191               	clrf	17	;volatile
  8643                           
  8644                           ;I2C.c: 20:     SSPADD = (8000000/(4*c))-1;
  8645     1C2E  1283               	bcf	3,5	;RP0=0, select bank0
  8646     1C2F  0820               	movf	I2C_Master_Init@c,w
  8647     1C30  00A4               	movwf	??_I2C_Master_Init
  8648     1C31  0821               	movf	I2C_Master_Init@c+1,w
  8649     1C32  00A5               	movwf	??_I2C_Master_Init+1
  8650     1C33  0822               	movf	I2C_Master_Init@c+2,w
  8651     1C34  00A6               	movwf	??_I2C_Master_Init+2
  8652     1C35  0823               	movf	I2C_Master_Init@c+3,w
  8653     1C36  00A7               	movwf	??_I2C_Master_Init+3
  8654     1C37  3002               	movlw	2
  8655     1C38                     u5045:
  8656     1C38  1003               	clrc
  8657     1C39  0DA4               	rlf	??_I2C_Master_Init,f
  8658     1C3A  0DA5               	rlf	??_I2C_Master_Init+1,f
  8659     1C3B  0DA6               	rlf	??_I2C_Master_Init+2,f
  8660     1C3C  0DA7               	rlf	??_I2C_Master_Init+3,f
  8661     1C3D  3EFF               	addlw	-1
  8662     1C3E  1D03               	skipz
  8663     1C3F  2C38               	goto	u5045
  8664     1C40  0827               	movf	??_I2C_Master_Init+3,w
  8665     1C41  00F3               	movwf	___lldiv@divisor+3
  8666     1C42  0826               	movf	??_I2C_Master_Init+2,w
  8667     1C43  00F2               	movwf	___lldiv@divisor+2
  8668     1C44  0825               	movf	??_I2C_Master_Init+1,w
  8669     1C45  00F1               	movwf	___lldiv@divisor+1
  8670     1C46  0824               	movf	??_I2C_Master_Init,w
  8671     1C47  00F0               	movwf	___lldiv@divisor
  8672     1C48  3000               	movlw	0
  8673     1C49  00F7               	movwf	___lldiv@dividend+3
  8674     1C4A  307A               	movlw	122
  8675     1C4B  00F6               	movwf	___lldiv@dividend+2
  8676     1C4C  3012               	movlw	18
  8677     1C4D  00F5               	movwf	___lldiv@dividend+1
  8678     1C4E  3000               	movlw	0
  8679     1C4F  00F4               	movwf	___lldiv@dividend
  8680     1C50  160A  158A  27A2   	fcall	___lldiv
  8681     1C53  0870               	movf	?___lldiv,w
  8682     1C54  3EFF               	addlw	255
  8683     1C55  1683               	bsf	3,5	;RP0=1, select bank1
  8684     1C56  0093               	movwf	19	;volatile
  8685                           
  8686                           ;I2C.c: 21:     SSPSTAT = 0;
  8687     1C57  0194               	clrf	20	;volatile
  8688                           
  8689                           ;I2C.c: 22:     TRISCbits.TRISC3 = 1;
  8690     1C58  1587               	bsf	7,3	;volatile
  8691                           
  8692                           ;I2C.c: 23:     TRISCbits.TRISC4 = 1;
  8693     1C59  1607               	bsf	7,4	;volatile
  8694     1C5A  0008               	return
  8695     1C5B                     __end_of_I2C_Master_Init:
  8696                           
  8697                           	psect	text23
  8698     1FA2                     __ptext23:	
  8699 ;; *************** function ___lldiv *****************
  8700 ;; Defined at:
  8701 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\__lldiv.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;  divisor         4    0[COMMON] unsigned long 
  8704 ;;  dividend        4    4[COMMON] unsigned long 
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;  quotient        4    9[COMMON] unsigned long 
  8707 ;;  counter         1   13[COMMON] unsigned char 
  8708 ;; Return value:  Size  Location     Type
  8709 ;;                  4    0[COMMON] unsigned long 
  8710 ;; Registers used:
  8711 ;;		wreg, status,2, status,0
  8712 ;; Tracked objects:
  8713 ;;		On entry : 200/100
  8714 ;;		On exit  : 200/0
  8715 ;;		Unchanged: 200/0
  8716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8717 ;;      Params:         8       0       0       0       0
  8718 ;;      Locals:         5       0       0       0       0
  8719 ;;      Temps:          1       0       0       0       0
  8720 ;;      Totals:        14       0       0       0       0
  8721 ;;Total ram usage:       14 bytes
  8722 ;; Hardware stack levels used: 1
  8723 ;; This function calls:
  8724 ;;		Nothing
  8725 ;; This function is called by:
  8726 ;;		_I2C_Master_Init
  8727 ;;		_sprintf
  8728 ;; This function uses a non-reentrant model
  8729 ;;
  8730                           
  8731     1FA2                     ___lldiv:	
  8732                           ;psect for function ___lldiv
  8733                           
  8734                           
  8735                           ;incstack = 0
  8736                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8737     1FA2  3000               	movlw	0
  8738     1FA3  00FC               	movwf	___lldiv@quotient+3
  8739     1FA4  3000               	movlw	0
  8740     1FA5  00FB               	movwf	___lldiv@quotient+2
  8741     1FA6  3000               	movlw	0
  8742     1FA7  00FA               	movwf	___lldiv@quotient+1
  8743     1FA8  3000               	movlw	0
  8744     1FA9  00F9               	movwf	___lldiv@quotient
  8745     1FAA  0873               	movf	___lldiv@divisor+3,w
  8746     1FAB  0472               	iorwf	___lldiv@divisor+2,w
  8747     1FAC  0471               	iorwf	___lldiv@divisor+1,w
  8748     1FAD  0470               	iorwf	___lldiv@divisor,w
  8749     1FAE  1903               	skipnz
  8750     1FAF  2FF7               	goto	l2922
  8751     1FB0  01FD               	clrf	___lldiv@counter
  8752     1FB1  0AFD               	incf	___lldiv@counter,f
  8753     1FB2                     l2908:
  8754     1FB2  1BF3               	btfsc	___lldiv@divisor+3,7
  8755     1FB3  2FC2               	goto	l2910
  8756     1FB4  3001               	movlw	1
  8757     1FB5  00F8               	movwf	??___lldiv
  8758     1FB6                     u3855:
  8759     1FB6  1003               	clrc
  8760     1FB7  0DF0               	rlf	___lldiv@divisor,f
  8761     1FB8  0DF1               	rlf	___lldiv@divisor+1,f
  8762     1FB9  0DF2               	rlf	___lldiv@divisor+2,f
  8763     1FBA  0DF3               	rlf	___lldiv@divisor+3,f
  8764     1FBB  0BF8               	decfsz	??___lldiv,f
  8765     1FBC  2FB6               	goto	u3855
  8766     1FBD  3001               	movlw	1
  8767     1FBE  00F8               	movwf	??___lldiv
  8768     1FBF  0878               	movf	??___lldiv,w
  8769     1FC0  07FD               	addwf	___lldiv@counter,f
  8770     1FC1  2FB2               	goto	l2908
  8771     1FC2                     l2910:
  8772     1FC2  3001               	movlw	1
  8773     1FC3  00F8               	movwf	??___lldiv
  8774     1FC4                     u3875:
  8775     1FC4  1003               	clrc
  8776     1FC5  0DF9               	rlf	___lldiv@quotient,f
  8777     1FC6  0DFA               	rlf	___lldiv@quotient+1,f
  8778     1FC7  0DFB               	rlf	___lldiv@quotient+2,f
  8779     1FC8  0DFC               	rlf	___lldiv@quotient+3,f
  8780     1FC9  0BF8               	decfsz	??___lldiv,f
  8781     1FCA  2FC4               	goto	u3875
  8782     1FCB  0873               	movf	___lldiv@divisor+3,w
  8783     1FCC  0277               	subwf	___lldiv@dividend+3,w
  8784     1FCD  1D03               	skipz
  8785     1FCE  2FD9               	goto	u3885
  8786     1FCF  0872               	movf	___lldiv@divisor+2,w
  8787     1FD0  0276               	subwf	___lldiv@dividend+2,w
  8788     1FD1  1D03               	skipz
  8789     1FD2  2FD9               	goto	u3885
  8790     1FD3  0871               	movf	___lldiv@divisor+1,w
  8791     1FD4  0275               	subwf	___lldiv@dividend+1,w
  8792     1FD5  1D03               	skipz
  8793     1FD6  2FD9               	goto	u3885
  8794     1FD7  0870               	movf	___lldiv@divisor,w
  8795     1FD8  0274               	subwf	___lldiv@dividend,w
  8796     1FD9                     u3885:
  8797     1FD9  1C03               	skipc
  8798     1FDA  2FEA               	goto	l2918
  8799     1FDB  0870               	movf	___lldiv@divisor,w
  8800     1FDC  02F4               	subwf	___lldiv@dividend,f
  8801     1FDD  0871               	movf	___lldiv@divisor+1,w
  8802     1FDE  1C03               	skipc
  8803     1FDF  0F71               	incfsz	___lldiv@divisor+1,w
  8804     1FE0  02F5               	subwf	___lldiv@dividend+1,f
  8805     1FE1  0872               	movf	___lldiv@divisor+2,w
  8806     1FE2  1C03               	skipc
  8807     1FE3  0F72               	incfsz	___lldiv@divisor+2,w
  8808     1FE4  02F6               	subwf	___lldiv@dividend+2,f
  8809     1FE5  0873               	movf	___lldiv@divisor+3,w
  8810     1FE6  1C03               	skipc
  8811     1FE7  0F73               	incfsz	___lldiv@divisor+3,w
  8812     1FE8  02F7               	subwf	___lldiv@dividend+3,f
  8813     1FE9  1479               	bsf	___lldiv@quotient,0
  8814     1FEA                     l2918:
  8815     1FEA  3001               	movlw	1
  8816     1FEB                     u3895:
  8817     1FEB  1003               	clrc
  8818     1FEC  0CF3               	rrf	___lldiv@divisor+3,f
  8819     1FED  0CF2               	rrf	___lldiv@divisor+2,f
  8820     1FEE  0CF1               	rrf	___lldiv@divisor+1,f
  8821     1FEF  0CF0               	rrf	___lldiv@divisor,f
  8822     1FF0  3EFF               	addlw	-1
  8823     1FF1  1D03               	skipz
  8824     1FF2  2FEB               	goto	u3895
  8825     1FF3  3001               	movlw	1
  8826     1FF4  02FD               	subwf	___lldiv@counter,f
  8827     1FF5  1D03               	btfss	3,2
  8828     1FF6  2FC2               	goto	l2910
  8829     1FF7                     l2922:
  8830     1FF7  087C               	movf	___lldiv@quotient+3,w
  8831     1FF8  00F3               	movwf	?___lldiv+3
  8832     1FF9  087B               	movf	___lldiv@quotient+2,w
  8833     1FFA  00F2               	movwf	?___lldiv+2
  8834     1FFB  087A               	movf	___lldiv@quotient+1,w
  8835     1FFC  00F1               	movwf	?___lldiv+1
  8836     1FFD  0879               	movf	___lldiv@quotient,w
  8837     1FFE  00F0               	movwf	?___lldiv
  8838     1FFF  0008               	return
  8839     2000                     __end_of___lldiv:
  8840                           
  8841                           	psect	text24
  8842     1E9F                     __ptext24:	
  8843 ;; *************** function _leer_x *****************
  8844 ;; Defined at:
  8845 ;;		line 33 in file "DS3231.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;  address         1    wreg     unsigned char 
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;  address         1   12[COMMON] unsigned char 
  8850 ;;  valor           1   13[COMMON] unsigned char 
  8851 ;; Return value:  Size  Location     Type
  8852 ;;                  1    wreg      unsigned char 
  8853 ;; Registers used:
  8854 ;;		wreg, status,2, status,0, pclath, cstack
  8855 ;; Tracked objects:
  8856 ;;		On entry : 300/0
  8857 ;;		On exit  : 300/100
  8858 ;;		Unchanged: 0/0
  8859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8860 ;;      Params:         0       0       0       0       0
  8861 ;;      Locals:         2       0       0       0       0
  8862 ;;      Temps:          2       0       0       0       0
  8863 ;;      Totals:         4       0       0       0       0
  8864 ;;Total ram usage:        4 bytes
  8865 ;; Hardware stack levels used: 1
  8866 ;; Hardware stack levels required when called: 2
  8867 ;; This function calls:
  8868 ;;		_I2C_Master_Read
  8869 ;;		_I2C_Master_RepeatedStart
  8870 ;;		_I2C_Master_Start
  8871 ;;		_I2C_Master_Stop
  8872 ;;		_I2C_Master_Write
  8873 ;;		_convertir
  8874 ;; This function is called by:
  8875 ;;		_main
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879     1E9F                     _leer_x:	
  8880                           ;psect for function _leer_x
  8881                           
  8882                           
  8883                           ;incstack = 0
  8884                           ; Regs used in _leer_x: [wreg+status,2+status,0+pclath+cstack]
  8885                           ;leer_x@address stored from wreg
  8886     1E9F  00FC               	movwf	leer_x@address
  8887                           
  8888                           ;DS3231.c: 34:     uint8_t valor;;DS3231.c: 35:     I2C_Master_Start();
  8889     1EA0  160A  158A  2284  160A  158A  	fcall	_I2C_Master_Start
  8890                           
  8891                           ;DS3231.c: 36:     I2C_Master_Write(0xD0);
  8892     1EA5  30D0               	movlw	208
  8893     1EA6  00F0               	movwf	I2C_Master_Write@d
  8894     1EA7  3000               	movlw	0
  8895     1EA8  00F1               	movwf	I2C_Master_Write@d+1
  8896     1EA9  160A  158A  2293  160A  158A  	fcall	_I2C_Master_Write
  8897                           
  8898                           ;DS3231.c: 37:     I2C_Master_Write(address);
  8899     1EAE  087C               	movf	leer_x@address,w
  8900     1EAF  00FA               	movwf	??_leer_x
  8901     1EB0  01FB               	clrf	??_leer_x+1
  8902     1EB1  087A               	movf	??_leer_x,w
  8903     1EB2  00F0               	movwf	I2C_Master_Write@d
  8904     1EB3  087B               	movf	??_leer_x+1,w
  8905     1EB4  00F1               	movwf	I2C_Master_Write@d+1
  8906     1EB5  160A  158A  2293  160A  158A  	fcall	_I2C_Master_Write
  8907                           
  8908                           ;DS3231.c: 38:     I2C_Master_RepeatedStart();
  8909     1EBA  160A  158A  228E  160A  158A  	fcall	_I2C_Master_RepeatedStart
  8910                           
  8911                           ;DS3231.c: 39:     I2C_Master_Write(0xD1);
  8912     1EBF  30D1               	movlw	209
  8913     1EC0  00F0               	movwf	I2C_Master_Write@d
  8914     1EC1  3000               	movlw	0
  8915     1EC2  00F1               	movwf	I2C_Master_Write@d+1
  8916     1EC3  160A  158A  2293  160A  158A  	fcall	_I2C_Master_Write
  8917                           
  8918                           ;DS3231.c: 40:     valor = I2C_Master_Read(0);
  8919     1EC8  3000               	movlw	0
  8920     1EC9  00F0               	movwf	I2C_Master_Read@a
  8921     1ECA  00F1               	movwf	I2C_Master_Read@a+1
  8922     1ECB  160A  158A  23D5  160A  158A  	fcall	_I2C_Master_Read
  8923     1ED0  0870               	movf	?_I2C_Master_Read,w
  8924     1ED1  00FD               	movwf	leer_x@valor
  8925                           
  8926                           ;DS3231.c: 41:     I2C_Master_Stop();
  8927     1ED2  160A  158A  2289  160A  158A  	fcall	_I2C_Master_Stop
  8928                           
  8929                           ;DS3231.c: 42:     if (address == 0x02){
  8930     1ED7  3002               	movlw	2
  8931     1ED8  067C               	xorwf	leer_x@address,w
  8932     1ED9  1D03               	btfss	3,2
  8933     1EDA  2EDE               	goto	l4194
  8934                           
  8935                           ;DS3231.c: 43:         valor = convertir(valor, 1);
  8936     1EDB  01F4               	clrf	convertir@tipo
  8937     1EDC  0AF4               	incf	convertir@tipo,f
  8938     1EDD  2EE6               	goto	L13
  8939     1EDE                     l4194:	
  8940                           ;DS3231.c: 44:     }
  8941                           
  8942     1EDE  3005               	movlw	5
  8943     1EDF  067C               	xorwf	leer_x@address,w
  8944     1EE0  1D03               	btfss	3,2
  8945     1EE1  2EE5               	goto	l4198
  8946                           
  8947                           ;DS3231.c: 46:         valor = convertir(valor, 2);
  8948     1EE2  3002               	movlw	2
  8949     1EE3  00F4               	movwf	convertir@tipo
  8950     1EE4  2EE6               	goto	L13
  8951     1EE5                     l4198:	
  8952                           ;DS3231.c: 47:     }
  8953                           
  8954                           
  8955                           ;DS3231.c: 49:         valor = convertir(valor, 0);
  8956     1EE5  01F4               	clrf	convertir@tipo
  8957     1EE6                     L13:
  8958     1EE6  087D               	movf	leer_x@valor,w
  8959     1EE7  160A  158A  248E   	fcall	_convertir
  8960     1EEA  00FD               	movwf	leer_x@valor
  8961                           
  8962                           ;DS3231.c: 52:     return valor;
  8963     1EEB  087D               	movf	leer_x@valor,w
  8964     1EEC  0008               	return
  8965     1EED                     __end_of_leer_x:
  8966                           
  8967                           	psect	text25
  8968     1C8E                     __ptext25:	
  8969 ;; *************** function _convertir *****************
  8970 ;; Defined at:
  8971 ;;		line 5 in file "DS3231.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;  valor           1    wreg     unsigned char 
  8974 ;;  tipo            1    4[COMMON] unsigned char 
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;  valor           1    9[COMMON] unsigned char 
  8977 ;;  decena          1    8[COMMON] unsigned char 
  8978 ;;  unidad          1    7[COMMON] unsigned char 
  8979 ;;  conversion      1    6[COMMON] unsigned char 
  8980 ;; Return value:  Size  Location     Type
  8981 ;;                  1    wreg      unsigned char 
  8982 ;; Registers used:
  8983 ;;		wreg, status,2, status,0, pclath, cstack
  8984 ;; Tracked objects:
  8985 ;;		On entry : 300/100
  8986 ;;		On exit  : 300/100
  8987 ;;		Unchanged: 300/0
  8988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8989 ;;      Params:         1       0       0       0       0
  8990 ;;      Locals:         4       0       0       0       0
  8991 ;;      Temps:          1       0       0       0       0
  8992 ;;      Totals:         6       0       0       0       0
  8993 ;;Total ram usage:        6 bytes
  8994 ;; Hardware stack levels used: 1
  8995 ;; Hardware stack levels required when called: 1
  8996 ;; This function calls:
  8997 ;;		___bmul
  8998 ;; This function is called by:
  8999 ;;		_leer_x
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003     1C8E                     _convertir:	
  9004                           ;psect for function _convertir
  9005                           
  9006                           
  9007                           ;incstack = 0
  9008                           ; Regs used in _convertir: [wreg+status,2+status,0+pclath+cstack]
  9009                           ;convertir@valor stored from wreg
  9010     1C8E  00F9               	movwf	convertir@valor
  9011                           
  9012                           ;DS3231.c: 6:     uint8_t unidad;;DS3231.c: 7:     uint8_t decena;;DS3231.c: 8:     uint
      +                          8_t conversion;;DS3231.c: 9:     unidad = valor & 0x0F;
  9013     1C8F  0879               	movf	convertir@valor,w
  9014     1C90  390F               	andlw	15
  9015     1C91  00F7               	movwf	convertir@unidad
  9016                           
  9017                           ;DS3231.c: 11:     if (tipo == 0){
  9018     1C92  0874               	movf	convertir@tipo,w
  9019     1C93  1D03               	btfss	3,2
  9020     1C94  2CA0               	goto	l3578
  9021                           
  9022                           ;DS3231.c: 12:         decena = ((valor & 0xF0) >> 4);
  9023     1C95  0879               	movf	convertir@valor,w
  9024     1C96  00F5               	movwf	??_convertir
  9025     1C97  3004               	movlw	4
  9026     1C98                     u5205:
  9027     1C98  1003               	clrc
  9028     1C99  0CF5               	rrf	??_convertir,f
  9029     1C9A  3EFF               	addlw	-1
  9030     1C9B  1D03               	skipz
  9031     1C9C  2C98               	goto	u5205
  9032     1C9D  0875               	movf	??_convertir,w
  9033     1C9E  390F               	andlw	15
  9034     1C9F  2CBC               	goto	L14
  9035     1CA0                     l3578:	
  9036                           ;DS3231.c: 13:         conversion = unidad+(decena*10);}
  9037                           
  9038     1CA0  0374               	decf	convertir@tipo,w
  9039     1CA1  1D03               	btfss	3,2
  9040     1CA2  2CAE               	goto	l3584
  9041                           
  9042                           ;DS3231.c: 15:         decena = ((valor & 0x30) >> 4);
  9043     1CA3  0879               	movf	convertir@valor,w
  9044     1CA4  00F5               	movwf	??_convertir
  9045     1CA5  3004               	movlw	4
  9046     1CA6                     u5225:
  9047     1CA6  1003               	clrc
  9048     1CA7  0CF5               	rrf	??_convertir,f
  9049     1CA8  3EFF               	addlw	-1
  9050     1CA9  1D03               	skipz
  9051     1CAA  2CA6               	goto	u5225
  9052     1CAB  0875               	movf	??_convertir,w
  9053     1CAC  3903               	andlw	3
  9054     1CAD  2CBC               	goto	L14
  9055     1CAE                     l3584:	
  9056                           ;DS3231.c: 17:     }
  9057                           
  9058                           ;DS3231.c: 16:         conversion = unidad+(decena*10);
  9059                           
  9060     1CAE  3002               	movlw	2
  9061     1CAF  0674               	xorwf	convertir@tipo,w
  9062     1CB0  1D03               	btfss	3,2
  9063     1CB1  2CC5               	goto	l3590
  9064                           
  9065                           ;DS3231.c: 19:         decena = ((valor & 0x10) >> 4);
  9066     1CB2  0879               	movf	convertir@valor,w
  9067     1CB3  00F5               	movwf	??_convertir
  9068     1CB4  3004               	movlw	4
  9069     1CB5                     u5245:
  9070     1CB5  1003               	clrc
  9071     1CB6  0CF5               	rrf	??_convertir,f
  9072     1CB7  3EFF               	addlw	-1
  9073     1CB8  1D03               	skipz
  9074     1CB9  2CB5               	goto	u5245
  9075     1CBA  0875               	movf	??_convertir,w
  9076     1CBB  3901               	andlw	1
  9077     1CBC                     L14:
  9078     1CBC  00F8               	movwf	convertir@decena
  9079                           
  9080                           ;DS3231.c: 20:         conversion = unidad+(decena*10);
  9081     1CBD  300A               	movlw	10
  9082     1CBE  00F0               	movwf	___bmul@multiplicand
  9083     1CBF  0878               	movf	convertir@decena,w
  9084     1CC0  120A  118A  20BD   	fcall	___bmul
  9085     1CC3  0777               	addwf	convertir@unidad,w
  9086     1CC4  00F6               	movwf	convertir@conversion
  9087     1CC5                     l3590:
  9088                           
  9089                           ;DS3231.c: 22:     return conversion;
  9090     1CC5  0876               	movf	convertir@conversion,w
  9091     1CC6  0008               	return
  9092     1CC7                     __end_of_convertir:
  9093                           
  9094                           	psect	text26
  9095     00BD                     __ptext26:	
  9096 ;; *************** function ___bmul *****************
  9097 ;; Defined at:
  9098 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul8.c"
  9099 ;; Parameters:    Size  Location     Type
  9100 ;;  multiplier      1    wreg     unsigned char 
  9101 ;;  multiplicand    1    0[COMMON] unsigned char 
  9102 ;; Auto vars:     Size  Location     Type
  9103 ;;  multiplier      1    3[COMMON] unsigned char 
  9104 ;;  product         1    2[COMMON] unsigned char 
  9105 ;; Return value:  Size  Location     Type
  9106 ;;                  1    wreg      unsigned char 
  9107 ;; Registers used:
  9108 ;;		wreg, status,2, status,0
  9109 ;; Tracked objects:
  9110 ;;		On entry : 300/100
  9111 ;;		On exit  : 300/100
  9112 ;;		Unchanged: 300/0
  9113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9114 ;;      Params:         1       0       0       0       0
  9115 ;;      Locals:         2       0       0       0       0
  9116 ;;      Temps:          1       0       0       0       0
  9117 ;;      Totals:         4       0       0       0       0
  9118 ;;Total ram usage:        4 bytes
  9119 ;; Hardware stack levels used: 1
  9120 ;; This function calls:
  9121 ;;		Nothing
  9122 ;; This function is called by:
  9123 ;;		_convertir
  9124 ;; This function uses a non-reentrant model
  9125 ;;
  9126                           
  9127     00BD                     ___bmul:	
  9128                           ;psect for function ___bmul
  9129                           
  9130                           
  9131                           ;incstack = 0
  9132                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  9133                           ;___bmul@multiplier stored from wreg
  9134     00BD  00F3               	movwf	___bmul@multiplier
  9135     00BE  01F2               	clrf	___bmul@product
  9136     00BF                     l2890:
  9137     00BF  1C73               	btfss	___bmul@multiplier,0
  9138     00C0  28C5               	goto	l2894
  9139     00C1  0870               	movf	___bmul@multiplicand,w
  9140     00C2  00F1               	movwf	??___bmul
  9141     00C3  0871               	movf	??___bmul,w
  9142     00C4  07F2               	addwf	___bmul@product,f
  9143     00C5                     l2894:
  9144     00C5  1003               	clrc
  9145     00C6  0DF0               	rlf	___bmul@multiplicand,f
  9146     00C7  1003               	clrc
  9147     00C8  0CF3               	rrf	___bmul@multiplier,f
  9148     00C9  0873               	movf	___bmul@multiplier,w
  9149     00CA  1D03               	btfss	3,2
  9150     00CB  28BF               	goto	l2890
  9151     00CC  0872               	movf	___bmul@product,w
  9152     00CD  0008               	return
  9153     00CE                     __end_of___bmul:
  9154                           
  9155                           	psect	text27
  9156     1A8E                     __ptext27:	
  9157 ;; *************** function _I2C_Master_RepeatedStart *****************
  9158 ;; Defined at:
  9159 ;;		line 47 in file "I2C.c"
  9160 ;; Parameters:    Size  Location     Type
  9161 ;;		None
  9162 ;; Auto vars:     Size  Location     Type
  9163 ;;		None
  9164 ;; Return value:  Size  Location     Type
  9165 ;;                  1    wreg      void 
  9166 ;; Registers used:
  9167 ;;		wreg, status,2, status,0, pclath, cstack
  9168 ;; Tracked objects:
  9169 ;;		On entry : 300/0
  9170 ;;		On exit  : 300/100
  9171 ;;		Unchanged: 0/0
  9172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9173 ;;      Params:         0       0       0       0       0
  9174 ;;      Locals:         0       0       0       0       0
  9175 ;;      Temps:          0       0       0       0       0
  9176 ;;      Totals:         0       0       0       0       0
  9177 ;;Total ram usage:        0 bytes
  9178 ;; Hardware stack levels used: 1
  9179 ;; Hardware stack levels required when called: 1
  9180 ;; This function calls:
  9181 ;;		_I2C_Master_Wait
  9182 ;; This function is called by:
  9183 ;;		_leer_x
  9184 ;; This function uses a non-reentrant model
  9185 ;;
  9186                           
  9187     1A8E                     _I2C_Master_RepeatedStart:	
  9188                           ;psect for function _I2C_Master_RepeatedStart
  9189                           
  9190                           
  9191                           ;I2C.c: 49:     I2C_Master_Wait();
  9192                           
  9193                           ;incstack = 0
  9194                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  9195     1A8E  160A  158A  229A   	fcall	_I2C_Master_Wait
  9196                           
  9197                           ;I2C.c: 50:     SSPCON2bits.RSEN = 1;
  9198     1A91  1491               	bsf	17,1	;volatile
  9199     1A92  0008               	return
  9200     1A93                     __end_of_I2C_Master_RepeatedStart:
  9201                           
  9202                           	psect	text28
  9203     1BD5                     __ptext28:	
  9204 ;; *************** function _I2C_Master_Read *****************
  9205 ;; Defined at:
  9206 ;;		line 74 in file "I2C.c"
  9207 ;; Parameters:    Size  Location     Type
  9208 ;;  a               2    0[COMMON] unsigned short 
  9209 ;; Auto vars:     Size  Location     Type
  9210 ;;  temp            2    4[COMMON] unsigned short 
  9211 ;; Return value:  Size  Location     Type
  9212 ;;                  2    0[COMMON] unsigned short 
  9213 ;; Registers used:
  9214 ;;		wreg, status,2, status,0, pclath, cstack
  9215 ;; Tracked objects:
  9216 ;;		On entry : 300/0
  9217 ;;		On exit  : 300/100
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9220 ;;      Params:         2       0       0       0       0
  9221 ;;      Locals:         2       0       0       0       0
  9222 ;;      Temps:          2       0       0       0       0
  9223 ;;      Totals:         6       0       0       0       0
  9224 ;;Total ram usage:        6 bytes
  9225 ;; Hardware stack levels used: 1
  9226 ;; Hardware stack levels required when called: 1
  9227 ;; This function calls:
  9228 ;;		_I2C_Master_Wait
  9229 ;; This function is called by:
  9230 ;;		_main
  9231 ;;		_leer_x
  9232 ;; This function uses a non-reentrant model
  9233 ;;
  9234                           
  9235     1BD5                     _I2C_Master_Read:	
  9236                           ;psect for function _I2C_Master_Read
  9237                           
  9238                           
  9239                           ;I2C.c: 74: unsigned short I2C_Master_Read(unsigned short a);I2C.c: 75: {;I2C.c: 76:    
      +                           unsigned short temp;;I2C.c: 77:     I2C_Master_Wait();
  9240                           
  9241                           ;incstack = 0
  9242                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  9243     1BD5  160A  158A  229A  160A  158A  	fcall	_I2C_Master_Wait
  9244                           
  9245                           ;I2C.c: 78:     SSPCON2bits.RCEN = 1;
  9246     1BDA  1591               	bsf	17,3	;volatile
  9247                           
  9248                           ;I2C.c: 79:     I2C_Master_Wait();
  9249     1BDB  160A  158A  229A  160A  158A  	fcall	_I2C_Master_Wait
  9250                           
  9251                           ;I2C.c: 80:     temp = SSPBUF;
  9252     1BE0  1283               	bcf	3,5	;RP0=0, select bank0
  9253     1BE1  0813               	movf	19,w	;volatile
  9254     1BE2  00F2               	movwf	??_I2C_Master_Read
  9255     1BE3  01F3               	clrf	??_I2C_Master_Read+1
  9256     1BE4  0872               	movf	??_I2C_Master_Read,w
  9257     1BE5  00F4               	movwf	I2C_Master_Read@temp
  9258     1BE6  0873               	movf	??_I2C_Master_Read+1,w
  9259     1BE7  00F5               	movwf	I2C_Master_Read@temp+1
  9260                           
  9261                           ;I2C.c: 81:     I2C_Master_Wait();
  9262     1BE8  160A  158A  229A  160A  158A  	fcall	_I2C_Master_Wait
  9263                           
  9264                           ;I2C.c: 82:     if(a == 1){
  9265     1BED  0370               	decf	I2C_Master_Read@a,w
  9266     1BEE  0471               	iorwf	I2C_Master_Read@a+1,w
  9267     1BEF  1D03               	btfss	3,2
  9268     1BF0  2BF3               	goto	l305
  9269                           
  9270                           ;I2C.c: 83:         SSPCON2bits.ACKDT = 0;
  9271     1BF1  1291               	bcf	17,5	;volatile
  9272                           
  9273                           ;I2C.c: 84:     }else{
  9274     1BF2  2BF4               	goto	l306
  9275     1BF3                     l305:
  9276                           
  9277                           ;I2C.c: 85:         SSPCON2bits.ACKDT = 1;
  9278     1BF3  1691               	bsf	17,5	;volatile
  9279     1BF4                     l306:	
  9280                           ;I2C.c: 86:     }
  9281                           
  9282                           
  9283                           ;I2C.c: 87:     SSPCON2bits.ACKEN = 1;
  9284     1BF4  1611               	bsf	17,4	;volatile
  9285                           
  9286                           ;I2C.c: 88:     return temp;
  9287     1BF5  0875               	movf	I2C_Master_Read@temp+1,w
  9288     1BF6  00F1               	movwf	?_I2C_Master_Read+1
  9289     1BF7  0874               	movf	I2C_Master_Read@temp,w
  9290     1BF8  00F0               	movwf	?_I2C_Master_Read
  9291     1BF9  0008               	return
  9292     1BFA                     __end_of_I2C_Master_Read:
  9293                           
  9294                           	psect	text29
  9295     10AE                     __ptext29:	
  9296 ;; *************** function _enviar_x *****************
  9297 ;; Defined at:
  9298 ;;		line 55 in file "DS3231.c"
  9299 ;; Parameters:    Size  Location     Type
  9300 ;;  val1            1    wreg     unsigned char 
  9301 ;;  val2            1    2[COMMON] unsigned char 
  9302 ;;  val3            1    3[COMMON] unsigned char 
  9303 ;;  val4            1    4[COMMON] unsigned char 
  9304 ;;  val5            1    5[COMMON] unsigned char 
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;  val1            1    8[COMMON] unsigned char 
  9307 ;; Return value:  Size  Location     Type
  9308 ;;                  1    wreg      void 
  9309 ;; Registers used:
  9310 ;;		wreg, status,2, status,0, pclath, cstack
  9311 ;; Tracked objects:
  9312 ;;		On entry : 300/100
  9313 ;;		On exit  : 300/100
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9316 ;;      Params:         4       0       0       0       0
  9317 ;;      Locals:         1       0       0       0       0
  9318 ;;      Temps:          2       0       0       0       0
  9319 ;;      Totals:         7       0       0       0       0
  9320 ;;Total ram usage:        7 bytes
  9321 ;; Hardware stack levels used: 1
  9322 ;; Hardware stack levels required when called: 2
  9323 ;; This function calls:
  9324 ;;		_I2C_Master_Start
  9325 ;;		_I2C_Master_Stop
  9326 ;;		_I2C_Master_Write
  9327 ;; This function is called by:
  9328 ;;		_main
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332     10AE                     _enviar_x:	
  9333                           ;psect for function _enviar_x
  9334                           
  9335                           
  9336                           ;incstack = 0
  9337                           ; Regs used in _enviar_x: [wreg+status,2+status,0+pclath+cstack]
  9338                           ;enviar_x@val1 stored from wreg
  9339     10AE  00F8               	movwf	enviar_x@val1
  9340                           
  9341                           ;DS3231.c: 56:     I2C_Master_Start();
  9342     10AF  160A  158A  2284  160A  118A  	fcall	_I2C_Master_Start
  9343                           
  9344                           ;DS3231.c: 57:     I2C_Master_Write(0xD0);
  9345     10B4  30D0               	movlw	208
  9346     10B5  00F0               	movwf	I2C_Master_Write@d
  9347     10B6  3000               	movlw	0
  9348     10B7  00F1               	movwf	I2C_Master_Write@d+1
  9349     10B8  160A  158A  2293  160A  118A  	fcall	_I2C_Master_Write
  9350                           
  9351                           ;DS3231.c: 58:     I2C_Master_Write(0);
  9352     10BD  3000               	movlw	0
  9353     10BE  00F0               	movwf	I2C_Master_Write@d
  9354     10BF  00F1               	movwf	I2C_Master_Write@d+1
  9355     10C0  160A  158A  2293  160A  118A  	fcall	_I2C_Master_Write
  9356                           
  9357                           ;DS3231.c: 59:     I2C_Master_Write(0);
  9358     10C5  3000               	movlw	0
  9359     10C6  00F0               	movwf	I2C_Master_Write@d
  9360     10C7  00F1               	movwf	I2C_Master_Write@d+1
  9361     10C8  160A  158A  2293  160A  118A  	fcall	_I2C_Master_Write
  9362                           
  9363                           ;DS3231.c: 60:     I2C_Master_Write(val1);
  9364     10CD  0878               	movf	enviar_x@val1,w
  9365     10CE  00F6               	movwf	??_enviar_x
  9366     10CF  01F7               	clrf	??_enviar_x+1
  9367     10D0  0876               	movf	??_enviar_x,w
  9368     10D1  00F0               	movwf	I2C_Master_Write@d
  9369     10D2  0877               	movf	??_enviar_x+1,w
  9370     10D3  00F1               	movwf	I2C_Master_Write@d+1
  9371     10D4  160A  158A  2293  160A  118A  	fcall	_I2C_Master_Write
  9372                           
  9373                           ;DS3231.c: 61:     I2C_Master_Write(val2);
  9374     10D9  0872               	movf	enviar_x@val2,w
  9375     10DA  00F6               	movwf	??_enviar_x
  9376     10DB  01F7               	clrf	??_enviar_x+1
  9377     10DC  0876               	movf	??_enviar_x,w
  9378     10DD  00F0               	movwf	I2C_Master_Write@d
  9379     10DE  0877               	movf	??_enviar_x+1,w
  9380     10DF  00F1               	movwf	I2C_Master_Write@d+1
  9381     10E0  160A  158A  2293  160A  118A  	fcall	_I2C_Master_Write
  9382                           
  9383                           ;DS3231.c: 62:     I2C_Master_Write(1);
  9384     10E5  3001               	movlw	1
  9385     10E6  00F0               	movwf	I2C_Master_Write@d
  9386     10E7  3000               	movlw	0
  9387     10E8  00F1               	movwf	I2C_Master_Write@d+1
  9388     10E9  160A  158A  2293  160A  118A  	fcall	_I2C_Master_Write
  9389                           
  9390                           ;DS3231.c: 63:     I2C_Master_Write(val3);
  9391     10EE  0873               	movf	enviar_x@val3,w
  9392     10EF  00F6               	movwf	??_enviar_x
  9393     10F0  01F7               	clrf	??_enviar_x+1
  9394     10F1  0876               	movf	??_enviar_x,w
  9395     10F2  00F0               	movwf	I2C_Master_Write@d
  9396     10F3  0877               	movf	??_enviar_x+1,w
  9397     10F4  00F1               	movwf	I2C_Master_Write@d+1
  9398     10F5  160A  158A  2293  160A  118A  	fcall	_I2C_Master_Write
  9399                           
  9400                           ;DS3231.c: 64:     I2C_Master_Write(val4);
  9401     10FA  0874               	movf	enviar_x@val4,w
  9402     10FB  00F6               	movwf	??_enviar_x
  9403     10FC  01F7               	clrf	??_enviar_x+1
  9404     10FD  0876               	movf	??_enviar_x,w
  9405     10FE  00F0               	movwf	I2C_Master_Write@d
  9406     10FF  0877               	movf	??_enviar_x+1,w
  9407     1100  00F1               	movwf	I2C_Master_Write@d+1
  9408     1101  160A  158A  2293  160A  118A  	fcall	_I2C_Master_Write
  9409                           
  9410                           ;DS3231.c: 65:     I2C_Master_Write(val5);
  9411     1106  0875               	movf	enviar_x@val5,w
  9412     1107  00F6               	movwf	??_enviar_x
  9413     1108  01F7               	clrf	??_enviar_x+1
  9414     1109  0876               	movf	??_enviar_x,w
  9415     110A  00F0               	movwf	I2C_Master_Write@d
  9416     110B  0877               	movf	??_enviar_x+1,w
  9417     110C  00F1               	movwf	I2C_Master_Write@d+1
  9418     110D  160A  158A  2293  160A  118A  	fcall	_I2C_Master_Write
  9419                           
  9420                           ;DS3231.c: 66:     I2C_Master_Stop();
  9421     1112  160A  158A  2289   	fcall	_I2C_Master_Stop
  9422     1115  0008               	return
  9423     1116                     __end_of_enviar_x:
  9424                           
  9425                           	psect	text30
  9426     1A93                     __ptext30:	
  9427 ;; *************** function _I2C_Master_Write *****************
  9428 ;; Defined at:
  9429 ;;		line 65 in file "I2C.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;  d               2    0[COMMON] unsigned int 
  9432 ;; Auto vars:     Size  Location     Type
  9433 ;;		None
  9434 ;; Return value:  Size  Location     Type
  9435 ;;                  1    wreg      void 
  9436 ;; Registers used:
  9437 ;;		wreg, status,2, status,0, pclath, cstack
  9438 ;; Tracked objects:
  9439 ;;		On entry : 200/100
  9440 ;;		On exit  : 300/0
  9441 ;;		Unchanged: 0/0
  9442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9443 ;;      Params:         2       0       0       0       0
  9444 ;;      Locals:         0       0       0       0       0
  9445 ;;      Temps:          0       0       0       0       0
  9446 ;;      Totals:         2       0       0       0       0
  9447 ;;Total ram usage:        2 bytes
  9448 ;; Hardware stack levels used: 1
  9449 ;; Hardware stack levels required when called: 1
  9450 ;; This function calls:
  9451 ;;		_I2C_Master_Wait
  9452 ;; This function is called by:
  9453 ;;		_main
  9454 ;;		_leer_x
  9455 ;;		_enviar_x
  9456 ;; This function uses a non-reentrant model
  9457 ;;
  9458                           
  9459     1A93                     _I2C_Master_Write:	
  9460                           ;psect for function _I2C_Master_Write
  9461                           
  9462                           
  9463                           ;I2C.c: 65: void I2C_Master_Write(unsigned d);I2C.c: 66: {;I2C.c: 67:     I2C_Master_Wai
      +                          t();
  9464                           
  9465                           ;incstack = 0
  9466                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  9467     1A93  160A  158A  229A   	fcall	_I2C_Master_Wait
  9468                           
  9469                           ;I2C.c: 68:     SSPBUF = d;
  9470     1A96  0870               	movf	I2C_Master_Write@d,w
  9471     1A97  1283               	bcf	3,5	;RP0=0, select bank0
  9472     1A98  0093               	movwf	19	;volatile
  9473     1A99  0008               	return
  9474     1A9A                     __end_of_I2C_Master_Write:
  9475                           
  9476                           	psect	text31
  9477     1A89                     __ptext31:	
  9478 ;; *************** function _I2C_Master_Stop *****************
  9479 ;; Defined at:
  9480 ;;		line 55 in file "I2C.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;		None
  9485 ;; Return value:  Size  Location     Type
  9486 ;;                  1    wreg      void 
  9487 ;; Registers used:
  9488 ;;		wreg, status,2, status,0, pclath, cstack
  9489 ;; Tracked objects:
  9490 ;;		On entry : 200/100
  9491 ;;		On exit  : 300/100
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9494 ;;      Params:         0       0       0       0       0
  9495 ;;      Locals:         0       0       0       0       0
  9496 ;;      Temps:          0       0       0       0       0
  9497 ;;      Totals:         0       0       0       0       0
  9498 ;;Total ram usage:        0 bytes
  9499 ;; Hardware stack levels used: 1
  9500 ;; Hardware stack levels required when called: 1
  9501 ;; This function calls:
  9502 ;;		_I2C_Master_Wait
  9503 ;; This function is called by:
  9504 ;;		_main
  9505 ;;		_leer_x
  9506 ;;		_enviar_x
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510     1A89                     _I2C_Master_Stop:	
  9511                           ;psect for function _I2C_Master_Stop
  9512                           
  9513                           
  9514                           ;I2C.c: 57:     I2C_Master_Wait();
  9515                           
  9516                           ;incstack = 0
  9517                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  9518     1A89  160A  158A  229A   	fcall	_I2C_Master_Wait
  9519                           
  9520                           ;I2C.c: 58:     SSPCON2bits.PEN = 1;
  9521     1A8C  1511               	bsf	17,2	;volatile
  9522     1A8D  0008               	return
  9523     1A8E                     __end_of_I2C_Master_Stop:
  9524                           
  9525                           	psect	text32
  9526     1A84                     __ptext32:	
  9527 ;; *************** function _I2C_Master_Start *****************
  9528 ;; Defined at:
  9529 ;;		line 39 in file "I2C.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;		None
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;		None
  9534 ;; Return value:  Size  Location     Type
  9535 ;;                  1    wreg      void 
  9536 ;; Registers used:
  9537 ;;		wreg, status,2, status,0, pclath, cstack
  9538 ;; Tracked objects:
  9539 ;;		On entry : 200/0
  9540 ;;		On exit  : 300/100
  9541 ;;		Unchanged: 0/0
  9542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9543 ;;      Params:         0       0       0       0       0
  9544 ;;      Locals:         0       0       0       0       0
  9545 ;;      Temps:          0       0       0       0       0
  9546 ;;      Totals:         0       0       0       0       0
  9547 ;;Total ram usage:        0 bytes
  9548 ;; Hardware stack levels used: 1
  9549 ;; Hardware stack levels required when called: 1
  9550 ;; This function calls:
  9551 ;;		_I2C_Master_Wait
  9552 ;; This function is called by:
  9553 ;;		_main
  9554 ;;		_leer_x
  9555 ;;		_enviar_x
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559     1A84                     _I2C_Master_Start:	
  9560                           ;psect for function _I2C_Master_Start
  9561                           
  9562                           
  9563                           ;I2C.c: 41:     I2C_Master_Wait();
  9564                           
  9565                           ;incstack = 0
  9566                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  9567     1A84  160A  158A  229A   	fcall	_I2C_Master_Wait
  9568                           
  9569                           ;I2C.c: 42:     SSPCON2bits.SEN = 1;
  9570     1A87  1411               	bsf	17,0	;volatile
  9571     1A88  0008               	return
  9572     1A89                     __end_of_I2C_Master_Start:
  9573                           
  9574                           	psect	text33
  9575     1A9A                     __ptext33:	
  9576 ;; *************** function _I2C_Master_Wait *****************
  9577 ;; Defined at:
  9578 ;;		line 32 in file "I2C.c"
  9579 ;; Parameters:    Size  Location     Type
  9580 ;;		None
  9581 ;; Auto vars:     Size  Location     Type
  9582 ;;		None
  9583 ;; Return value:  Size  Location     Type
  9584 ;;                  1    wreg      void 
  9585 ;; Registers used:
  9586 ;;		wreg, status,2
  9587 ;; Tracked objects:
  9588 ;;		On entry : 200/0
  9589 ;;		On exit  : 300/100
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9592 ;;      Params:         0       0       0       0       0
  9593 ;;      Locals:         0       0       0       0       0
  9594 ;;      Temps:          0       0       0       0       0
  9595 ;;      Totals:         0       0       0       0       0
  9596 ;;Total ram usage:        0 bytes
  9597 ;; Hardware stack levels used: 1
  9598 ;; This function calls:
  9599 ;;		Nothing
  9600 ;; This function is called by:
  9601 ;;		_I2C_Master_Start
  9602 ;;		_I2C_Master_RepeatedStart
  9603 ;;		_I2C_Master_Stop
  9604 ;;		_I2C_Master_Write
  9605 ;;		_I2C_Master_Read
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609     1A9A                     _I2C_Master_Wait:	
  9610                           ;psect for function _I2C_Master_Wait
  9611                           
  9612     1A9A                     l287:	
  9613                           ;I2C.c: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  9614                           
  9615                           ;incstack = 0
  9616                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  9617                           
  9618     1A9A  1683               	bsf	3,5	;RP0=1, select bank1
  9619     1A9B  1914               	btfsc	20,2	;volatile
  9620     1A9C  2A9A               	goto	l287
  9621     1A9D  0811               	movf	17,w	;volatile
  9622     1A9E  391F               	andlw	31
  9623     1A9F  1903               	btfsc	3,2
  9624     1AA0  0008               	return
  9625     1AA1  2A9A               	goto	l287
  9626     1AA2                     __end_of_I2C_Master_Wait:
  9627                           
  9628                           	psect	text34
  9629     1B2E                     __ptext34:	
  9630 ;; *************** function _desconvertir *****************
  9631 ;; Defined at:
  9632 ;;		line 25 in file "DS3231.c"
  9633 ;; Parameters:    Size  Location     Type
  9634 ;;  valor           1    wreg     unsigned char 
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;  valor           1    1[BANK0 ] unsigned char 
  9637 ;;  decena          1    2[BANK0 ] unsigned char 
  9638 ;;  unidad          1    0[BANK0 ] unsigned char 
  9639 ;; Return value:  Size  Location     Type
  9640 ;;                  1    wreg      unsigned char 
  9641 ;; Registers used:
  9642 ;;		wreg, status,2, status,0, pclath, cstack
  9643 ;; Tracked objects:
  9644 ;;		On entry : 300/100
  9645 ;;		On exit  : 300/0
  9646 ;;		Unchanged: 0/0
  9647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9648 ;;      Params:         0       0       0       0       0
  9649 ;;      Locals:         0       3       0       0       0
  9650 ;;      Temps:          1       0       0       0       0
  9651 ;;      Totals:         1       3       0       0       0
  9652 ;;Total ram usage:        4 bytes
  9653 ;; Hardware stack levels used: 1
  9654 ;; Hardware stack levels required when called: 1
  9655 ;; This function calls:
  9656 ;;		___lbdiv
  9657 ;;		___lbmod
  9658 ;; This function is called by:
  9659 ;;		_main
  9660 ;; This function uses a non-reentrant model
  9661 ;;
  9662                           
  9663     1B2E                     _desconvertir:	
  9664                           ;psect for function _desconvertir
  9665                           
  9666                           
  9667                           ;incstack = 0
  9668                           ; Regs used in _desconvertir: [wreg+status,2+status,0+pclath+cstack]
  9669                           ;desconvertir@valor stored from wreg
  9670     1B2E  1283               	bcf	3,5	;RP0=0, select bank0
  9671     1B2F  00A1               	movwf	desconvertir@valor
  9672                           
  9673                           ;DS3231.c: 26:     uint8_t decena;;DS3231.c: 27:     uint8_t unidad;;DS3231.c: 28:     d
      +                          ecena = (valor/10);
  9674     1B30  300A               	movlw	10
  9675     1B31  00F6               	movwf	___lbdiv@divisor
  9676     1B32  0821               	movf	desconvertir@valor,w
  9677     1B33  160A  158A  234E  160A  158A  	fcall	___lbdiv
  9678     1B38  00A2               	movwf	desconvertir@decena
  9679                           
  9680                           ;DS3231.c: 29:     decena = (decena << 4);
  9681     1B39  0822               	movf	desconvertir@decena,w
  9682     1B3A  00FB               	movwf	??_desconvertir
  9683     1B3B  3003               	movlw	3
  9684     1B3C                     u6715:
  9685     1B3C  1003               	clrc
  9686     1B3D  0DFB               	rlf	??_desconvertir,f
  9687     1B3E  3EFF               	addlw	-1
  9688     1B3F  1D03               	skipz
  9689     1B40  2B3C               	goto	u6715
  9690     1B41  1003               	clrc
  9691     1B42  0D7B               	rlf	??_desconvertir,w
  9692     1B43  00A2               	movwf	desconvertir@decena
  9693                           
  9694                           ;DS3231.c: 30:     unidad = (valor%10);
  9695     1B44  300A               	movlw	10
  9696     1B45  00F0               	movwf	___lbmod@divisor
  9697     1B46  0821               	movf	desconvertir@valor,w
  9698     1B47  160A  158A  230F   	fcall	___lbmod
  9699     1B4A  00A0               	movwf	desconvertir@unidad
  9700                           
  9701                           ;DS3231.c: 31:     return (decena + unidad);
  9702     1B4B  0820               	movf	desconvertir@unidad,w
  9703     1B4C  0722               	addwf	desconvertir@decena,w
  9704     1B4D  0008               	return
  9705     1B4E                     __end_of_desconvertir:
  9706                           
  9707                           	psect	text35
  9708     1390                     __ptext35:	
  9709 ;; *************** function ___fldiv *****************
  9710 ;; Defined at:
  9711 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\sprcdiv.c"
  9712 ;; Parameters:    Size  Location     Type
  9713 ;;  a               4   30[BANK0 ] unsigned char 
  9714 ;;  b               4   34[BANK0 ] unsigned char 
  9715 ;; Auto vars:     Size  Location     Type
  9716 ;;  grs             4   50[BANK0 ] unsigned long 
  9717 ;;  rem             4   43[BANK0 ] unsigned long 
  9718 ;;  new_exp         2   48[BANK0 ] int 
  9719 ;;  aexp            1   55[BANK0 ] unsigned char 
  9720 ;;  bexp            1   54[BANK0 ] unsigned char 
  9721 ;;  sign            1   47[BANK0 ] unsigned char 
  9722 ;; Return value:  Size  Location     Type
  9723 ;;                  4   30[BANK0 ] unsigned char 
  9724 ;; Registers used:
  9725 ;;		wreg, status,2, status,0, btemp+1
  9726 ;; Tracked objects:
  9727 ;;		On entry : 300/0
  9728 ;;		On exit  : 300/0
  9729 ;;		Unchanged: 0/0
  9730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9731 ;;      Params:         0       8       0       0       0
  9732 ;;      Locals:         0      13       0       0       0
  9733 ;;      Temps:          0       5       0       0       0
  9734 ;;      Totals:         0      26       0       0       0
  9735 ;;Total ram usage:       26 bytes
  9736 ;; Hardware stack levels used: 1
  9737 ;; This function calls:
  9738 ;;		Nothing
  9739 ;; This function is called by:
  9740 ;;		_main
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744     1390                     ___fldiv:	
  9745                           ;psect for function ___fldiv
  9746                           
  9747                           
  9748                           ;incstack = 0
  9749                           ; Regs used in ___fldiv: [wreg+status,2+status,0+btemp+1]
  9750     1390  0845               	movf	___fldiv@b+3,w
  9751     1391  3980               	andlw	128
  9752     1392  00CF               	movwf	___fldiv@sign
  9753     1393  0845               	movf	___fldiv@b+3,w
  9754     1394  00C6               	movwf	??___fldiv
  9755     1395  0746               	addwf	??___fldiv,w
  9756     1396  00D6               	movwf	___fldiv@bexp
  9757     1397  1BC4               	btfsc	___fldiv@b+2,7
  9758     1398  1456               	bsf	___fldiv@bexp,0
  9759     1399  0856               	movf	___fldiv@bexp,w
  9760     139A  1903               	btfsc	3,2
  9761     139B  2BAA               	goto	l4232
  9762     139C  0A56               	incf	___fldiv@bexp,w
  9763     139D  1D03               	btfss	3,2
  9764     139E  2BA7               	goto	l4228
  9765     139F  3000               	movlw	0
  9766     13A0  00C5               	movwf	___fldiv@b+3
  9767     13A1  3000               	movlw	0
  9768     13A2  00C4               	movwf	___fldiv@b+2
  9769     13A3  3000               	movlw	0
  9770     13A4  00C3               	movwf	___fldiv@b+1
  9771     13A5  3000               	movlw	0
  9772     13A6  00C2               	movwf	___fldiv@b
  9773     13A7                     l4228:
  9774     13A7  17C4               	bsf	___fldiv@b+2,7
  9775     13A8  01C5               	clrf	___fldiv@b+3
  9776     13A9  2BB2               	goto	l4234
  9777     13AA                     l4232:
  9778     13AA  3000               	movlw	0
  9779     13AB  00C5               	movwf	___fldiv@b+3
  9780     13AC  3000               	movlw	0
  9781     13AD  00C4               	movwf	___fldiv@b+2
  9782     13AE  3000               	movlw	0
  9783     13AF  00C3               	movwf	___fldiv@b+1
  9784     13B0  3000               	movlw	0
  9785     13B1  00C2               	movwf	___fldiv@b
  9786     13B2                     l4234:
  9787     13B2  0841               	movf	___fldiv@a+3,w
  9788     13B3  3980               	andlw	128
  9789     13B4  00C6               	movwf	??___fldiv
  9790     13B5  0846               	movf	??___fldiv,w
  9791     13B6  06CF               	xorwf	___fldiv@sign,f
  9792     13B7  0841               	movf	___fldiv@a+3,w
  9793     13B8  00C6               	movwf	??___fldiv
  9794     13B9  0746               	addwf	??___fldiv,w
  9795     13BA  00D7               	movwf	___fldiv@aexp
  9796     13BB  1BC0               	btfsc	___fldiv@a+2,7
  9797     13BC  1457               	bsf	___fldiv@aexp,0
  9798     13BD  0857               	movf	___fldiv@aexp,w
  9799     13BE  1903               	btfsc	3,2
  9800     13BF  2BCE               	goto	l4252
  9801     13C0  0A57               	incf	___fldiv@aexp,w
  9802     13C1  1D03               	btfss	3,2
  9803     13C2  2BCB               	goto	l4248
  9804     13C3  3000               	movlw	0
  9805     13C4  00C1               	movwf	___fldiv@a+3
  9806     13C5  3000               	movlw	0
  9807     13C6  00C0               	movwf	___fldiv@a+2
  9808     13C7  3000               	movlw	0
  9809     13C8  00BF               	movwf	___fldiv@a+1
  9810     13C9  3000               	movlw	0
  9811     13CA  00BE               	movwf	___fldiv@a
  9812     13CB                     l4248:
  9813     13CB  17C0               	bsf	___fldiv@a+2,7
  9814     13CC  01C1               	clrf	___fldiv@a+3
  9815     13CD  2BD6               	goto	l900
  9816     13CE                     l4252:
  9817     13CE  3000               	movlw	0
  9818     13CF  00C1               	movwf	___fldiv@a+3
  9819     13D0  3000               	movlw	0
  9820     13D1  00C0               	movwf	___fldiv@a+2
  9821     13D2  3000               	movlw	0
  9822     13D3  00BF               	movwf	___fldiv@a+1
  9823     13D4  3000               	movlw	0
  9824     13D5  00BE               	movwf	___fldiv@a
  9825     13D6                     l900:
  9826     13D6  0841               	movf	___fldiv@a+3,w
  9827     13D7  0440               	iorwf	___fldiv@a+2,w
  9828     13D8  043F               	iorwf	___fldiv@a+1,w
  9829     13D9  043E               	iorwf	___fldiv@a,w
  9830     13DA  1D03               	skipz
  9831     13DB  2BF5               	goto	l4262
  9832     13DC  3000               	movlw	0
  9833     13DD  00C5               	movwf	___fldiv@b+3
  9834     13DE  3000               	movlw	0
  9835     13DF  00C4               	movwf	___fldiv@b+2
  9836     13E0  3000               	movlw	0
  9837     13E1  00C3               	movwf	___fldiv@b+1
  9838     13E2  3000               	movlw	0
  9839     13E3  00C2               	movwf	___fldiv@b
  9840     13E4  3080               	movlw	128
  9841     13E5  04C4               	iorwf	___fldiv@b+2,f
  9842     13E6  307F               	movlw	127
  9843     13E7  04C5               	iorwf	___fldiv@b+3,f
  9844     13E8                     L15:
  9845     13E8  084F               	movf	___fldiv@sign,w
  9846     13E9  00C6               	movwf	??___fldiv
  9847     13EA  0846               	movf	??___fldiv,w
  9848     13EB  04C5               	iorwf	___fldiv@b+3,f
  9849     13EC  0845               	movf	___fldiv@b+3,w
  9850     13ED  00C1               	movwf	?___fldiv+3
  9851     13EE  0844               	movf	___fldiv@b+2,w
  9852     13EF  00C0               	movwf	?___fldiv+2
  9853     13F0  0843               	movf	___fldiv@b+1,w
  9854     13F1  00BF               	movwf	?___fldiv+1
  9855     13F2  0842               	movf	___fldiv@b,w
  9856     13F3  00BE               	movwf	?___fldiv
  9857     13F4  0008               	return
  9858     13F5                     l4262:
  9859     13F5  0856               	movf	___fldiv@bexp,w
  9860     13F6  1D03               	btfss	3,2
  9861     13F7  2C01               	goto	l4268
  9862     13F8  3000               	movlw	0
  9863     13F9  00C1               	movwf	?___fldiv+3
  9864     13FA  3000               	movlw	0
  9865     13FB  00C0               	movwf	?___fldiv+2
  9866     13FC  3000               	movlw	0
  9867     13FD  00BF               	movwf	?___fldiv+1
  9868     13FE  3000               	movlw	0
  9869     13FF  00BE               	movwf	?___fldiv
  9870     1400  0008               	return
  9871     1401                     l4268:
  9872     1401  0856               	movf	___fldiv@bexp,w
  9873     1402  00C6               	movwf	??___fldiv
  9874     1403  01C7               	clrf	??___fldiv+1
  9875     1404  0847               	movf	??___fldiv+1,w
  9876     1405  00C9               	movwf	??___fldiv+3
  9877     1406  0857               	movf	___fldiv@aexp,w
  9878     1407  0246               	subwf	??___fldiv,w
  9879     1408  00C8               	movwf	??___fldiv+2
  9880     1409  1C03               	skipc
  9881     140A  03C9               	decf	??___fldiv+3,f
  9882     140B  0848               	movf	??___fldiv+2,w
  9883     140C  3E7F               	addlw	127
  9884     140D  00D0               	movwf	___fldiv@new_exp
  9885     140E  0849               	movf	??___fldiv+3,w
  9886     140F  1803               	skipnc
  9887     1410  3E01               	addlw	1
  9888     1411  3E00               	addlw	0
  9889     1412  00D1               	movwf	___fldiv@new_exp+1
  9890     1413  0845               	movf	___fldiv@b+3,w
  9891     1414  00CE               	movwf	___fldiv@rem+3
  9892     1415  0844               	movf	___fldiv@b+2,w
  9893     1416  00CD               	movwf	___fldiv@rem+2
  9894     1417  0843               	movf	___fldiv@b+1,w
  9895     1418  00CC               	movwf	___fldiv@rem+1
  9896     1419  0842               	movf	___fldiv@b,w
  9897     141A  00CB               	movwf	___fldiv@rem
  9898     141B  3000               	movlw	0
  9899     141C  00C5               	movwf	___fldiv@b+3
  9900     141D  3000               	movlw	0
  9901     141E  00C4               	movwf	___fldiv@b+2
  9902     141F  3000               	movlw	0
  9903     1420  00C3               	movwf	___fldiv@b+1
  9904     1421  3000               	movlw	0
  9905     1422  00C2               	movwf	___fldiv@b
  9906     1423  3000               	movlw	0
  9907     1424  00D5               	movwf	___fldiv@grs+3
  9908     1425  3000               	movlw	0
  9909     1426  00D4               	movwf	___fldiv@grs+2
  9910     1427  3000               	movlw	0
  9911     1428  00D3               	movwf	___fldiv@grs+1
  9912     1429  3000               	movlw	0
  9913     142A  00D2               	movwf	___fldiv@grs
  9914     142B  01D7               	clrf	___fldiv@aexp
  9915     142C                     l4296:
  9916     142C  301A               	movlw	26
  9917     142D  0257               	subwf	___fldiv@aexp,w
  9918     142E  1803               	btfsc	3,0
  9919     142F  2C74               	goto	l4298
  9920     1430  0857               	movf	___fldiv@aexp,w
  9921     1431  1903               	btfsc	3,2
  9922     1432  2C50               	goto	l4288
  9923     1433  3001               	movlw	1
  9924     1434  00C6               	movwf	??___fldiv
  9925     1435                     u6815:
  9926     1435  1003               	clrc
  9927     1436  0DCB               	rlf	___fldiv@rem,f
  9928     1437  0DCC               	rlf	___fldiv@rem+1,f
  9929     1438  0DCD               	rlf	___fldiv@rem+2,f
  9930     1439  0DCE               	rlf	___fldiv@rem+3,f
  9931     143A  0BC6               	decfsz	??___fldiv,f
  9932     143B  2C35               	goto	u6815
  9933     143C  3001               	movlw	1
  9934     143D  00C6               	movwf	??___fldiv
  9935     143E                     u6825:
  9936     143E  1003               	clrc
  9937     143F  0DC2               	rlf	___fldiv@b,f
  9938     1440  0DC3               	rlf	___fldiv@b+1,f
  9939     1441  0DC4               	rlf	___fldiv@b+2,f
  9940     1442  0DC5               	rlf	___fldiv@b+3,f
  9941     1443  0BC6               	decfsz	??___fldiv,f
  9942     1444  2C3E               	goto	u6825
  9943     1445  1BD5               	btfsc	___fldiv@grs+3,7
  9944     1446  1442               	bsf	___fldiv@b,0
  9945     1447  3001               	movlw	1
  9946     1448  00C6               	movwf	??___fldiv
  9947     1449                     u6845:
  9948     1449  1003               	clrc
  9949     144A  0DD2               	rlf	___fldiv@grs,f
  9950     144B  0DD3               	rlf	___fldiv@grs+1,f
  9951     144C  0DD4               	rlf	___fldiv@grs+2,f
  9952     144D  0DD5               	rlf	___fldiv@grs+3,f
  9953     144E  0BC6               	decfsz	??___fldiv,f
  9954     144F  2C49               	goto	u6845
  9955     1450                     l4288:
  9956     1450  0841               	movf	___fldiv@a+3,w
  9957     1451  024E               	subwf	___fldiv@rem+3,w
  9958     1452  1D03               	skipz
  9959     1453  2C5E               	goto	u6855
  9960     1454  0840               	movf	___fldiv@a+2,w
  9961     1455  024D               	subwf	___fldiv@rem+2,w
  9962     1456  1D03               	skipz
  9963     1457  2C5E               	goto	u6855
  9964     1458  083F               	movf	___fldiv@a+1,w
  9965     1459  024C               	subwf	___fldiv@rem+1,w
  9966     145A  1D03               	skipz
  9967     145B  2C5E               	goto	u6855
  9968     145C  083E               	movf	___fldiv@a,w
  9969     145D  024B               	subwf	___fldiv@rem,w
  9970     145E                     u6855:
  9971     145E  1C03               	skipc
  9972     145F  2C6F               	goto	l4294
  9973     1460  1755               	bsf	___fldiv@grs+3,6
  9974     1461  083E               	movf	___fldiv@a,w
  9975     1462  02CB               	subwf	___fldiv@rem,f
  9976     1463  083F               	movf	___fldiv@a+1,w
  9977     1464  1C03               	skipc
  9978     1465  0F3F               	incfsz	___fldiv@a+1,w
  9979     1466  02CC               	subwf	___fldiv@rem+1,f
  9980     1467  0840               	movf	___fldiv@a+2,w
  9981     1468  1C03               	skipc
  9982     1469  0F40               	incfsz	___fldiv@a+2,w
  9983     146A  02CD               	subwf	___fldiv@rem+2,f
  9984     146B  0841               	movf	___fldiv@a+3,w
  9985     146C  1C03               	skipc
  9986     146D  0F41               	incfsz	___fldiv@a+3,w
  9987     146E  02CE               	subwf	___fldiv@rem+3,f
  9988     146F                     l4294:
  9989     146F  3001               	movlw	1
  9990     1470  00C6               	movwf	??___fldiv
  9991     1471  0846               	movf	??___fldiv,w
  9992     1472  07D7               	addwf	___fldiv@aexp,f
  9993     1473  2C2C               	goto	l4296
  9994     1474                     l4298:
  9995     1474  084E               	movf	___fldiv@rem+3,w
  9996     1475  044D               	iorwf	___fldiv@rem+2,w
  9997     1476  044C               	iorwf	___fldiv@rem+1,w
  9998     1477  044B               	iorwf	___fldiv@rem,w
  9999     1478  1D03               	btfss	3,2
 10000     1479  1452               	bsf	___fldiv@grs,0
 10001     147A                     l4312:
 10002     147A  1BC4               	btfsc	___fldiv@b+2,7
 10003     147B  2C97               	goto	l4314
 10004     147C  3001               	movlw	1
 10005     147D  00C6               	movwf	??___fldiv
 10006     147E                     u6885:
 10007     147E  1003               	clrc
 10008     147F  0DC2               	rlf	___fldiv@b,f
 10009     1480  0DC3               	rlf	___fldiv@b+1,f
 10010     1481  0DC4               	rlf	___fldiv@b+2,f
 10011     1482  0DC5               	rlf	___fldiv@b+3,f
 10012     1483  0BC6               	decfsz	??___fldiv,f
 10013     1484  2C7E               	goto	u6885
 10014     1485  1BD5               	btfsc	___fldiv@grs+3,7
 10015     1486  1442               	bsf	___fldiv@b,0
 10016     1487  3001               	movlw	1
 10017     1488  00C6               	movwf	??___fldiv
 10018     1489                     u6905:
 10019     1489  1003               	clrc
 10020     148A  0DD2               	rlf	___fldiv@grs,f
 10021     148B  0DD3               	rlf	___fldiv@grs+1,f
 10022     148C  0DD4               	rlf	___fldiv@grs+2,f
 10023     148D  0DD5               	rlf	___fldiv@grs+3,f
 10024     148E  0BC6               	decfsz	??___fldiv,f
 10025     148F  2C89               	goto	u6905
 10026     1490  30FF               	movlw	255
 10027     1491  07D0               	addwf	___fldiv@new_exp,f
 10028     1492  1803               	skipnc
 10029     1493  0AD1               	incf	___fldiv@new_exp+1,f
 10030     1494  30FF               	movlw	255
 10031     1495  07D1               	addwf	___fldiv@new_exp+1,f
 10032     1496  2C7A               	goto	l4312
 10033     1497                     l4314:
 10034     1497  01D7               	clrf	___fldiv@aexp
 10035     1498  1FD5               	btfss	___fldiv@grs+3,7
 10036     1499  2CB0               	goto	l4324
 10037     149A  30FF               	movlw	255
 10038     149B  0552               	andwf	___fldiv@grs,w
 10039     149C  00C6               	movwf	??___fldiv
 10040     149D  30FF               	movlw	255
 10041     149E  0553               	andwf	___fldiv@grs+1,w
 10042     149F  00C7               	movwf	??___fldiv+1
 10043     14A0  30FF               	movlw	255
 10044     14A1  0554               	andwf	___fldiv@grs+2,w
 10045     14A2  00C8               	movwf	??___fldiv+2
 10046     14A3  307F               	movlw	127
 10047     14A4  0555               	andwf	___fldiv@grs+3,w
 10048     14A5  00C9               	movwf	??___fldiv+3
 10049     14A6  0849               	movf	??___fldiv+3,w
 10050     14A7  0448               	iorwf	??___fldiv+2,w
 10051     14A8  0447               	iorwf	??___fldiv+1,w
 10052     14A9  0446               	iorwf	??___fldiv,w
 10053     14AA  1903               	skipnz
 10054     14AB  1842               	btfsc	___fldiv@b,0
 10055     14AC  2CAE               	goto	l4320
 10056     14AD  2CB0               	goto	l4324
 10057     14AE                     l4320:
 10058     14AE  01D7               	clrf	___fldiv@aexp
 10059     14AF  0AD7               	incf	___fldiv@aexp,f
 10060     14B0                     l4324:
 10061     14B0  0857               	movf	___fldiv@aexp,w
 10062     14B1  1903               	btfsc	3,2
 10063     14B2  2CE2               	goto	l4334
 10064     14B3  3001               	movlw	1
 10065     14B4  07C2               	addwf	___fldiv@b,f
 10066     14B5  3000               	movlw	0
 10067     14B6  1803               	skipnc
 10068     14B7  3001               	movlw	1
 10069     14B8  07C3               	addwf	___fldiv@b+1,f
 10070     14B9  3000               	movlw	0
 10071     14BA  1803               	skipnc
 10072     14BB  3001               	movlw	1
 10073     14BC  07C4               	addwf	___fldiv@b+2,f
 10074     14BD  3000               	movlw	0
 10075     14BE  1803               	skipnc
 10076     14BF  3001               	movlw	1
 10077     14C0  07C5               	addwf	___fldiv@b+3,f
 10078     14C1  1C45               	btfss	___fldiv@b+3,0
 10079     14C2  2CE2               	goto	l4334
 10080     14C3  0842               	movf	___fldiv@b,w
 10081     14C4  00C6               	movwf	??___fldiv
 10082     14C5  0843               	movf	___fldiv@b+1,w
 10083     14C6  00C7               	movwf	??___fldiv+1
 10084     14C7  0844               	movf	___fldiv@b+2,w
 10085     14C8  00C8               	movwf	??___fldiv+2
 10086     14C9  0845               	movf	___fldiv@b+3,w
 10087     14CA  00C9               	movwf	??___fldiv+3
 10088     14CB  3001               	movlw	1
 10089     14CC  00CA               	movwf	??___fldiv+4
 10090     14CD                     u6975:
 10091     14CD  0D49               	rlf	??___fldiv+3,w
 10092     14CE  0CC9               	rrf	??___fldiv+3,f
 10093     14CF  0CC8               	rrf	??___fldiv+2,f
 10094     14D0  0CC7               	rrf	??___fldiv+1,f
 10095     14D1  0CC6               	rrf	??___fldiv,f
 10096     14D2  0BCA               	decfsz	??___fldiv+4,f
 10097     14D3  2CCD               	goto	u6975
 10098     14D4  0849               	movf	??___fldiv+3,w
 10099     14D5  00C5               	movwf	___fldiv@b+3
 10100     14D6  0848               	movf	??___fldiv+2,w
 10101     14D7  00C4               	movwf	___fldiv@b+2
 10102     14D8  0847               	movf	??___fldiv+1,w
 10103     14D9  00C3               	movwf	___fldiv@b+1
 10104     14DA  0846               	movf	??___fldiv,w
 10105     14DB  00C2               	movwf	___fldiv@b
 10106     14DC  3001               	movlw	1
 10107     14DD  07D0               	addwf	___fldiv@new_exp,f
 10108     14DE  1803               	skipnc
 10109     14DF  0AD1               	incf	___fldiv@new_exp+1,f
 10110     14E0  3000               	movlw	0
 10111     14E1  07D1               	addwf	___fldiv@new_exp+1,f
 10112     14E2                     l4334:
 10113     14E2  0851               	movf	___fldiv@new_exp+1,w
 10114     14E3  3A80               	xorlw	128
 10115     14E4  00FF               	movwf	127
 10116     14E5  3080               	movlw	128
 10117     14E6  027F               	subwf	127,w
 10118     14E7  1D03               	skipz
 10119     14E8  2CEB               	goto	u6985
 10120     14E9  30FF               	movlw	255
 10121     14EA  0250               	subwf	___fldiv@new_exp,w
 10122     14EB                     u6985:
 10123     14EB  1C03               	skipc
 10124     14EC  2CFB               	goto	l4338
 10125     14ED  30FF               	movlw	255
 10126     14EE  1283               	bcf	3,5	;RP0=0, select bank0
 10127     14EF  1303               	bcf	3,6	;RP1=0, select bank0
 10128     14F0  00D0               	movwf	___fldiv@new_exp
 10129     14F1  3000               	movlw	0
 10130     14F2  00D1               	movwf	___fldiv@new_exp+1
 10131     14F3  3000               	movlw	0
 10132     14F4  00C5               	movwf	___fldiv@b+3
 10133     14F5  3000               	movlw	0
 10134     14F6  00C4               	movwf	___fldiv@b+2
 10135     14F7  3000               	movlw	0
 10136     14F8  00C3               	movwf	___fldiv@b+1
 10137     14F9  3000               	movlw	0
 10138     14FA  00C2               	movwf	___fldiv@b
 10139     14FB                     l4338:
 10140     14FB  1283               	bcf	3,5	;RP0=0, select bank0
 10141     14FC  1303               	bcf	3,6	;RP1=0, select bank0
 10142     14FD  0851               	movf	___fldiv@new_exp+1,w
 10143     14FE  3A80               	xorlw	128
 10144     14FF  00FF               	movwf	127
 10145     1500  3080               	movlw	128
 10146     1501  027F               	subwf	127,w
 10147     1502  1D03               	skipz
 10148     1503  2D06               	goto	u6995
 10149     1504  3001               	movlw	1
 10150     1505  0250               	subwf	___fldiv@new_exp,w
 10151     1506                     u6995:
 10152     1506  1803               	skipnc
 10153     1507  2D15               	goto	l922
 10154     1508  1283               	bcf	3,5	;RP0=0, select bank0
 10155     1509  1303               	bcf	3,6	;RP1=0, select bank0
 10156     150A  01D0               	clrf	___fldiv@new_exp
 10157     150B  01D1               	clrf	___fldiv@new_exp+1
 10158     150C  3000               	movlw	0
 10159     150D  00C5               	movwf	___fldiv@b+3
 10160     150E  3000               	movlw	0
 10161     150F  00C4               	movwf	___fldiv@b+2
 10162     1510  3000               	movlw	0
 10163     1511  00C3               	movwf	___fldiv@b+1
 10164     1512  3000               	movlw	0
 10165     1513  00C2               	movwf	___fldiv@b
 10166     1514  01CF               	clrf	___fldiv@sign
 10167     1515                     l922:
 10168     1515  1283               	bcf	3,5	;RP0=0, select bank0
 10169     1516  1303               	bcf	3,6	;RP1=0, select bank0
 10170     1517  0850               	movf	___fldiv@new_exp,w
 10171     1518  00D6               	movwf	___fldiv@bexp
 10172     1519  1C56               	btfss	___fldiv@bexp,0
 10173     151A  2D1D               	goto	l4350
 10174     151B  17C4               	bsf	___fldiv@b+2,7
 10175     151C  2D21               	goto	l924
 10176     151D                     l4350:
 10177     151D  307F               	movlw	127
 10178     151E  00C6               	movwf	??___fldiv
 10179     151F  0846               	movf	??___fldiv,w
 10180     1520  05C4               	andwf	___fldiv@b+2,f
 10181     1521                     l924:
 10182     1521  0856               	movf	___fldiv@bexp,w
 10183     1522  00C6               	movwf	??___fldiv
 10184     1523  1003               	clrc
 10185     1524  0C46               	rrf	??___fldiv,w
 10186     1525  00C5               	movwf	___fldiv@b+3
 10187     1526  2BE8               	goto	L15
 10188     1527                     __end_of___fldiv:
 10189                           
 10190                           	psect	text36
 10191     1D02                     __ptext36:	
 10192 ;; *************** function _Lcd_Write_String *****************
 10193 ;; Defined at:
 10194 ;;		line 98 in file "LCD.c"
 10195 ;; Parameters:    Size  Location     Type
 10196 ;;  a               2    5[COMMON] PTR unsigned char 
 10197 ;;		 -> valADC(3), STR_4(5), STR_3(5), STR_2(6), 
 10198 ;;		 -> STR_1(5), 
 10199 ;; Auto vars:     Size  Location     Type
 10200 ;;  i               2   10[COMMON] int 
 10201 ;; Return value:  Size  Location     Type
 10202 ;;                  1    wreg      void 
 10203 ;; Registers used:
 10204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10205 ;; Tracked objects:
 10206 ;;		On entry : 200/0
 10207 ;;		On exit  : 300/0
 10208 ;;		Unchanged: 0/0
 10209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10210 ;;      Params:         2       0       0       0       0
 10211 ;;      Locals:         2       0       0       0       0
 10212 ;;      Temps:          3       0       0       0       0
 10213 ;;      Totals:         7       0       0       0       0
 10214 ;;Total ram usage:        7 bytes
 10215 ;; Hardware stack levels used: 1
 10216 ;; Hardware stack levels required when called: 2
 10217 ;; This function calls:
 10218 ;;		_Lcd_Write_Char
 10219 ;; This function is called by:
 10220 ;;		_main
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224     1D02                     _Lcd_Write_String:	
 10225                           ;psect for function _Lcd_Write_String
 10226                           
 10227                           
 10228                           ;LCD.c: 99:     int i;;LCD.c: 100:     for (i = 0; a[i] != '\0'; i++)
 10229                           
 10230                           ;incstack = 0
 10231                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10232     1D02  01FA               	clrf	Lcd_Write_String@i
 10233     1D03  01FB               	clrf	Lcd_Write_String@i+1
 10234     1D04                     l3978:
 10235     1D04  087A               	movf	Lcd_Write_String@i,w
 10236     1D05  0775               	addwf	Lcd_Write_String@a,w
 10237     1D06  00F8               	movwf	??_Lcd_Write_String+1
 10238     1D07  0876               	movf	Lcd_Write_String@a+1,w
 10239     1D08  00F7               	movwf	??_Lcd_Write_String
 10240     1D09  1803               	skipnc
 10241     1D0A  0AF7               	incf	??_Lcd_Write_String,f
 10242     1D0B  1BFA               	btfsc	Lcd_Write_String@i,7
 10243     1D0C  03F7               	decf	??_Lcd_Write_String,f
 10244     1D0D  0877               	movf	??_Lcd_Write_String,w
 10245     1D0E  00F9               	movwf	??_Lcd_Write_String+2
 10246     1D0F  0879               	movf	??_Lcd_Write_String+2,w
 10247     1D10  1283               	bcf	3,5	;RP0=0, select bank0
 10248     1D11  1303               	bcf	3,6	;RP1=0, select bank0
 10249     1D12  00FF               	movwf	127
 10250     1D13  0878               	movf	??_Lcd_Write_String+1,w
 10251     1D14  0084               	movwf	4
 10252     1D15  120A  118A  2003  160A  158A  	fcall	stringtab
 10253     1D1A  3A00               	xorlw	0
 10254     1D1B  1903               	btfsc	3,2
 10255     1D1C  0008               	return
 10256                           
 10257                           ;LCD.c: 101:         Lcd_Write_Char(a[i]);
 10258     1D1D  087A               	movf	Lcd_Write_String@i,w
 10259     1D1E  0775               	addwf	Lcd_Write_String@a,w
 10260     1D1F  00F8               	movwf	??_Lcd_Write_String+1
 10261     1D20  0876               	movf	Lcd_Write_String@a+1,w
 10262     1D21  00F7               	movwf	??_Lcd_Write_String
 10263     1D22  1803               	skipnc
 10264     1D23  0AF7               	incf	??_Lcd_Write_String,f
 10265     1D24  1BFA               	btfsc	Lcd_Write_String@i,7
 10266     1D25  03F7               	decf	??_Lcd_Write_String,f
 10267     1D26  0877               	movf	??_Lcd_Write_String,w
 10268     1D27  00F9               	movwf	??_Lcd_Write_String+2
 10269     1D28  0879               	movf	??_Lcd_Write_String+2,w
 10270     1D29  1283               	bcf	3,5	;RP0=0, select bank0
 10271     1D2A  1303               	bcf	3,6	;RP1=0, select bank0
 10272     1D2B  00FF               	movwf	127
 10273     1D2C  0878               	movf	??_Lcd_Write_String+1,w
 10274     1D2D  0084               	movwf	4
 10275     1D2E  120A  118A  2003  160A  158A  	fcall	stringtab
 10276     1D33  160A  158A  23FA  160A  158A  	fcall	_Lcd_Write_Char
 10277     1D38  3001               	movlw	1
 10278     1D39  07FA               	addwf	Lcd_Write_String@i,f
 10279     1D3A  1803               	skipnc
 10280     1D3B  0AFB               	incf	Lcd_Write_String@i+1,f
 10281     1D3C  3000               	movlw	0
 10282     1D3D  07FB               	addwf	Lcd_Write_String@i+1,f
 10283     1D3E  2D04               	goto	l3978
 10284     1D3F                     __end_of_Lcd_Write_String:
 10285                           
 10286                           	psect	text37
 10287     1F47                     __ptext37:	
 10288 ;; *************** function _Lcd_Init *****************
 10289 ;; Defined at:
 10290 ;;		line 65 in file "LCD.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;		None
 10293 ;; Auto vars:     Size  Location     Type
 10294 ;;		None
 10295 ;; Return value:  Size  Location     Type
 10296 ;;                  1    wreg      void 
 10297 ;; Registers used:
 10298 ;;		wreg, status,2, status,0, pclath, cstack
 10299 ;; Tracked objects:
 10300 ;;		On entry : 300/100
 10301 ;;		On exit  : 300/0
 10302 ;;		Unchanged: 0/0
 10303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10304 ;;      Params:         0       0       0       0       0
 10305 ;;      Locals:         0       0       0       0       0
 10306 ;;      Temps:          2       0       0       0       0
 10307 ;;      Totals:         2       0       0       0       0
 10308 ;;Total ram usage:        2 bytes
 10309 ;; Hardware stack levels used: 1
 10310 ;; Hardware stack levels required when called: 2
 10311 ;; This function calls:
 10312 ;;		_Lcd_Cmd
 10313 ;;		_Lcd_Port
 10314 ;; This function is called by:
 10315 ;;		_main
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319     1F47                     _Lcd_Init:	
 10320                           ;psect for function _Lcd_Init
 10321                           
 10322                           
 10323                           ;LCD.c: 66:     Lcd_Port(0x00);
 10324                           
 10325                           ;incstack = 0
 10326                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
 10327     1F47  3000               	movlw	0
 10328     1F48  160A  158A  22C1  160A  158A  	fcall	_Lcd_Port
 10329                           
 10330                           ;LCD.c: 67:     _delay((unsigned long)((20)*(8000000/4000.0)));
 10331     1F4D  3034               	movlw	52
 10332     1F4E  00F5               	movwf	??_Lcd_Init+1
 10333     1F4F  30F1               	movlw	241
 10334     1F50  00F4               	movwf	??_Lcd_Init
 10335     1F51                     u7497:
 10336     1F51  0BF4               	decfsz	??_Lcd_Init,f
 10337     1F52  2F51               	goto	u7497
 10338     1F53  0BF5               	decfsz	??_Lcd_Init+1,f
 10339     1F54  2F51               	goto	u7497
 10340     1F55  2F56               	nop2
 10341                           
 10342                           ;LCD.c: 68:     Lcd_Cmd(0x03);
 10343     1F56  3003               	movlw	3
 10344     1F57  160A  158A  22D9  160A  158A  	fcall	_Lcd_Cmd
 10345                           
 10346                           ;LCD.c: 69:     _delay((unsigned long)((5)*(8000000/4000.0)));
 10347     1F5C  300D               	movlw	13
 10348     1F5D  00F5               	movwf	??_Lcd_Init+1
 10349     1F5E  30FB               	movlw	251
 10350     1F5F  00F4               	movwf	??_Lcd_Init
 10351     1F60                     u7507:
 10352     1F60  0BF4               	decfsz	??_Lcd_Init,f
 10353     1F61  2F60               	goto	u7507
 10354     1F62  0BF5               	decfsz	??_Lcd_Init+1,f
 10355     1F63  2F60               	goto	u7507
 10356     1F64  2F65               	nop2
 10357                           
 10358                           ;LCD.c: 70:     Lcd_Cmd(0x03);
 10359     1F65  3003               	movlw	3
 10360     1F66  160A  158A  22D9  160A  158A  	fcall	_Lcd_Cmd
 10361                           
 10362                           ;LCD.c: 71:     _delay((unsigned long)((11)*(8000000/4000.0)));
 10363     1F6B  301D               	movlw	29
 10364     1F6C  00F5               	movwf	??_Lcd_Init+1
 10365     1F6D  3091               	movlw	145
 10366     1F6E  00F4               	movwf	??_Lcd_Init
 10367     1F6F                     u7517:
 10368     1F6F  0BF4               	decfsz	??_Lcd_Init,f
 10369     1F70  2F6F               	goto	u7517
 10370     1F71  0BF5               	decfsz	??_Lcd_Init+1,f
 10371     1F72  2F6F               	goto	u7517
 10372                           
 10373                           ;LCD.c: 72:     Lcd_Cmd(0x03);
 10374     1F73  3003               	movlw	3
 10375     1F74  160A  158A  22D9  160A  158A  	fcall	_Lcd_Cmd
 10376                           
 10377                           ;LCD.c: 74:     Lcd_Cmd(0x02);
 10378     1F79  3002               	movlw	2
 10379     1F7A  160A  158A  22D9  160A  158A  	fcall	_Lcd_Cmd
 10380                           
 10381                           ;LCD.c: 75:     Lcd_Cmd(0x02);
 10382     1F7F  3002               	movlw	2
 10383     1F80  160A  158A  22D9  160A  158A  	fcall	_Lcd_Cmd
 10384                           
 10385                           ;LCD.c: 76:     Lcd_Cmd(0x08);
 10386     1F85  3008               	movlw	8
 10387     1F86  160A  158A  22D9  160A  158A  	fcall	_Lcd_Cmd
 10388                           
 10389                           ;LCD.c: 77:     Lcd_Cmd(0x00);
 10390     1F8B  3000               	movlw	0
 10391     1F8C  160A  158A  22D9  160A  158A  	fcall	_Lcd_Cmd
 10392                           
 10393                           ;LCD.c: 78:     Lcd_Cmd(0x0C);
 10394     1F91  300C               	movlw	12
 10395     1F92  160A  158A  22D9  160A  158A  	fcall	_Lcd_Cmd
 10396                           
 10397                           ;LCD.c: 79:     Lcd_Cmd(0x00);
 10398     1F97  3000               	movlw	0
 10399     1F98  160A  158A  22D9  160A  158A  	fcall	_Lcd_Cmd
 10400                           
 10401                           ;LCD.c: 80:     Lcd_Cmd(0x06);
 10402     1F9D  3006               	movlw	6
 10403     1F9E  160A  158A  22D9   	fcall	_Lcd_Cmd
 10404     1FA1  0008               	return
 10405     1FA2                     __end_of_Lcd_Init:
 10406                           
 10407                           	psect	text38
 10408     0801                     __ptext38:	
 10409 ;; *************** function _Lcd_Clear *****************
 10410 ;; Defined at:
 10411 ;;		line 43 in file "LCD.c"
 10412 ;; Parameters:    Size  Location     Type
 10413 ;;		None
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;		None
 10416 ;; Return value:  Size  Location     Type
 10417 ;;                  1    wreg      void 
 10418 ;; Registers used:
 10419 ;;		wreg, status,2, status,0, pclath, cstack
 10420 ;; Tracked objects:
 10421 ;;		On entry : 300/0
 10422 ;;		On exit  : 300/0
 10423 ;;		Unchanged: 0/0
 10424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10425 ;;      Params:         0       0       0       0       0
 10426 ;;      Locals:         0       0       0       0       0
 10427 ;;      Temps:          0       0       0       0       0
 10428 ;;      Totals:         0       0       0       0       0
 10429 ;;Total ram usage:        0 bytes
 10430 ;; Hardware stack levels used: 1
 10431 ;; Hardware stack levels required when called: 2
 10432 ;; This function calls:
 10433 ;;		_Lcd_Cmd
 10434 ;; This function is called by:
 10435 ;;		_main
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439     0801                     _Lcd_Clear:	
 10440                           ;psect for function _Lcd_Clear
 10441                           
 10442                           
 10443                           ;LCD.c: 44:     Lcd_Cmd(0);
 10444                           
 10445                           ;incstack = 0
 10446                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
 10447     0801  3000               	movlw	0
 10448     0802  160A  158A  22D9  120A  158A  	fcall	_Lcd_Cmd
 10449                           
 10450                           ;LCD.c: 45:     Lcd_Cmd(1);
 10451     0807  3001               	movlw	1
 10452     0808  160A  158A  22D9   	fcall	_Lcd_Cmd
 10453     080B  0008               	return
 10454     080C                     __end_of_Lcd_Clear:
 10455                           
 10456                           	psect	text39
 10457     1D7D                     __ptext39:	
 10458 ;; *************** function _Escribir_dato *****************
 10459 ;; Defined at:
 10460 ;;		line 301 in file "main.c"
 10461 ;; Parameters:    Size  Location     Type
 10462 ;;  dato            1    wreg     unsigned char 
 10463 ;;  posx            1    3[BANK0 ] unsigned char 
 10464 ;;  posy            1    4[BANK0 ] unsigned char 
 10465 ;; Auto vars:     Size  Location     Type
 10466 ;;  dato            1    5[BANK0 ] unsigned char 
 10467 ;; Return value:  Size  Location     Type
 10468 ;;                  1    wreg      void 
 10469 ;; Registers used:
 10470 ;;		wreg, status,2, status,0, pclath, cstack
 10471 ;; Tracked objects:
 10472 ;;		On entry : 300/100
 10473 ;;		On exit  : 300/0
 10474 ;;		Unchanged: 0/0
 10475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10476 ;;      Params:         0       2       0       0       0
 10477 ;;      Locals:         0       1       0       0       0
 10478 ;;      Temps:          0       0       0       0       0
 10479 ;;      Totals:         0       3       0       0       0
 10480 ;;Total ram usage:        3 bytes
 10481 ;; Hardware stack levels used: 1
 10482 ;; Hardware stack levels required when called: 3
 10483 ;; This function calls:
 10484 ;;		_Lcd_Set_Cursor
 10485 ;;		_Lcd_Write_Char
 10486 ;;		_descomponer
 10487 ;;		_inttochar
 10488 ;; This function is called by:
 10489 ;;		_main
 10490 ;; This function uses a non-reentrant model
 10491 ;;
 10492                           
 10493     1D7D                     _Escribir_dato:	
 10494                           ;psect for function _Escribir_dato
 10495                           
 10496                           
 10497                           ;incstack = 0
 10498                           ; Regs used in _Escribir_dato: [wreg+status,2+status,0+pclath+cstack]
 10499                           ;Escribir_dato@dato stored from wreg
 10500     1D7D  1283               	bcf	3,5	;RP0=0, select bank0
 10501     1D7E  00A5               	movwf	Escribir_dato@dato
 10502                           
 10503                           ;main.c: 302:     Lcd_Set_Cursor(posy, posx+1);
 10504     1D7F  0823               	movf	Escribir_dato@posx,w
 10505     1D80  3E01               	addlw	1
 10506     1D81  00F4               	movwf	Lcd_Set_Cursor@b
 10507     1D82  0824               	movf	Escribir_dato@posy,w
 10508     1D83  160A  158A  253F  160A  158A  	fcall	_Lcd_Set_Cursor
 10509                           
 10510                           ;main.c: 303:     unidad = inttochar(descomponer(0, dato));
 10511     1D88  3000               	movlw	0
 10512     1D89  00FB               	movwf	descomponer@pos
 10513     1D8A  00FC               	movwf	descomponer@pos+1
 10514     1D8B  1283               	bcf	3,5	;RP0=0, select bank0
 10515     1D8C  0825               	movf	Escribir_dato@dato,w
 10516     1D8D  00FD               	movwf	descomponer@num
 10517     1D8E  160A  158A  245B  160A  158A  	fcall	_descomponer
 10518     1D93  160A  158A  24C7  160A  158A  	fcall	_inttochar
 10519     1D98  1683               	bsf	3,5	;RP0=1, select bank1
 10520     1D99  00D5               	movwf	_unidad^(0+128)
 10521                           
 10522                           ;main.c: 304:     Lcd_Write_Char(unidad);
 10523     1D9A  0855               	movf	_unidad^(0+128),w
 10524     1D9B  160A  158A  23FA  160A  158A  	fcall	_Lcd_Write_Char
 10525                           
 10526                           ;main.c: 305:     Lcd_Set_Cursor(posy, posx);
 10527     1DA0  0823               	movf	Escribir_dato@posx,w
 10528     1DA1  00F4               	movwf	Lcd_Set_Cursor@b
 10529     1DA2  0824               	movf	Escribir_dato@posy,w
 10530     1DA3  160A  158A  253F  160A  158A  	fcall	_Lcd_Set_Cursor
 10531                           
 10532                           ;main.c: 306:     decena = inttochar(descomponer(1, dato));
 10533     1DA8  3001               	movlw	1
 10534     1DA9  00FB               	movwf	descomponer@pos
 10535     1DAA  3000               	movlw	0
 10536     1DAB  00FC               	movwf	descomponer@pos+1
 10537     1DAC  1283               	bcf	3,5	;RP0=0, select bank0
 10538     1DAD  0825               	movf	Escribir_dato@dato,w
 10539     1DAE  00FD               	movwf	descomponer@num
 10540     1DAF  160A  158A  245B  160A  158A  	fcall	_descomponer
 10541     1DB4  160A  158A  24C7  160A  158A  	fcall	_inttochar
 10542     1DB9  1683               	bsf	3,5	;RP0=1, select bank1
 10543     1DBA  00D4               	movwf	_decena^(0+128)
 10544                           
 10545                           ;main.c: 307:     Lcd_Write_Char(decena);
 10546     1DBB  0854               	movf	_decena^(0+128),w
 10547     1DBC  160A  158A  23FA   	fcall	_Lcd_Write_Char
 10548     1DBF  0008               	return
 10549     1DC0                     __end_of_Escribir_dato:
 10550                           
 10551                           	psect	text40
 10552     1CC7                     __ptext40:	
 10553 ;; *************** function _inttochar *****************
 10554 ;; Defined at:
 10555 ;;		line 12 in file "conversiones.c"
 10556 ;; Parameters:    Size  Location     Type
 10557 ;;  num             1    wreg     unsigned char 
 10558 ;; Auto vars:     Size  Location     Type
 10559 ;;  num             1    0[COMMON] unsigned char 
 10560 ;; Return value:  Size  Location     Type
 10561 ;;                  1    wreg      unsigned char 
 10562 ;; Registers used:
 10563 ;;		wreg, status,2, status,0
 10564 ;; Tracked objects:
 10565 ;;		On entry : 300/0
 10566 ;;		On exit  : 300/0
 10567 ;;		Unchanged: 300/0
 10568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10569 ;;      Params:         0       0       0       0       0
 10570 ;;      Locals:         1       0       0       0       0
 10571 ;;      Temps:          0       0       0       0       0
 10572 ;;      Totals:         1       0       0       0       0
 10573 ;;Total ram usage:        1 bytes
 10574 ;; Hardware stack levels used: 1
 10575 ;; This function calls:
 10576 ;;		Nothing
 10577 ;; This function is called by:
 10578 ;;		_Escribir_dato
 10579 ;; This function uses a non-reentrant model
 10580 ;;
 10581                           
 10582     1CC7                     _inttochar:	
 10583                           ;psect for function _inttochar
 10584                           
 10585                           
 10586                           ;incstack = 0
 10587                           ; Regs used in _inttochar: [wreg+status,2+status,0]
 10588                           ;inttochar@num stored from wreg
 10589     1CC7  00F0               	movwf	inttochar@num
 10590                           
 10591                           ;conversiones.c: 13:     if(num == 0){
 10592     1CC8  0870               	movf	inttochar@num,w
 10593     1CC9  1D03               	btfss	3,2
 10594     1CCA  2CCD               	goto	l3476
 10595                           
 10596                           ;conversiones.c: 14:         return '0';
 10597     1CCB  3030               	movlw	48
 10598     1CCC  0008               	return
 10599     1CCD                     l3476:
 10600     1CCD  0370               	decf	inttochar@num,w
 10601     1CCE  1D03               	btfss	3,2
 10602     1CCF  2CD2               	goto	l3484
 10603                           
 10604                           ;conversiones.c: 17:         return '1';
 10605     1CD0  3031               	movlw	49
 10606     1CD1  0008               	return
 10607     1CD2                     l3484:
 10608     1CD2  3002               	movlw	2
 10609     1CD3  0670               	xorwf	inttochar@num,w
 10610     1CD4  1D03               	btfss	3,2
 10611     1CD5  2CD8               	goto	l3492
 10612                           
 10613                           ;conversiones.c: 20:         return '2';
 10614     1CD6  3032               	movlw	50
 10615     1CD7  0008               	return
 10616     1CD8                     l3492:
 10617     1CD8  3003               	movlw	3
 10618     1CD9  0670               	xorwf	inttochar@num,w
 10619     1CDA  1D03               	btfss	3,2
 10620     1CDB  2CDE               	goto	l3500
 10621                           
 10622                           ;conversiones.c: 23:         return '3';
 10623     1CDC  3033               	movlw	51
 10624     1CDD  0008               	return
 10625     1CDE                     l3500:
 10626     1CDE  3004               	movlw	4
 10627     1CDF  0670               	xorwf	inttochar@num,w
 10628     1CE0  1D03               	btfss	3,2
 10629     1CE1  2CE4               	goto	l3508
 10630                           
 10631                           ;conversiones.c: 26:         return '4';
 10632     1CE2  3034               	movlw	52
 10633     1CE3  0008               	return
 10634     1CE4                     l3508:
 10635     1CE4  3005               	movlw	5
 10636     1CE5  0670               	xorwf	inttochar@num,w
 10637     1CE6  1D03               	btfss	3,2
 10638     1CE7  2CEA               	goto	l3516
 10639                           
 10640                           ;conversiones.c: 29:         return '5';
 10641     1CE8  3035               	movlw	53
 10642     1CE9  0008               	return
 10643     1CEA                     l3516:
 10644     1CEA  3006               	movlw	6
 10645     1CEB  0670               	xorwf	inttochar@num,w
 10646     1CEC  1D03               	btfss	3,2
 10647     1CED  2CF0               	goto	l3524
 10648                           
 10649                           ;conversiones.c: 32:         return '6';
 10650     1CEE  3036               	movlw	54
 10651     1CEF  0008               	return
 10652     1CF0                     l3524:
 10653     1CF0  3007               	movlw	7
 10654     1CF1  0670               	xorwf	inttochar@num,w
 10655     1CF2  1D03               	btfss	3,2
 10656     1CF3  2CF6               	goto	l3532
 10657                           
 10658                           ;conversiones.c: 35:         return '7';
 10659     1CF4  3037               	movlw	55
 10660     1CF5  0008               	return
 10661     1CF6                     l3532:
 10662     1CF6  3008               	movlw	8
 10663     1CF7  0670               	xorwf	inttochar@num,w
 10664     1CF8  1D03               	btfss	3,2
 10665     1CF9  2CFC               	goto	l3540
 10666                           
 10667                           ;conversiones.c: 38:         return '8';
 10668     1CFA  3038               	movlw	56
 10669     1CFB  0008               	return
 10670     1CFC                     l3540:
 10671     1CFC  3009               	movlw	9
 10672     1CFD  0670               	xorwf	inttochar@num,w
 10673     1CFE  1D03               	btfss	3,2
 10674     1CFF  0008               	return
 10675                           
 10676                           ;conversiones.c: 41:         return '9';
 10677     1D00  3039               	movlw	57
 10678     1D01  0008               	return
 10679     1D02                     __end_of_inttochar:
 10680                           
 10681                           	psect	text41
 10682     1C5B                     __ptext41:	
 10683 ;; *************** function _descomponer *****************
 10684 ;; Defined at:
 10685 ;;		line 45 in file "conversiones.c"
 10686 ;; Parameters:    Size  Location     Type
 10687 ;;  pos             2   11[COMMON] int 
 10688 ;;  num             1   13[COMMON] unsigned char 
 10689 ;; Auto vars:     Size  Location     Type
 10690 ;;  dec             1    2[BANK0 ] unsigned char 
 10691 ;;  uni             1    1[BANK0 ] unsigned char 
 10692 ;;  cent            1    0[BANK0 ] unsigned char 
 10693 ;; Return value:  Size  Location     Type
 10694 ;;                  1    wreg      unsigned char 
 10695 ;; Registers used:
 10696 ;;		wreg, status,2, status,0, pclath, cstack
 10697 ;; Tracked objects:
 10698 ;;		On entry : 300/0
 10699 ;;		On exit  : 300/0
 10700 ;;		Unchanged: 0/0
 10701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10702 ;;      Params:         3       0       0       0       0
 10703 ;;      Locals:         0       3       0       0       0
 10704 ;;      Temps:          0       0       0       0       0
 10705 ;;      Totals:         3       3       0       0       0
 10706 ;;Total ram usage:        6 bytes
 10707 ;; Hardware stack levels used: 1
 10708 ;; Hardware stack levels required when called: 1
 10709 ;; This function calls:
 10710 ;;		___lbdiv
 10711 ;;		___lbmod
 10712 ;; This function is called by:
 10713 ;;		_Escribir_dato
 10714 ;; This function uses a non-reentrant model
 10715 ;;
 10716                           
 10717     1C5B                     _descomponer:	
 10718                           ;psect for function _descomponer
 10719                           
 10720                           
 10721                           ;conversiones.c: 46:     uint8_t cent;;conversiones.c: 47:     uint8_t dec;;conversiones
      +                          .c: 48:     uint8_t uni;;conversiones.c: 49:     cent = (num/100);
 10722                           
 10723                           ;incstack = 0
 10724                           ; Regs used in _descomponer: [wreg+status,2+status,0+pclath+cstack]
 10725     1C5B  3064               	movlw	100
 10726     1C5C  00F6               	movwf	___lbdiv@divisor
 10727     1C5D  087D               	movf	descomponer@num,w
 10728     1C5E  160A  158A  234E  160A  158A  	fcall	___lbdiv
 10729     1C63  00A0               	movwf	descomponer@cent
 10730                           
 10731                           ;conversiones.c: 50:     dec = (num%100);
 10732     1C64  3064               	movlw	100
 10733     1C65  00F0               	movwf	___lbmod@divisor
 10734     1C66  087D               	movf	descomponer@num,w
 10735     1C67  160A  158A  230F  160A  158A  	fcall	___lbmod
 10736     1C6C  00A2               	movwf	descomponer@dec
 10737                           
 10738                           ;conversiones.c: 51:     uni = (dec%10);
 10739     1C6D  300A               	movlw	10
 10740     1C6E  00F0               	movwf	___lbmod@divisor
 10741     1C6F  0822               	movf	descomponer@dec,w
 10742     1C70  160A  158A  230F  160A  158A  	fcall	___lbmod
 10743     1C75  00A1               	movwf	descomponer@uni
 10744                           
 10745                           ;conversiones.c: 52:     if(pos == 2){
 10746     1C76  3002               	movlw	2
 10747     1C77  067B               	xorwf	descomponer@pos,w
 10748     1C78  047C               	iorwf	descomponer@pos+1,w
 10749     1C79  1D03               	btfss	3,2
 10750     1C7A  2C7D               	goto	l3454
 10751                           
 10752                           ;conversiones.c: 53:         return cent;
 10753     1C7B  0820               	movf	descomponer@cent,w
 10754     1C7C  0008               	return
 10755     1C7D                     l3454:
 10756     1C7D  037B               	decf	descomponer@pos,w
 10757     1C7E  047C               	iorwf	descomponer@pos+1,w
 10758     1C7F  1D03               	btfss	3,2
 10759     1C80  2C88               	goto	l3462
 10760                           
 10761                           ;conversiones.c: 56:         return (dec/10);
 10762     1C81  300A               	movlw	10
 10763     1C82  00F6               	movwf	___lbdiv@divisor
 10764     1C83  0822               	movf	descomponer@dec,w
 10765     1C84  160A  158A  234E   	fcall	___lbdiv
 10766     1C87  0008               	return
 10767     1C88                     l3462:
 10768     1C88  087B               	movf	descomponer@pos,w
 10769     1C89  047C               	iorwf	descomponer@pos+1,w
 10770     1C8A  1D03               	btfss	3,2
 10771     1C8B  0008               	return
 10772                           
 10773                           ;conversiones.c: 59:         return uni;
 10774     1C8C  0821               	movf	descomponer@uni,w
 10775     1C8D  0008               	return
 10776     1C8E                     __end_of_descomponer:
 10777                           
 10778                           	psect	text42
 10779     1B0F                     __ptext42:	
 10780 ;; *************** function ___lbmod *****************
 10781 ;; Defined at:
 10782 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lbmod.c"
 10783 ;; Parameters:    Size  Location     Type
 10784 ;;  dividend        1    wreg     unsigned char 
 10785 ;;  divisor         1    0[COMMON] unsigned char 
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;  dividend        1    3[COMMON] unsigned char 
 10788 ;;  rem             1    5[COMMON] unsigned char 
 10789 ;;  counter         1    4[COMMON] unsigned char 
 10790 ;; Return value:  Size  Location     Type
 10791 ;;                  1    wreg      unsigned char 
 10792 ;; Registers used:
 10793 ;;		wreg, status,2, status,0
 10794 ;; Tracked objects:
 10795 ;;		On entry : 300/0
 10796 ;;		On exit  : 300/0
 10797 ;;		Unchanged: 300/0
 10798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10799 ;;      Params:         1       0       0       0       0
 10800 ;;      Locals:         3       0       0       0       0
 10801 ;;      Temps:          2       0       0       0       0
 10802 ;;      Totals:         6       0       0       0       0
 10803 ;;Total ram usage:        6 bytes
 10804 ;; Hardware stack levels used: 1
 10805 ;; This function calls:
 10806 ;;		Nothing
 10807 ;; This function is called by:
 10808 ;;		_descomponer
 10809 ;;		_desconvertir
 10810 ;;		_fround
 10811 ;; This function uses a non-reentrant model
 10812 ;;
 10813                           
 10814     1B0F                     ___lbmod:	
 10815                           ;psect for function ___lbmod
 10816                           
 10817                           
 10818                           ;incstack = 0
 10819                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
 10820                           ;___lbmod@dividend stored from wreg
 10821     1B0F  00F3               	movwf	___lbmod@dividend
 10822     1B10  3008               	movlw	8
 10823     1B11  00F4               	movwf	___lbmod@counter
 10824     1B12  01F5               	clrf	___lbmod@rem
 10825     1B13                     l3038:
 10826     1B13  0873               	movf	___lbmod@dividend,w
 10827     1B14  00F1               	movwf	??___lbmod
 10828     1B15  3007               	movlw	7
 10829     1B16                     u4145:
 10830     1B16  1003               	clrc
 10831     1B17  0CF1               	rrf	??___lbmod,f
 10832     1B18  3EFF               	addlw	-1
 10833     1B19  1D03               	skipz
 10834     1B1A  2B16               	goto	u4145
 10835     1B1B  0875               	movf	___lbmod@rem,w
 10836     1B1C  00F2               	movwf	??___lbmod+1
 10837     1B1D  0772               	addwf	??___lbmod+1,w
 10838     1B1E  0471               	iorwf	??___lbmod,w
 10839     1B1F  00F5               	movwf	___lbmod@rem
 10840     1B20  1003               	clrc
 10841     1B21  0DF3               	rlf	___lbmod@dividend,f
 10842     1B22  0870               	movf	___lbmod@divisor,w
 10843     1B23  0275               	subwf	___lbmod@rem,w
 10844     1B24  1C03               	skipc
 10845     1B25  2B28               	goto	l761
 10846     1B26  0870               	movf	___lbmod@divisor,w
 10847     1B27  02F5               	subwf	___lbmod@rem,f
 10848     1B28                     l761:
 10849     1B28  3001               	movlw	1
 10850     1B29  02F4               	subwf	___lbmod@counter,f
 10851     1B2A  1D03               	btfss	3,2
 10852     1B2B  2B13               	goto	l3038
 10853     1B2C  0875               	movf	___lbmod@rem,w
 10854     1B2D  0008               	return
 10855     1B2E                     __end_of___lbmod:
 10856                           
 10857                           	psect	text43
 10858     1B4E                     __ptext43:	
 10859 ;; *************** function ___lbdiv *****************
 10860 ;; Defined at:
 10861 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lbdiv.c"
 10862 ;; Parameters:    Size  Location     Type
 10863 ;;  dividend        1    wreg     unsigned char 
 10864 ;;  divisor         1    6[COMMON] unsigned char 
 10865 ;; Auto vars:     Size  Location     Type
 10866 ;;  dividend        1    8[COMMON] unsigned char 
 10867 ;;  quotient        1   10[COMMON] unsigned char 
 10868 ;;  counter         1    9[COMMON] unsigned char 
 10869 ;; Return value:  Size  Location     Type
 10870 ;;                  1    wreg      unsigned char 
 10871 ;; Registers used:
 10872 ;;		wreg, status,2, status,0
 10873 ;; Tracked objects:
 10874 ;;		On entry : 300/0
 10875 ;;		On exit  : 300/0
 10876 ;;		Unchanged: 300/0
 10877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10878 ;;      Params:         1       0       0       0       0
 10879 ;;      Locals:         3       0       0       0       0
 10880 ;;      Temps:          1       0       0       0       0
 10881 ;;      Totals:         5       0       0       0       0
 10882 ;;Total ram usage:        5 bytes
 10883 ;; Hardware stack levels used: 1
 10884 ;; This function calls:
 10885 ;;		Nothing
 10886 ;; This function is called by:
 10887 ;;		_descomponer
 10888 ;;		_desconvertir
 10889 ;;		_fround
 10890 ;; This function uses a non-reentrant model
 10891 ;;
 10892                           
 10893     1B4E                     ___lbdiv:	
 10894                           ;psect for function ___lbdiv
 10895                           
 10896                           
 10897                           ;incstack = 0
 10898                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 10899                           ;___lbdiv@dividend stored from wreg
 10900     1B4E  00F8               	movwf	___lbdiv@dividend
 10901     1B4F  01FA               	clrf	___lbdiv@quotient
 10902     1B50  0876               	movf	___lbdiv@divisor,w
 10903     1B51  1903               	btfsc	3,2
 10904     1B52  2B6D               	goto	l3030
 10905     1B53  01F9               	clrf	___lbdiv@counter
 10906     1B54  0AF9               	incf	___lbdiv@counter,f
 10907     1B55                     l3018:
 10908     1B55  1BF6               	btfsc	___lbdiv@divisor,7
 10909     1B56  2B5E               	goto	l3020
 10910     1B57  1003               	clrc
 10911     1B58  0DF6               	rlf	___lbdiv@divisor,f
 10912     1B59  3001               	movlw	1
 10913     1B5A  00F7               	movwf	??___lbdiv
 10914     1B5B  0877               	movf	??___lbdiv,w
 10915     1B5C  07F9               	addwf	___lbdiv@counter,f
 10916     1B5D  2B55               	goto	l3018
 10917     1B5E                     l3020:
 10918     1B5E  1003               	clrc
 10919     1B5F  0DFA               	rlf	___lbdiv@quotient,f
 10920     1B60  0876               	movf	___lbdiv@divisor,w
 10921     1B61  0278               	subwf	___lbdiv@dividend,w
 10922     1B62  1C03               	skipc
 10923     1B63  2B68               	goto	L16
 10924     1B64  0876               	movf	___lbdiv@divisor,w
 10925     1B65  02F8               	subwf	___lbdiv@dividend,f
 10926     1B66  147A               	bsf	___lbdiv@quotient,0
 10927     1B67  1003               	clrc
 10928     1B68                     L16:
 10929     1B68  0CF6               	rrf	___lbdiv@divisor,f
 10930     1B69  3001               	movlw	1
 10931     1B6A  02F9               	subwf	___lbdiv@counter,f
 10932     1B6B  1D03               	btfss	3,2
 10933     1B6C  2B5E               	goto	l3020
 10934     1B6D                     l3030:
 10935     1B6D  087A               	movf	___lbdiv@quotient,w
 10936     1B6E  0008               	return
 10937     1B6F                     __end_of___lbdiv:
 10938                           
 10939                           	psect	text44
 10940     1BFA                     __ptext44:	
 10941 ;; *************** function _Lcd_Write_Char *****************
 10942 ;; Defined at:
 10943 ;;		line 83 in file "LCD.c"
 10944 ;; Parameters:    Size  Location     Type
 10945 ;;  a               1    wreg     unsigned char 
 10946 ;; Auto vars:     Size  Location     Type
 10947 ;;  a               1    4[COMMON] unsigned char 
 10948 ;;  y               1    3[COMMON] unsigned char 
 10949 ;;  temp            1    2[COMMON] unsigned char 
 10950 ;; Return value:  Size  Location     Type
 10951 ;;                  1    wreg      void 
 10952 ;; Registers used:
 10953 ;;		wreg, status,2, status,0, pclath, cstack
 10954 ;; Tracked objects:
 10955 ;;		On entry : 200/0
 10956 ;;		On exit  : 300/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10959 ;;      Params:         0       0       0       0       0
 10960 ;;      Locals:         3       0       0       0       0
 10961 ;;      Temps:          1       0       0       0       0
 10962 ;;      Totals:         4       0       0       0       0
 10963 ;;Total ram usage:        4 bytes
 10964 ;; Hardware stack levels used: 1
 10965 ;; Hardware stack levels required when called: 1
 10966 ;; This function calls:
 10967 ;;		_Lcd_Port
 10968 ;; This function is called by:
 10969 ;;		_Escribir_dato
 10970 ;;		_Lcd_Write_String
 10971 ;; This function uses a non-reentrant model
 10972 ;;
 10973                           
 10974     1BFA                     _Lcd_Write_Char:	
 10975                           ;psect for function _Lcd_Write_Char
 10976                           
 10977                           
 10978                           ;incstack = 0
 10979                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
 10980                           ;Lcd_Write_Char@a stored from wreg
 10981     1BFA  00F4               	movwf	Lcd_Write_Char@a
 10982                           
 10983                           ;LCD.c: 84:     char temp, y;;LCD.c: 85:     temp = a & 0x0F;
 10984     1BFB  0874               	movf	Lcd_Write_Char@a,w
 10985     1BFC  390F               	andlw	15
 10986     1BFD  00F2               	movwf	Lcd_Write_Char@temp
 10987                           
 10988                           ;LCD.c: 86:     y = a & 0xF0;
 10989     1BFE  0874               	movf	Lcd_Write_Char@a,w
 10990     1BFF  39F0               	andlw	240
 10991     1C00  00F3               	movwf	Lcd_Write_Char@y
 10992                           
 10993                           ;LCD.c: 87:     PORTDbits.RD2 = 1;
 10994     1C01  1283               	bcf	3,5	;RP0=0, select bank0
 10995     1C02  1508               	bsf	8,2	;volatile
 10996                           
 10997                           ;LCD.c: 88:     Lcd_Port(y >> 4);
 10998     1C03  0873               	movf	Lcd_Write_Char@y,w
 10999     1C04  00F1               	movwf	??_Lcd_Write_Char
 11000     1C05  3004               	movlw	4
 11001     1C06                     u5185:
 11002     1C06  1003               	clrc
 11003     1C07  0CF1               	rrf	??_Lcd_Write_Char,f
 11004     1C08  3EFF               	addlw	-1
 11005     1C09  1D03               	skipz
 11006     1C0A  2C06               	goto	u5185
 11007     1C0B  0871               	movf	??_Lcd_Write_Char,w
 11008     1C0C  160A  158A  22C1  160A  158A  	fcall	_Lcd_Port
 11009                           
 11010                           ;LCD.c: 89:     RD3 = 1;
 11011     1C11  1588               	bsf	8,3	;volatile
 11012                           
 11013                           ;LCD.c: 90:     _delay((unsigned long)((40)*(8000000/4000000.0)));
 11014     1C12  301A               	movlw	26
 11015     1C13  00F1               	movwf	??_Lcd_Write_Char
 11016     1C14                     u7527:
 11017     1C14  0BF1               	decfsz	??_Lcd_Write_Char,f
 11018     1C15  2C14               	goto	u7527
 11019     1C16  0000               	nop
 11020                           
 11021                           ;LCD.c: 91:     RD3 = 0;
 11022     1C17  1283               	bcf	3,5	;RP0=0, select bank0
 11023     1C18  1303               	bcf	3,6	;RP1=0, select bank0
 11024     1C19  1188               	bcf	8,3	;volatile
 11025                           
 11026                           ;LCD.c: 92:     Lcd_Port(temp);
 11027     1C1A  0872               	movf	Lcd_Write_Char@temp,w
 11028     1C1B  160A  158A  22C1  160A  158A  	fcall	_Lcd_Port
 11029                           
 11030                           ;LCD.c: 93:     RD3 = 1;
 11031     1C20  1588               	bsf	8,3	;volatile
 11032                           
 11033                           ;LCD.c: 94:     _delay((unsigned long)((40)*(8000000/4000000.0)));
 11034     1C21  301A               	movlw	26
 11035     1C22  00F1               	movwf	??_Lcd_Write_Char
 11036     1C23                     u7537:
 11037     1C23  0BF1               	decfsz	??_Lcd_Write_Char,f
 11038     1C24  2C23               	goto	u7537
 11039     1C25  0000               	nop
 11040                           
 11041                           ;LCD.c: 95:     RD3 = 0;
 11042     1C26  1283               	bcf	3,5	;RP0=0, select bank0
 11043     1C27  1303               	bcf	3,6	;RP1=0, select bank0
 11044     1C28  1188               	bcf	8,3	;volatile
 11045     1C29  0008               	return
 11046     1C2A                     __end_of_Lcd_Write_Char:
 11047                           
 11048                           	psect	text45
 11049     1D3F                     __ptext45:	
 11050 ;; *************** function _Lcd_Set_Cursor *****************
 11051 ;; Defined at:
 11052 ;;		line 48 in file "LCD.c"
 11053 ;; Parameters:    Size  Location     Type
 11054 ;;  a               1    wreg     unsigned char 
 11055 ;;  b               1    4[COMMON] unsigned char 
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;  a               1    6[COMMON] unsigned char 
 11058 ;;  temp            1    9[COMMON] unsigned char 
 11059 ;;  y               1    8[COMMON] unsigned char 
 11060 ;;  z               1    7[COMMON] unsigned char 
 11061 ;; Return value:  Size  Location     Type
 11062 ;;                  1    wreg      void 
 11063 ;; Registers used:
 11064 ;;		wreg, status,2, status,0, pclath, cstack
 11065 ;; Tracked objects:
 11066 ;;		On entry : 200/0
 11067 ;;		On exit  : 200/0
 11068 ;;		Unchanged: 0/0
 11069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11070 ;;      Params:         1       0       0       0       0
 11071 ;;      Locals:         4       0       0       0       0
 11072 ;;      Temps:          1       0       0       0       0
 11073 ;;      Totals:         6       0       0       0       0
 11074 ;;Total ram usage:        6 bytes
 11075 ;; Hardware stack levels used: 1
 11076 ;; Hardware stack levels required when called: 2
 11077 ;; This function calls:
 11078 ;;		_Lcd_Cmd
 11079 ;; This function is called by:
 11080 ;;		_main
 11081 ;;		_Escribir_dato
 11082 ;; This function uses a non-reentrant model
 11083 ;;
 11084                           
 11085     1D3F                     _Lcd_Set_Cursor:	
 11086                           ;psect for function _Lcd_Set_Cursor
 11087                           
 11088                           
 11089                           ;incstack = 0
 11090                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
 11091                           ;Lcd_Set_Cursor@a stored from wreg
 11092     1D3F  00F6               	movwf	Lcd_Set_Cursor@a
 11093                           
 11094                           ;LCD.c: 49:     char temp, z, y;;LCD.c: 50:     if (a == 1) {
 11095     1D40  0376               	decf	Lcd_Set_Cursor@a,w
 11096     1D41  1D03               	btfss	3,2
 11097     1D42  2D5E               	goto	l3394
 11098                           
 11099                           ;LCD.c: 51:         temp = 0x80 + b - 1;
 11100     1D43  0874               	movf	Lcd_Set_Cursor@b,w
 11101     1D44  3E7F               	addlw	127
 11102     1D45  00F9               	movwf	Lcd_Set_Cursor@temp
 11103                           
 11104                           ;LCD.c: 52:         z = temp >> 4;
 11105     1D46  0879               	movf	Lcd_Set_Cursor@temp,w
 11106     1D47  00F5               	movwf	??_Lcd_Set_Cursor
 11107     1D48  3004               	movlw	4
 11108     1D49                     u5005:
 11109     1D49  1003               	clrc
 11110     1D4A  0CF5               	rrf	??_Lcd_Set_Cursor,f
 11111     1D4B  3EFF               	addlw	-1
 11112     1D4C  1D03               	skipz
 11113     1D4D  2D49               	goto	u5005
 11114     1D4E  0875               	movf	??_Lcd_Set_Cursor,w
 11115     1D4F  00F7               	movwf	Lcd_Set_Cursor@z
 11116                           
 11117                           ;LCD.c: 53:         y = temp & 0x0F;
 11118     1D50  0879               	movf	Lcd_Set_Cursor@temp,w
 11119     1D51  390F               	andlw	15
 11120     1D52  00F8               	movwf	Lcd_Set_Cursor@y
 11121                           
 11122                           ;LCD.c: 54:         Lcd_Cmd(z);
 11123     1D53  0877               	movf	Lcd_Set_Cursor@z,w
 11124     1D54  160A  158A  22D9  160A  158A  	fcall	_Lcd_Cmd
 11125                           
 11126                           ;LCD.c: 55:         Lcd_Cmd(y);
 11127     1D59  0878               	movf	Lcd_Set_Cursor@y,w
 11128     1D5A  160A  158A  22D9   	fcall	_Lcd_Cmd
 11129                           
 11130                           ;LCD.c: 56:     } else if (a == 2) {
 11131     1D5D  0008               	return
 11132     1D5E                     l3394:
 11133     1D5E  3002               	movlw	2
 11134     1D5F  0676               	xorwf	Lcd_Set_Cursor@a,w
 11135     1D60  1D03               	btfss	3,2
 11136     1D61  0008               	return
 11137                           
 11138                           ;LCD.c: 57:         temp = 0xC0 + b - 1;
 11139     1D62  0874               	movf	Lcd_Set_Cursor@b,w
 11140     1D63  3EBF               	addlw	191
 11141     1D64  00F9               	movwf	Lcd_Set_Cursor@temp
 11142                           
 11143                           ;LCD.c: 58:         z = temp >> 4;
 11144     1D65  0879               	movf	Lcd_Set_Cursor@temp,w
 11145     1D66  00F5               	movwf	??_Lcd_Set_Cursor
 11146     1D67  3004               	movlw	4
 11147     1D68                     u5025:
 11148     1D68  1003               	clrc
 11149     1D69  0CF5               	rrf	??_Lcd_Set_Cursor,f
 11150     1D6A  3EFF               	addlw	-1
 11151     1D6B  1D03               	skipz
 11152     1D6C  2D68               	goto	u5025
 11153     1D6D  0875               	movf	??_Lcd_Set_Cursor,w
 11154     1D6E  00F7               	movwf	Lcd_Set_Cursor@z
 11155                           
 11156                           ;LCD.c: 59:         y = temp & 0x0F;
 11157     1D6F  0879               	movf	Lcd_Set_Cursor@temp,w
 11158     1D70  390F               	andlw	15
 11159     1D71  00F8               	movwf	Lcd_Set_Cursor@y
 11160                           
 11161                           ;LCD.c: 60:         Lcd_Cmd(z);
 11162     1D72  0877               	movf	Lcd_Set_Cursor@z,w
 11163     1D73  160A  158A  22D9  160A  158A  	fcall	_Lcd_Cmd
 11164                           
 11165                           ;LCD.c: 61:         Lcd_Cmd(y);
 11166     1D78  0878               	movf	Lcd_Set_Cursor@y,w
 11167     1D79  160A  158A  22D9   	fcall	_Lcd_Cmd
 11168     1D7C  0008               	return
 11169     1D7D                     __end_of_Lcd_Set_Cursor:
 11170                           
 11171                           	psect	text46
 11172     1AD9                     __ptext46:	
 11173 ;; *************** function _Lcd_Cmd *****************
 11174 ;; Defined at:
 11175 ;;		line 35 in file "LCD.c"
 11176 ;; Parameters:    Size  Location     Type
 11177 ;;  a               1    wreg     unsigned char 
 11178 ;; Auto vars:     Size  Location     Type
 11179 ;;  a               1    3[COMMON] unsigned char 
 11180 ;; Return value:  Size  Location     Type
 11181 ;;                  1    wreg      void 
 11182 ;; Registers used:
 11183 ;;		wreg, status,2, status,0, pclath, cstack
 11184 ;; Tracked objects:
 11185 ;;		On entry : 0/0
 11186 ;;		On exit  : 300/0
 11187 ;;		Unchanged: 0/0
 11188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11189 ;;      Params:         0       0       0       0       0
 11190 ;;      Locals:         1       0       0       0       0
 11191 ;;      Temps:          2       0       0       0       0
 11192 ;;      Totals:         3       0       0       0       0
 11193 ;;Total ram usage:        3 bytes
 11194 ;; Hardware stack levels used: 1
 11195 ;; Hardware stack levels required when called: 1
 11196 ;; This function calls:
 11197 ;;		_Lcd_Port
 11198 ;; This function is called by:
 11199 ;;		_Lcd_Clear
 11200 ;;		_Lcd_Set_Cursor
 11201 ;;		_Lcd_Init
 11202 ;; This function uses a non-reentrant model
 11203 ;;
 11204                           
 11205     1AD9                     _Lcd_Cmd:	
 11206                           ;psect for function _Lcd_Cmd
 11207                           
 11208                           
 11209                           ;incstack = 0
 11210                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
 11211                           ;Lcd_Cmd@a stored from wreg
 11212     1AD9  00F3               	movwf	Lcd_Cmd@a
 11213                           
 11214                           ;LCD.c: 36:     PORTDbits.RD2 = 0;
 11215     1ADA  1283               	bcf	3,5	;RP0=0, select bank0
 11216     1ADB  1303               	bcf	3,6	;RP1=0, select bank0
 11217     1ADC  1108               	bcf	8,2	;volatile
 11218                           
 11219                           ;LCD.c: 37:     Lcd_Port(a);
 11220     1ADD  0873               	movf	Lcd_Cmd@a,w
 11221     1ADE  160A  158A  22C1  160A  158A  	fcall	_Lcd_Port
 11222                           
 11223                           ;LCD.c: 38:     RD3 = 1;
 11224     1AE3  1588               	bsf	8,3	;volatile
 11225                           
 11226                           ;LCD.c: 39:     _delay((unsigned long)((4)*(8000000/4000.0)));
 11227     1AE4  300B               	movlw	11
 11228     1AE5  00F2               	movwf	??_Lcd_Cmd+1
 11229     1AE6  3062               	movlw	98
 11230     1AE7  00F1               	movwf	??_Lcd_Cmd
 11231     1AE8                     u7547:
 11232     1AE8  0BF1               	decfsz	??_Lcd_Cmd,f
 11233     1AE9  2AE8               	goto	u7547
 11234     1AEA  0BF2               	decfsz	??_Lcd_Cmd+1,f
 11235     1AEB  2AE8               	goto	u7547
 11236     1AEC  0000               	nop
 11237                           
 11238                           ;LCD.c: 40:     RD3 = 0;
 11239     1AED  1283               	bcf	3,5	;RP0=0, select bank0
 11240     1AEE  1303               	bcf	3,6	;RP1=0, select bank0
 11241     1AEF  1188               	bcf	8,3	;volatile
 11242     1AF0  0008               	return
 11243     1AF1                     __end_of_Lcd_Cmd:
 11244                           
 11245                           	psect	text47
 11246     1AC1                     __ptext47:	
 11247 ;; *************** function _Lcd_Port *****************
 11248 ;; Defined at:
 11249 ;;		line 13 in file "LCD.c"
 11250 ;; Parameters:    Size  Location     Type
 11251 ;;  a               1    wreg     unsigned char 
 11252 ;; Auto vars:     Size  Location     Type
 11253 ;;  a               1    0[COMMON] unsigned char 
 11254 ;; Return value:  Size  Location     Type
 11255 ;;                  1    wreg      void 
 11256 ;; Registers used:
 11257 ;;		wreg
 11258 ;; Tracked objects:
 11259 ;;		On entry : 200/100
 11260 ;;		On exit  : 300/0
 11261 ;;		Unchanged: 0/0
 11262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11263 ;;      Params:         0       0       0       0       0
 11264 ;;      Locals:         1       0       0       0       0
 11265 ;;      Temps:          0       0       0       0       0
 11266 ;;      Totals:         1       0       0       0       0
 11267 ;;Total ram usage:        1 bytes
 11268 ;; Hardware stack levels used: 1
 11269 ;; This function calls:
 11270 ;;		Nothing
 11271 ;; This function is called by:
 11272 ;;		_Lcd_Cmd
 11273 ;;		_Lcd_Init
 11274 ;;		_Lcd_Write_Char
 11275 ;; This function uses a non-reentrant model
 11276 ;;
 11277                           
 11278     1AC1                     _Lcd_Port:	
 11279                           ;psect for function _Lcd_Port
 11280                           
 11281                           
 11282                           ;incstack = 0
 11283                           ; Regs used in _Lcd_Port: [wreg]
 11284                           ;Lcd_Port@a stored from wreg
 11285     1AC1  00F0               	movwf	Lcd_Port@a
 11286                           
 11287                           ;LCD.c: 14:     if (a & 1)
 11288     1AC2  1C70               	btfss	Lcd_Port@a,0
 11289     1AC3  2AC7               	goto	l192
 11290                           
 11291                           ;LCD.c: 15:         RD4 = 1;
 11292     1AC4  1283               	bcf	3,5	;RP0=0, select bank0
 11293     1AC5  1608               	bsf	8,4	;volatile
 11294     1AC6  2AC9               	goto	l193
 11295     1AC7                     l192:	
 11296                           ;LCD.c: 16:     else
 11297                           
 11298                           
 11299                           ;LCD.c: 17:         RD4 = 0;
 11300     1AC7  1283               	bcf	3,5	;RP0=0, select bank0
 11301     1AC8  1208               	bcf	8,4	;volatile
 11302     1AC9                     l193:
 11303                           
 11304                           ;LCD.c: 19:     if (a & 2)
 11305     1AC9  1CF0               	btfss	Lcd_Port@a,1
 11306     1ACA  2ACD               	goto	l194
 11307                           
 11308                           ;LCD.c: 20:         RD5 = 1;
 11309     1ACB  1688               	bsf	8,5	;volatile
 11310     1ACC  2ACE               	goto	l195
 11311     1ACD                     l194:	
 11312                           ;LCD.c: 21:     else
 11313                           
 11314                           
 11315                           ;LCD.c: 22:         RD5 = 0;
 11316     1ACD  1288               	bcf	8,5	;volatile
 11317     1ACE                     l195:
 11318                           
 11319                           ;LCD.c: 24:     if (a & 4)
 11320     1ACE  1D70               	btfss	Lcd_Port@a,2
 11321     1ACF  2AD2               	goto	l196
 11322                           
 11323                           ;LCD.c: 25:         RD6 = 1;
 11324     1AD0  1708               	bsf	8,6	;volatile
 11325     1AD1  2AD3               	goto	l197
 11326     1AD2                     l196:	
 11327                           ;LCD.c: 26:     else
 11328                           
 11329                           
 11330                           ;LCD.c: 27:         RD6 = 0;
 11331     1AD2  1308               	bcf	8,6	;volatile
 11332     1AD3                     l197:
 11333                           
 11334                           ;LCD.c: 29:     if (a & 8)
 11335     1AD3  1DF0               	btfss	Lcd_Port@a,3
 11336     1AD4  2AD7               	goto	l198
 11337                           
 11338                           ;LCD.c: 30:         RD7 = 1;
 11339     1AD5  1788               	bsf	8,7	;volatile
 11340     1AD6  0008               	return
 11341     1AD7                     l198:	
 11342                           ;LCD.c: 31:     else
 11343                           
 11344                           
 11345                           ;LCD.c: 32:         RD7 = 0;
 11346     1AD7  1388               	bcf	8,7	;volatile
 11347     1AD8  0008               	return
 11348     1AD9                     __end_of_Lcd_Port:
 11349     007E                     btemp	set	126	;btemp
 11350     007E                     wtemp0	set	126
 11351                           
 11352                           	psect	idloc
 11353                           
 11354                           ;Config register IDLOC0 @ 0x2000
 11355                           ;	unspecified, using default values
 11356     2000                     	org	8192
 11357     2000  3FFF               	dw	16383
 11358                           
 11359                           ;Config register IDLOC1 @ 0x2001
 11360                           ;	unspecified, using default values
 11361     2001                     	org	8193
 11362     2001  3FFF               	dw	16383
 11363                           
 11364                           ;Config register IDLOC2 @ 0x2002
 11365                           ;	unspecified, using default values
 11366     2002                     	org	8194
 11367     2002  3FFF               	dw	16383
 11368                           
 11369                           ;Config register IDLOC3 @ 0x2003
 11370                           ;	unspecified, using default values
 11371     2003                     	org	8195
 11372     2003  3FFF               	dw	16383
 11373                           
 11374                           	psect	config
 11375                           
 11376                           ;Config register CONFIG1 @ 0x2007
 11377                           ;	Oscillator Selection bits
 11378                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
 11379                           ;	Watchdog Timer Enable bit
 11380                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
 11381                           ;	Power-up Timer Enable bit
 11382                           ;	PWRTE = OFF, PWRT disabled
 11383                           ;	RE3/MCLR pin function select bit
 11384                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
 11385                           ;	Code Protection bit
 11386                           ;	CP = OFF, Program memory code protection is disabled
 11387                           ;	Data Code Protection bit
 11388                           ;	CPD = OFF, Data memory code protection is disabled
 11389                           ;	Brown Out Reset Selection bits
 11390                           ;	BOREN = OFF, BOR disabled
 11391                           ;	Internal External Switchover bit
 11392                           ;	IESO = OFF, Internal/External Switchover mode is disabled
 11393                           ;	Fail-Safe Clock Monitor Enabled bit
 11394                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
 11395                           ;	Low Voltage Programming Enable bit
 11396                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
 11397                           ;	In-Circuit Debugger Mode bit
 11398                           ;	DEBUG = 0x1, unprogramme 11399     2007                     	org	8199
 11400     2007  20D4               	dw	8404
 11401                           
 11402                           ;Config register CONFIG2 @ 0x2008
 11403                           ;	Brown-out Reset Selection bit
 11404                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
 11405                           ;	Flash Program Memory Self Write Enable bits
 11406                           ;	WRT = OFF, Write protection off
 11407     2008                     	org	8200
 11408     2008  3FFF               	dw	16383

Data Sizes:
    Strings     26
    Constant    144
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     35      58
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_5(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 3
		 -> valADC(BANK1[3]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 6
		 -> valADC(BANK1[3]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[6]), 
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    _main->___xxtofl
    _main->_leer_x
    _sprintf->___lldiv
    _sprintf->___xxtofl
    ___awdiv->___awmod
    ___flmul->___xxtofl
    ___flsub->___xxtofl
    _I2C_Master_Init->___lldiv
    _leer_x->_convertir
    _convertir->___bmul
    _enviar_x->_I2C_Master_Write
    _desconvertir->___lbdiv
    ___fldiv->___xxtofl
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Escribir_dato->_descomponer
    _descomponer->___lbdiv
    ___lbdiv->___lbmod
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _sprintf->___flsub
    _scale->___flmul
    _fround->___flmul
    ___flmul->___awdiv
    ___fltol->_scale
    ___flsub->___fladd
    ___fladd->_fround
    _portsetup->_I2C_Master_Init
    ___fldiv->___flmul
    _Escribir_dato->_descomponer

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   51067
                                             76 BANK0      4     4      0
                      _Escribir_dato
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___fldiv
                            ___flmul
                           ___xxtofl
                       _desconvertir
                           _enviar_x
                             _leer_x
                          _portsetup
                        _setupINTOSC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             42    37      5   31109
                                              0 BANK1     35    30      5
                            ___awdiv
                            ___fladd
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               19    15      4    7561
                                             30 BANK0     19    15      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1208
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1364
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              18    14      4    6024
                                             30 BANK0     18    14      4
                            ___flmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             26    18      8    4546
                                              4 BANK0     26    18      8
                          __Umul8_16
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     455
                                              0 COMMON    11     3      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          15     7      8     455
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     474
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     615
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     457
                                             49 BANK0     10     6      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    2485
                                             68 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    2288
                                             48 BANK0     20    12      8
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     121
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8     790
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___fleq                                              12     4      8     394
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) _setupINTOSC                                          1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _portsetup                                            0     0      0     716
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     716
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     618
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _leer_x                                               4     4      0    2228
                                             10 COMMON     4     4      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                          _convertir
 ---------------------------------------------------------------------------------
 (2) _convertir                                            6     5      1     863
                                              4 COMMON     6     5      1
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     320
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     197
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _enviar_x                                             7     3      4    2032
                                              2 COMMON     7     3      4
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1010
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _desconvertir                                         4     4      0    1346
                                             11 COMMON     1     1      0
                                              0 BANK0      3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (1) ___fldiv                                             26    18      8    1273
                                             30 BANK0     26    18      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     648
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Escribir_dato                                        3     1      2    4092
                                              3 BANK0      3     1      2
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                        _descomponer
                          _inttochar
 ---------------------------------------------------------------------------------
 (2) _inttochar                                            1     1      0     220
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _descomponer                                          6     3      3    1738
                                             11 COMMON     3     0      3
                                              0 BANK0      3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              6     5      1     615
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              5     4      1     618
                                              6 COMMON     5     4      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     912
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Escribir_dato
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _descomponer
       ___lbdiv
         ___lbmod (ARG)
       ___lbmod
     _inttochar
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _Lcd_Clear
     _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
   _Lcd_Write_String
     _Lcd_Write_Char
   ___fldiv
     ___flmul (ARG)
       __Umul8_16
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lbdiv (ARG)
       ___lbmod (ARG)
       ___xxtofl (ARG)
     ___xxtofl (ARG)
   ___flmul
   ___xxtofl
   _desconvertir
     ___lbdiv
     ___lbmod
   _enviar_x
     _I2C_Master_Start
     _I2C_Master_Stop
     _I2C_Master_Write
   _leer_x
     _I2C_Master_Read
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
     _I2C_Master_Stop
     _I2C_Master_Write
     _convertir
       ___bmul
   _portsetup
     _I2C_Master_Init
       ___lldiv
   _setupINTOSC
   _sprintf
     ___awdiv
     ___fladd
       _fround (ARG)
         ___flmul
         ___lbdiv
         ___lbmod
     ___fleq
     ___flge
     ___flmul
     ___flneg
     ___flsub
       ___fladd
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
       _scale (ARG)
         ___awdiv
         ___awmod
         ___flmul
     ___lldiv
     ___llmod
     ___wmul
     ___xxtofl
     __div_to_l_
     __tdiv_to_l_
     _fround
     _isdigit
     _scale

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      98       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     23      3A       7       72.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      98      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Feb 15 21:17:03 2023

                    ___fldiv@aexp 0057                      ___fldiv@bexp 0056                                 pc 0002  
                    ___fldiv@sign 004F                    ___bmul@product 0072                    ?_Escribir_dato 0023  
                    ___awdiv@sign 0021                                fsr 0004               ___wmul@multiplicand 0072  
             __Umul8_16@word_mpld 0076                               l120 0BBD                               l131 0BD7  
                             l305 1BF3                               l306 1BF4                               l260 1012  
                             l261 101B                               l262 1024                               l263 102D  
                             l192 1AC7                               l264 1036                               l193 1AC9  
                             l265 103E                               l194 1ACD                               l195 1ACE  
                             l259 1009                               l507 07CA                               l196 1AD2  
                             l197 1AD3                               l517 1B79                               l198 1AD7  
                             l287 1A9A                               l703 1DDA                               l711 1196  
                             l704 1DF4                               l466 0332                               l900 13D6  
                             l708 1130                               l492 060B                               l727 1090  
                             l761 1B28                               l745 1378                               l922 1515  
                             l850 016B                               l924 1521                               l844 0116  
                             l848 018B                               l952 17F3                               l865 0242  
                             l698 12D5                               l886 02C2                               l878 02AA  
                             l990 1204                               l959 1BC4                               l984 11C6  
                             l997 121A                               l998 1224                               _RD3 0043  
                             _RD4 0044                               _RD5 0045                               _RD6 0046  
                             _RD7 0047                               _hor 00CF                               _mes 00CB  
                             _min 00D1                               _sec 00D3                               fsr0 0004  
                             indf 0000                      ___awmod@sign 0076                      ___flmul@aexp 0032  
                    ___flmul@bexp 0037                      ___flmul@sign 0031                      ___flmul@temp 003C  
                    ___flmul@prod 0038                      ___fltol@exp1 005A                              l3000 1E46  
                            l3020 1B5E                              l3004 1E4E                              l3030 1B6D  
                            l3018 1B55                              l3212 0275                              l3204 026A  
                            l3038 1B13                              l3206 026C                              l3070 00F0  
                            l4022 035E                              l4014 0334                              l4006 02F7  
                            l3216 0277                              l3136 0174                              l3128 013E  
                            l3064 00E5                              l4104 05FE                              l4032 03A0  
                            l4016 034E                              l4008 032E                              l3234 02BA  
                            l3162 01B8                              l3154 0199                              l3138 0176  
                            l3146 0185                              l4122 067D                              l3500 1CDE  
                            l3164 01BA                              l3172 01CA                              l3092 010E  
                            l3068 00E8                              l3340 1749                              l3260 1540  
                            l4116 066C                              l4060 0476                              l3238 02BE  
                            l3190 0254                              l3182 0234                              l3342 1766  
                            l3262 1548                              l4150 07A6                              l4320 14AE  
                            l4312 147A                              l4232 13AA                              l3088 010B  
                            l3352 177F                              l3280 156B                              l4136 06B2  
                            l4128 0699                              l4072 0501                              l4064 04B5  
                            l4056 0459                              l4048 03F3                              l4314 1497  
                            l4234 13B2                              l3098 0120                              l3362 17B1  
                            l3258 153E                              l3602 08F0                              l4170 07E0  
                            l3540 1CFC                              l3532 1CF6                              l3524 1CF0  
                            l3516 1CEA                              l3508 1CE4                              l4324 14B0  
                            l4252 13CE                              l4228 13A7                              l3372 17E0  
                            l3348 177D                              l3276 1561                              l4156 07B5  
                            l4092 05C0                              l4076 051C                              l4500 0C20  
                            l3462 1C88                              l3454 1C7D                              l4350 151D  
                            l4334 14E2                              l4262 13F5                              l2910 1FC2  
                            l3198 0263                              l3702 1364                              l3366 17C7  
                            l3278 1563                              l3630 0E44                              l4086 055E  
                            l4158 07BA                              l4510 0C44                              l4422 0B57  
                            l4248 13CB                              l3800 114A                              l3712 1387  
                            l3704 1374                              l3288 1579                              l3608 0983  
                            l3624 0DBF                              l4176 02CE                              l4520 0C53  
                            l4512 0C47                              l4424 0B58                              l3394 1D5E  
                            l4338 14FB                              l4194 1EDE                              l2922 1FF7  
                            l3722 125B                              l3642 0F50                              l3634 0E6F  
                            l4098 05C2                              l4178 07F0                              l4442 0B91  
                            l4434 0B81                              l3492 1CD8                              l3484 1CD2  
                            l3476 1CCD                              l4268 1401                              l2908 1FB2  
                            l3804 1170                              l3900 11D7                              l3660 1ABF  
                            l2940 1F03                              l4540 0C79                              l4460 0BB2  
                            l4444 0B93                              l4436 0B83                              l4372 0A2A  
                            l4294 146F                              l3590 1CC5                              l4198 1EE5  
                            l2918 1FEA                              l3910 1218                              l3902 11E9  
                            l3718 1252                              l3670 1305                              l2950 1F0B  
                            l2934 1EF8                              l4614 0346                              l4550 0C85  
                            l4542 0C7B                              l4518 0C50                              l4470 0BC6  
                            l4288 1450                              l4296 142C                              l3584 1CAE  
                            l3824 104E                              l3912 1209                              l3744 12AD  
                            l3736 1285                              l2864 1BBC                              l2952 1F19  
                            l3648 0FD5                              l4536 0C72                              l4480 0BDA  
                            l4464 0BC0                              l4298 1474                              l2890 00BF  
                            l3578 1CA0                              l3770 1B71                              l3754 12C1  
                            l3666 12FC                              l2962 1F3A                              l4570 0CA4  
                            l4562 0C97                              l4538 0C76                              l4474 0BC8  
                            l3844 107C                              l3828 1057                              l3924 1241  
                            l3764 12E4                              l3756 12D1                              l3692 1351  
                            l3684 1331                              l4564 0C9A                              l4556 0C8C  
                            l4572 0CA6                              l2894 00C5                              l3790 1E06  
                            l3854 109F                              l3846 108C                              l3870 1E89  
                            l2966 1F42                              l2958 1F2F                              l2990 1E1F  
                            l2982 1E19                              l4486 0BE9                              l3864 1E5B  
                            l2992 1E2D                              l4488 0BEA                              l3946 1044  
                            l3866 1E6B                              l3874 1E96                              l3890 11BE  
                            l2978 1E12                              l2996 1E3B                              l3990 02E4  
                            l3896 11D5                              l3978 1D04                              STR_1 00A9  
                            STR_2 00A3                              STR_3 00B3                              STR_4 00AE  
                            STR_5 00B8                              u5005 1D49                              u4045 1E22  
                            u5025 1D68                              u4145 1B16                              u4065 1E33  
                            u4411 01F5                              u4403 01DC                              u4315 017A  
                            u4075 1E3C                              u4420 0209                              u4412 01F6  
                            u5205 1C98                              u5045 1C38                              u4421 020A  
                            u4413 01FB                              u6005 1095                              u4422 020F  
                            u4414 01FC                              u4270 015E                              u4423 0210  
                            u4415 0201                              u4416 0202                              u4280 015F  
                            u5225 1CA6                              u4265 0152                              u5305 0906  
                            u5315 0946                              u5245 1CB5                              u6045 1E5F  
                            u6205 122C                              u6125 11E0                              u5325 098E  
                            u5405 0E0F                              u5415 0E47                              u5185 1C06  
                            u4465 0256                              u6065 1E79                              u6145 11FC  
                            u5265 0824                              u4395 01BE                              u6075 1E8A  
                            u5275 086B                              u5435 0E92                              u5355 0D01  
                            u4565 0294                              u6165 1211                              u5605 1365  
                            u5285 08B3                              u5445 0ECC                              u5365 0D3B  
                            u3855 1FB6                              u5455 0F13                              u5375 0D82  
                            u5545 1333                              u3785 1BC5                              u4825 16FE  
                            u3945 1F0E                              u6505 05C5                              u3875 1FC4  
                            u5635 137D                              u5555 1344                              u4755 161D  
                            u5475 0F66                              u5395 0DD5                              u6515 05F4  
                            u3885 1FD9                              u5901 1181                              u5805 1B81  
                            u5565 1352                              u3965 1F1A                              u5485 0FA0  
                            u6605 0770                              u6445 047F                              u5902 1182  
                            u3895 1FEB                              u5903 1187                              u5735 12C2  
                            u4855 1735                              u3975 1F26                              u5495 0FD8  
                            u6455 04C0                              u5904 1188                              u5905 118D  
                            u4865 174D                              u4785 1672                              u3985 1F30  
                            u6545 0613                              u5906 118E                              u7507 1F60  
                            u6715 1B3C                              u5675 1287                              u4955 179C  
                            u7517 1F6F                              u5845 1E02                              u5765 12DA  
                            u5685 129C                              u4965 17BA                              u4885 1758  
                            u6565 0686                              u6485 04FF                              u7527 1C14  
                            u6815 1435                              u5695 12AF                              u4975 17D2  
                            u6655 07D1                              u6575 0693                              u7537 1C23  
                            u6905 1489                              u6825 143E                              u5881 115B  
                            u5945 1060                              u6665 07DE                              u7457 0A53  
                            u5882 115C                              u7547 1AE8                              u5883 1161  
                            u5795 1B7A                              u6595 070F                              u7467 0B46  
                            u5884 1162                              u6845 1449                              u5885 1167  
                            u7477 0B61                              u5886 1168                              u6855 145E  
                            u5975 107D                              u7487 0C29                              u7497 1F51  
                            u6885 147E                              u6975 14CD                              u6985 14EB  
                            u6995 1506                              _WPUB 0095                 ?_Lcd_Write_String 0075  
                            _mes1 00CA  __end_of_I2C_Master_RepeatedStart 1A93                              _main 09C3  
                            _hora 00CE                              _modo 00C7                              _year 00C9  
                            btemp 007E                              start 0000                ??_Lcd_Write_String 0077  
                 ___fldiv@new_exp 0050                      _sprintf$1118 00AA                   __end_of_Lcd_Cmd 1AF1  
               ___bmul@multiplier 0073                  ?_I2C_Master_Init 0020                  ?_I2C_Master_Read 0070  
                ?_I2C_Master_Wait 0070                  ?_I2C_Master_Stop 0070                     ___fltol@sign1 0059  
                 __end_of___fladd 02CB                             ?_main 0070                   __end_of___fldiv 1527  
                 __end_of___awdiv 1F47                   __end_of___lbdiv 1B6F                   __end_of___flneg 1AB3  
                 __end_of___awmod 1E53                   __end_of___lbmod 1B2E                   __end_of___flmul 1800  
                 __end_of___flsub 1B0F                   __end_of___fltol 10AE                             _ANSEL 0188  
                 __end_of___lldiv 2000                   ___awdiv@divisor 0077                   __end_of___llmod 1E9F  
                 ___awdiv@counter 0020                             _PORTA 0005                             _PORTB 0006  
                           _PORTD 0008                             _TRISA 0085                             _TRISB 0086  
                           _TRISD 0088                             _fecha 00CD                   __end_of_dpowers 00A3  
                           _scale 0CD8                   __end_of_isdigit 1AC1                             _year1 00C8  
                           pclath 000A                             status 0003                             wtemp0 007E  
                 __end_of_sprintf 07F5                   ___lbdiv@divisor 0076                       leer_x@valor 007D  
                 ___lbdiv@counter 0079                  __end_of_Lcd_Init 1FA2                  __end_of_Lcd_Port 1AD9  
                 __initialization 07F5                   ??_Escribir_dato 007E                      __end_of_main 0CD8  
                          ??_main 006C              __end_of_desconvertir 1B4E                 ?_I2C_Master_Start 0070  
               ?_I2C_Master_Write 0070                ??_I2C_Master_Start 0070                ??_I2C_Master_Write 0072  
                ___llmod@dividend 0074                            ?_scale 003E                  ___awdiv@dividend 0079  
                          _ANSELH 0189                         ??_Lcd_Cmd 0071                            _SSPADD 0093  
                          _SSPCON 0014                            _SSPBUF 0013                  __end_of___xxtofl 124A  
                __end_of__powers_ 0047          _I2C_Master_RepeatedStart 1A8E                            ___flge 1116  
                          ___bmul 00BD                            ___fleq 1DC0                         ??___fladd 0058  
                          ___wmul 1B6F                         ??___fldiv 0046                         ??___awdiv 007B  
                          _lecADC 00D6                            _decena 00D4                         ??___lbdiv 0077  
                          _fecha1 00CC                         ??___flneg 0074                         ??___awmod 0074  
                       ??___lbmod 0071                         ??___flmul 002C                         ??___flsub 007E  
                       ??___fltol 0055                         ??___lldiv 0078                         ??___llmod 0078  
                __end_of_enviar_x 1116                            _conver 00C3                            _leer_x 1E9F  
                          _valADC 00D7                            _fround 080C                  ___awdiv@quotient 0022  
                          _minuto 00D0                   ___awmod@divisor 0070                   ___awmod@counter 0075  
                          _unidad 00D5                      ?_setupINTOSC 0070                         ??_isdigit 0070  
                       ??_sprintf 00A5                  ___lbdiv@dividend 0078                   Lcd_Set_Cursor@a 0076  
                 Lcd_Set_Cursor@b 0074                   Lcd_Set_Cursor@y 0078                   Lcd_Set_Cursor@z 0077  
                      ___flge@ff1 0070                        ___flge@ff2 0074                      ___xxtofl@arg 007A  
                    ___xxtofl@exp 0079                      ___xxtofl@val 0070                        ___fleq@ff1 0070  
                      ___fleq@ff2 0074                   ___lbmod@divisor 0070           __end_of__initialization 07FC  
                 ___lbmod@counter 0074                        ___flneg@f1 0070                 __end_of_Lcd_Clear 080C  
                      ___fltol@f1 0051               ___bmul@multiplicand 0070                   descomponer@cent 0020  
                  __pcstackCOMMON 0070                 desconvertir@valor 0021                     __end_of_scale 1000  
                ___lbdiv@quotient 007A                    _Lcd_Set_Cursor 1D3F                        __div_to_l_ 124A  
                  _OPTION_REGbits 0081                         ?_Lcd_Init 0070                         ?_Lcd_Port 0070  
                 __div_to_l_@exp1 0025                   __div_to_l_@cntr 0024                           ??_scale 0042  
                 __div_to_l_@quot 0020                      enviar_x@val1 0078                      enviar_x@val2 0072  
                    enviar_x@val3 0073                      enviar_x@val4 0074                      enviar_x@val5 0075  
                      __pbssBANK1 00C3                     __div_to_l_@f1 0070                     __div_to_l_@f2 0074  
               __end_of__Umul8_16 1BD5                        __pmaintext 09C3                           ?___flge 0070  
                         ?___bmul 0070                           ?___fleq 0070                           ?___wmul 0070  
             convertir@conversion 0076                           ?_leer_x 0070                           ?_fround 003E  
          __end_of_Lcd_Set_Cursor 1D7D                         ?___xxtofl 0070                        ??_Lcd_Init 0074  
                      ??_Lcd_Port 0070                           _SSPCON2 0091                           _SSPSTAT 0094  
                      __stringtab 0003                         ?_enviar_x 0072                    _Lcd_Write_Char 1BFA  
                         _Lcd_Cmd 1AD9                      _desconvertir 1B2E                 __end_of__npowers_ 007B  
                      _scale$1117 004C                           ___fladd 00CE                           ___fldiv 1390  
                         ___awdiv 1EED                           ___lbdiv 1B4E                           ___flneg 1AAA  
                         ___awmod 1E08                           ___lbmod 1B0F                           ___flmul 1527  
                         ___flsub 1AF1                           ___fltol 1047                           ___lldiv 1FA2  
                         ___llmod 1E53                 __end_of_convertir 1CC7                   ?_Lcd_Set_Cursor 0074  
                         __ptext1 02CB                           __ptext2 0CD8                           __ptext3 1E08  
                         __ptext4 1EED                           __ptext5 1AB3                           __ptext6 080C  
                         __ptext7 1527                           __ptext8 1BB2                           __ptext9 12ED  
                     ?__div_to_l_ 0070                           _dpowers 007B                           _isdigit 1AB3  
                      ??___xxtofl 0074                  ___awmod@dividend 0072                           _segundo 00D2  
                         _sprintf 02CB                           clrloop0 1AA3                 __end_of_inttochar 1D02  
          __end_of_Lcd_Write_Char 1C2A              end_of_initialization 07FC                     convertir@tipo 0074  
      ??_I2C_Master_RepeatedStart 0070                        ??_enviar_x 0076                   ___lldiv@divisor 0070  
                 ___lldiv@counter 007D                  I2C_Master_Init@c 0020                  I2C_Master_Read@a 0070  
                   leer_x@address 007C                         Lcd_Port@a 0070                 __end_of_portsetup 1BB2  
           __end_of_Escribir_dato 1DC0                    __tdiv_to_l_@f1 0070                    __tdiv_to_l_@f2 0074  
                   ??__tdiv_to_l_ 0078                         _PORTBbits 0006                         _PORTDbits 0008  
                   ??_descomponer 007E                       ___fladd@grs 0063                  ___lbmod@dividend 0073  
                   ___xxtofl@sign 0078                         _TRISCbits 0087                       ___fldiv@grs 0052  
                     ___fldiv@rem 004B                   ?_Lcd_Write_Char 0070                 Lcd_Write_String@a 0075  
               Lcd_Write_String@i 007A                       ___lbmod@rem 0075                       ___flmul@grs 0033  
                       _Lcd_Clear 0801                desconvertir@decena 0022                    __end_of___flge 11A9  
                  __end_of___bmul 00CE                    __end_of___fleq 1E08                    __end_of___wmul 1B90  
                _Lcd_Write_String 1D02                desconvertir@unidad 0020                    __end_of_leer_x 1EED  
                  __end_of_fround 09C3               start_initialization 07F5               __end_of__tdiv_to_l_ 1390  
             __end_of_descomponer 1C8E                 ??_I2C_Master_Init 0024                 ??_I2C_Master_Read 0072  
               ??_I2C_Master_Wait 0070                 ??_I2C_Master_Stop 0070                   ___llmod@divisor 0070  
                 ___llmod@counter 0079                 Escribir_dato@dato 0025                 Escribir_dato@posx 0023  
               Escribir_dato@posy 0024                        ?_Lcd_Clear 0070                          ??___flge 0078  
                        ??___bmul 0071                          ??___fleq 0078                          ??___wmul 0074  
                       __Umul8_16 1BB2                          ??_leer_x 007A                   Lcd_Write_Char@a 0074  
                 Lcd_Write_Char@y 0073                          ??_fround 0042                     sprintf@tmpval 00B7  
                       ___fladd@a 0054                         ___fladd@b 0050                        fround@prec 004F  
                       ___fldiv@a 003E                         ___fldiv@b 0042                         ___flmul@a 0028  
                       ___flmul@b 0024                         ___flsub@a 0064                         ___flsub@b 0068  
                       ___latbits 0002                    descomponer@dec 0022                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                    descomponer@num 007D                    descomponer@pos 007B  
                  descomponer@uni 0021                   setupINTOSC@IRCF 0070                          ?_Lcd_Cmd 0070  
                     sprintf@flag 00AF                       sprintf@eexp 00B5                       sprintf@fval 00BE  
                     sprintf@prec 00BC                  _I2C_Master_Start 1A84                  _I2C_Master_Write 1A93  
                ??_Lcd_Set_Cursor 0075                          ?___fladd 0050                      inttochar@num 0070  
                        ?___fldiv 003E                          ?___awdiv 0077                          ?___lbdiv 0076  
                        ?___flneg 0070                          ?___awmod 0070                          ?___lbmod 0070  
                        ?___flmul 0024                          ?___flsub 0064                          ?___fltol 0051  
                        ?___lldiv 0070                          ?___llmod 0070                         __npowers_ 0047  
                      ?__Umul8_16 0070                         __pstrings 0003                       __tdiv_to_l_ 12ED  
                    ??__div_to_l_ 0078                         _convertir 1C8E                       _descomponer 1C5B  
                        ?_isdigit 0070                          ?_sprintf 00A0                    ___wmul@product 0074  
                       _inttochar 1CC7                         clear_ram0 1AA2                          Lcd_Cmd@a 0073  
              __end_of__div_to_l_ 12ED                       ??_Lcd_Clear 0074                       __stringbase 0012  
                   ??_setupINTOSC 0070                         _portsetup 1B90                 ___wmul@multiplier 0070  
                      ?_convertir 0074                  ??_Lcd_Write_Char 0071                   convertir@decena 0078  
                        _Lcd_Init 1F47                          _Lcd_Port 1AC1               I2C_Master_Read@temp 0074  
                 convertir@unidad 0077          __end_of_Lcd_Write_String 1D3F                        ?_inttochar 0070  
                     ??__Umul8_16 0072         ?_I2C_Master_RepeatedStart 0070                       _fround$1115 004B  
                     _fround$1116 0047                __end_of__stringtab 0013                        ?_portsetup 0070  
                     _isdigit$939 0070                        sprintf@val 00B1                   _I2C_Master_Init 1C2A  
                 _I2C_Master_Read 1BD5                          ___xxtofl 11A9                   _I2C_Master_Wait 1A9A  
                 _I2C_Master_Stop 1A89                          __ptext10 124A                          __ptext11 11A9  
                        __ptext20 1001                          __ptext12 1B6F                          __ptext21 1B90  
                        __ptext13 1E53                          __ptext30 1A93                          __ptext22 1C2A  
                        __ptext14 1047                          __ptext31 1A89                          __ptext23 1FA2  
                        __ptext15 1AF1                          __ptext40 1CC7                          __ptext32 1A84  
                        __ptext24 1E9F                          __ptext16 00CE                          __ptext41 1C5B  
                        __ptext33 1A9A                          __ptext25 1C8E                          __ptext17 1AAA  
                        __ptext42 1B0F                          __ptext34 1B2E                          __ptext26 00BD  
                        __ptext18 1116                          __ptext43 1B4E                          __ptext35 1390  
                        __ptext27 1A8E                          __ptext19 1DC0                          __ptext44 1BFA  
                        __ptext36 1D02                          __ptext28 1BD5                          __ptext45 1D3F  
                        __ptext37 1F47                          __ptext29 10AE                          __ptext46 1AD9  
                        __ptext38 0801                          __ptext47 1AC1                          __ptext39 1D7D  
             __end_of_setupINTOSC 1047                          __powers_ 0013                          _enviar_x 10AE  
                  convertir@valor 0079                       ??_convertir 0075          __end_of_I2C_Master_Start 1A89  
        __end_of_I2C_Master_Write 1A9A                          isdigit@c 0071                          scale@scl 0050  
              Lcd_Write_Char@temp 0072                         sprintf@ap 00AE                  __tdiv_to_l_@exp1 0025  
                __tdiv_to_l_@cntr 0024                         sprintf@sp 00BB                  __tdiv_to_l_@quot 0020  
                ___lldiv@dividend 0074                       ??_inttochar 0070                     ?_desconvertir 0070  
                       stringcode 000D                        _OSCCONbits 008F           __end_of_I2C_Master_Init 1C5B  
         __end_of_I2C_Master_Read 1BFA           __end_of_I2C_Master_Wait 1AA2                     _Escribir_dato 1D7D  
         __end_of_I2C_Master_Stop 1A8E                Lcd_Set_Cursor@temp 0079                      ?__tdiv_to_l_ 0070  
                     ??_portsetup 007E            __Umul8_16@multiplicand 0070                       _setupINTOSC 1001  
                        sprintf@c 00C2                          sprintf@f 00A0                      ?_descomponer 007B  
                ___lldiv@quotient 0079                 I2C_Master_Write@d 0070                          stringdir 000D  
                        stringtab 0003                       _SSPCON2bits 0091                     ___fladd@signs 0060  
                  ??_desconvertir 007B                      ___fladd@aexp 0061                      ___fladd@bexp 0062  
            __Umul8_16@multiplier 0078                 __Umul8_16@product 0074  
